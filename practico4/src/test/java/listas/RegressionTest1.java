package listas;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test001"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)10.0f);
    java.lang.Object obj12 = null;
    listaSobreArreglos7.insertar(obj12);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    boolean b19 = listaSobreArreglos7.equals((java.lang.Object)(short)-1);
    boolean b20 = listaSobreArreglos7.esVacia();
    boolean b21 = listaSobreArreglos7.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b21);
    java.lang.String str23 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    java.lang.String str26 = listaSobreArreglos25.toString();
    boolean b27 = listaSobreArreglos25.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj30 = null;
    boolean b31 = listaSobreArreglos25.equals(obj30);
    boolean b32 = listaSobreArreglos25.esVacia();
    java.lang.Object obj34 = null;
    listaSobreArreglos25.insertar(0, obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)b38);
    java.lang.Object obj40 = null;
    boolean b41 = listaSobreArreglos25.equals(obj40);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, (java.lang.Object)listaSobreArreglos25);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[fals]"+ "'", str23.equals("[fals]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test002"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    boolean b9 = listaSobreArreglos0.esVacia();
    boolean b10 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test003"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    int i14 = listaSobreArreglos0.longitud();
    int i15 = listaSobreArreglos0.longitud();
    java.lang.Object obj17 = null;
    listaSobreArreglos0.insertar(0, obj17);
    java.lang.Object obj19 = null;
    boolean b20 = listaSobreArreglos0.equals(obj19);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test004"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(0, obj13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = listaSobreArreglos0.obtener(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test005"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listaSobreArreglos0.vaciar();
    java.lang.String str9 = listaSobreArreglos0.toString();
    int i10 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test006"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos8.equals(obj13);
    boolean b15 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.eliminar(0);
    boolean b18 = listaSobreArreglos0.equals((java.lang.Object)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test007"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos3.equals(obj15);
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos3.equals(obj17);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.Object obj20 = null;
    listaSobreArreglos19.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    java.lang.String str24 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    boolean b27 = listaSobreArreglos25.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)10.0f);
    java.lang.Object obj30 = null;
    listaSobreArreglos25.insertar(obj30);
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos25);
    boolean b33 = listaSobreArreglos19.equals((java.lang.Object)listaSobreArreglos25);
    boolean b34 = listaSobreArreglos25.esVacia();
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos25.equals(obj35);
    listaSobreArreglos25.eliminar(0);
    boolean b39 = listaSobreArreglos3.equals((java.lang.Object)listaSobreArreglos25);
    int i40 = listaSobreArreglos25.longitud();
    boolean b41 = listaSobreArreglos25.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test008"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    java.lang.Object obj7 = null;
    listaSobreArreglos5.insertar(obj7);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos5.equals(obj9);
    listaSobreArreglos5.insertar((java.lang.Object)0);
    listaSobreArreglos5.eliminar(0);
    int i15 = listaSobreArreglos5.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos5);
    boolean b17 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos0.obtener((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test009"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    java.lang.Object obj18 = null;
    listaSobreArreglos15.insertar(0, obj18);
    boolean b20 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos15);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    boolean b25 = listaSobreArreglos22.esVacia();
    java.lang.String str26 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    listaSobreArreglos27.vaciar();
    java.lang.String str30 = listaSobreArreglos27.toString();
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    listaSobreArreglos31.vaciar();
    java.lang.String str34 = listaSobreArreglos31.toString();
    boolean b35 = listaSobreArreglos27.equals((java.lang.Object)listaSobreArreglos31);
    boolean b36 = listaSobreArreglos27.esVacia();
    listaSobreArreglos27.vaciar();
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos15.insertar(0, (java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos15.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj42 = listaSobreArreglos15.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test010"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test011"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(0, obj5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = listaSobreArreglos0.obtener((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test012"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    java.lang.Object obj7 = null;
    listaSobreArreglos5.insertar(obj7);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos5.equals(obj9);
    listaSobreArreglos5.insertar((java.lang.Object)0);
    listaSobreArreglos5.eliminar(0);
    int i15 = listaSobreArreglos5.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos5);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test013"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test014"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj15 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    int i18 = listaSobreArreglos17.longitud();
    java.lang.Object obj20 = null;
    listaSobreArreglos17.insertar(0, obj20);
    java.lang.String str22 = listaSobreArreglos17.toString();
    listaSobreArreglos17.eliminar(0);
    boolean b25 = listaSobreArreglos17.esVacia();
    java.lang.Object obj27 = null;
    listaSobreArreglos17.insertar(0, obj27);
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj34 = null;
    boolean b35 = listaSobreArreglos29.equals(obj34);
    boolean b36 = listaSobreArreglos29.esVacia();
    java.lang.Object obj37 = null;
    boolean b38 = listaSobreArreglos29.equals(obj37);
    boolean b40 = listaSobreArreglos29.equals((java.lang.Object)(short)100);
    boolean b41 = listaSobreArreglos29.esVacia();
    boolean b42 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos29);
    listaSobreArreglos0.insertar(0, (java.lang.Object)b42);
    java.lang.Object obj45 = listaSobreArreglos0.obtener(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(4, (java.lang.Object)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null,]"+ "'", str22.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj45 + "' != '" + false+ "'", obj45.equals(false));

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test015"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos0.insertar((int)(short)1, obj16);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str20 = listaSobreArreglos0.toString();
    int i21 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos22.equals(obj25);
    int i27 = listaSobreArreglos22.longitud();
    boolean b28 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    boolean b34 = listaSobreArreglos30.equals((java.lang.Object)1);
    java.lang.Object obj35 = null;
    listaSobreArreglos30.insertar(obj35);
    listas.ListaSobreArreglos listaSobreArreglos37 = new listas.ListaSobreArreglos();
    java.lang.String str38 = listaSobreArreglos37.toString();
    boolean b39 = listaSobreArreglos37.esVacia();
    int i40 = listaSobreArreglos37.longitud();
    java.lang.String str41 = listaSobreArreglos37.toString();
    int i42 = listaSobreArreglos37.longitud();
    listaSobreArreglos30.insertar((java.lang.Object)listaSobreArreglos37);
    java.lang.Object obj44 = null;
    listaSobreArreglos37.insertar(obj44);
    listaSobreArreglos0.insertar(0, obj44);
    java.lang.Object obj47 = null;
    listaSobreArreglos0.insertar(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "]"+ "'", str38.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test016"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    int i18 = listaSobreArreglos7.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test017"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test018"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos8.equals(obj13);
    listaSobreArreglos8.vaciar();
    int i16 = listaSobreArreglos8.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i16);
    java.lang.String str18 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[010.0null,]"+ "'", str18.equals("[010.0null,]"));

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test019"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(obj10);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(0, obj13);
    listaSobreArreglos0.vaciar();
    boolean b16 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = listaSobreArreglos0.obtener(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test020"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.vaciar();
    java.lang.Object obj13 = null;
    listaSobreArreglos3.insertar(0, obj13);
    int i15 = listaSobreArreglos3.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos3.eliminar((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test021"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    boolean b7 = listaSobreArreglos0.equals((java.lang.Object)(short)100);
    java.lang.Object obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test022"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    boolean b20 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    java.lang.Object obj25 = null;
    listaSobreArreglos21.insertar(obj25);
    listaSobreArreglos21.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    java.lang.String str29 = listaSobreArreglos28.toString();
    boolean b30 = listaSobreArreglos28.esVacia();
    int i31 = listaSobreArreglos28.longitud();
    listaSobreArreglos21.insertar((java.lang.Object)i31);
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    java.lang.String str34 = listaSobreArreglos33.toString();
    boolean b35 = listaSobreArreglos33.esVacia();
    listaSobreArreglos33.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj38 = null;
    boolean b39 = listaSobreArreglos33.equals(obj38);
    boolean b40 = listaSobreArreglos33.esVacia();
    java.lang.Object obj41 = null;
    boolean b42 = listaSobreArreglos33.equals(obj41);
    java.lang.String str43 = listaSobreArreglos33.toString();
    boolean b44 = listaSobreArreglos33.esVacia();
    java.lang.Object obj46 = listaSobreArreglos33.obtener((int)(byte)0);
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos33);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos33);
    java.lang.String str49 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[-]"+ "'", str43.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + (short)-1+ "'", obj46.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[]null, [-]"+ "'", str49.equals("[]null, [-]"));

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test023"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    int i11 = listaSobreArreglos8.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.vaciar();
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos12);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos8);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    listaSobreArreglos20.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos20.vaciar();
    listaSobreArreglos20.vaciar();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj31 = null;
    boolean b32 = listaSobreArreglos8.equals(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test024"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test025"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    int i11 = listaSobreArreglos4.longitud();
    java.lang.String str12 = listaSobreArreglos4.toString();
    int i13 = listaSobreArreglos4.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test026"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = listaSobreArreglos0.obtener(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test027"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    int i25 = listaSobreArreglos11.longitud();
    java.lang.Object obj27 = listaSobreArreglos11.obtener(0);
    listaSobreArreglos11.eliminar(0);
    java.lang.String str30 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    java.lang.String str33 = listaSobreArreglos32.toString();
    boolean b34 = listaSobreArreglos32.esVacia();
    int i35 = listaSobreArreglos32.longitud();
    java.lang.String str36 = listaSobreArreglos32.toString();
    listas.ListaSobreArreglos listaSobreArreglos37 = new listas.ListaSobreArreglos();
    int i38 = listaSobreArreglos37.longitud();
    listaSobreArreglos37.vaciar();
    java.lang.String str40 = listaSobreArreglos37.toString();
    listas.ListaSobreArreglos listaSobreArreglos41 = new listas.ListaSobreArreglos();
    int i42 = listaSobreArreglos41.longitud();
    listaSobreArreglos41.vaciar();
    java.lang.String str44 = listaSobreArreglos41.toString();
    boolean b45 = listaSobreArreglos37.equals((java.lang.Object)listaSobreArreglos41);
    boolean b46 = listaSobreArreglos37.esVacia();
    java.lang.String str47 = listaSobreArreglos37.toString();
    listas.ListaSobreArreglos listaSobreArreglos48 = new listas.ListaSobreArreglos();
    int i49 = listaSobreArreglos48.longitud();
    boolean b50 = listaSobreArreglos48.esVacia();
    boolean b52 = listaSobreArreglos48.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos53 = new listas.ListaSobreArreglos();
    java.lang.String str54 = listaSobreArreglos53.toString();
    boolean b55 = listaSobreArreglos53.esVacia();
    listaSobreArreglos53.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos48.insertar((java.lang.Object)listaSobreArreglos53);
    boolean b59 = listaSobreArreglos48.esVacia();
    int i60 = listaSobreArreglos48.longitud();
    listaSobreArreglos37.insertar((java.lang.Object)listaSobreArreglos48);
    boolean b62 = listaSobreArreglos37.esVacia();
    listaSobreArreglos32.insertar((java.lang.Object)b62);
    listaSobreArreglos32.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.insertar((int)(byte)1, (java.lang.Object)listaSobreArreglos32);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "]"+ "'", str36.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "]"+ "'", str40.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "]"+ "'", str44.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "]"+ "'", str54.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test028"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    int i24 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    int i26 = listaSobreArreglos0.longitud();
    int i27 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = listaSobreArreglos0.obtener((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test029"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    listaSobreArreglos5.vaciar();
    java.lang.Object obj7 = null;
    boolean b8 = listaSobreArreglos5.equals(obj7);
    java.lang.String str9 = listaSobreArreglos5.toString();
    boolean b10 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos0.equals(obj12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = listaSobreArreglos0.obtener((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test030"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    listaSobreArreglos0.eliminar((int)(byte)0);
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj15 = null;
    listaSobreArreglos0.insertar(obj15);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test031"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.vaciar();
    java.lang.String str12 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    listaSobreArreglos14.vaciar();
    java.lang.String str16 = listaSobreArreglos14.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    int i18 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    java.lang.String str20 = listaSobreArreglos17.toString();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    listaSobreArreglos21.vaciar();
    java.lang.String str24 = listaSobreArreglos21.toString();
    boolean b25 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos21);
    boolean b26 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    boolean b28 = listaSobreArreglos14.equals((java.lang.Object)listaSobreArreglos17);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos3.insertar((int)(short)10, (java.lang.Object)listaSobreArreglos14);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test032"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listaSobreArreglos15.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj24 = listaSobreArreglos15.obtener(0);
    boolean b25 = listaSobreArreglos15.esVacia();
    java.lang.Object obj27 = listaSobreArreglos15.obtener(0);
    int i28 = listaSobreArreglos15.longitud();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    int i30 = listaSobreArreglos29.longitud();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)10.0f);
    java.lang.Object obj34 = null;
    listaSobreArreglos29.insertar(obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    boolean b41 = listaSobreArreglos29.equals((java.lang.Object)(short)-1);
    listaSobreArreglos15.insertar((java.lang.Object)b41);
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    boolean b44 = listaSobreArreglos43.esVacia();
    boolean b45 = listaSobreArreglos43.esVacia();
    java.lang.Object obj46 = null;
    boolean b47 = listaSobreArreglos43.equals(obj46);
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos43);
    boolean b49 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos43);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj51 = listaSobreArreglos43.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0d+ "'", obj24.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0d+ "'", obj27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test033"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test034"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj11 = null;
    listaSobreArreglos3.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)b14);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos16.equals(obj18);
    boolean b20 = listaSobreArreglos3.equals((java.lang.Object)b19);
    java.lang.String str21 = listaSobreArreglos3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[10.0null, null, tru]"+ "'", str21.equals("[10.0null, null, tru]"));

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test035"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos11.eliminar(0);
    java.lang.Object obj28 = null;
    listaSobreArreglos11.insertar(0, obj28);
    int i30 = listaSobreArreglos11.longitud();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    java.lang.String str33 = listaSobreArreglos32.toString();
    java.lang.String str34 = listaSobreArreglos32.toString();
    listas.ListaSobreArreglos listaSobreArreglos35 = new listas.ListaSobreArreglos();
    int i36 = listaSobreArreglos35.longitud();
    boolean b37 = listaSobreArreglos35.esVacia();
    listaSobreArreglos35.insertar((java.lang.Object)10.0f);
    java.lang.Object obj40 = null;
    listaSobreArreglos35.insertar(obj40);
    listaSobreArreglos32.insertar((java.lang.Object)listaSobreArreglos35);
    java.lang.Object obj44 = listaSobreArreglos32.obtener(0);
    java.lang.String str45 = listaSobreArreglos32.toString();
    boolean b46 = listaSobreArreglos32.esVacia();
    java.lang.Object obj48 = null;
    listaSobreArreglos32.insertar((int)(short)1, obj48);
    java.lang.Object obj50 = null;
    listaSobreArreglos32.insertar(obj50);
    listaSobreArreglos11.insertar(0, (java.lang.Object)listaSobreArreglos32);
    listaSobreArreglos32.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[[10.0null,]"+ "'", str45.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test036"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    int i8 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test037"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos0.insertar((int)(short)1, obj16);
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test038"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    boolean b12 = listaSobreArreglos11.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos11.insertar(obj13);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos11.equals(obj15);
    listaSobreArreglos11.insertar((java.lang.Object)0);
    listaSobreArreglos11.eliminar(0);
    int i21 = listaSobreArreglos11.longitud();
    listaSobreArreglos6.insertar(0, (java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[10.]"+ "'", str5.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test039"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    java.lang.String str9 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)10.0f);
    java.lang.Object obj15 = null;
    listaSobreArreglos10.insertar(obj15);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    java.lang.Object obj25 = null;
    listaSobreArreglos21.insertar(obj25);
    listaSobreArreglos0.insertar(0, obj25);
    java.lang.String str28 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    java.lang.String str31 = listaSobreArreglos30.toString();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    java.lang.String str34 = listaSobreArreglos30.toString();
    int i35 = listaSobreArreglos30.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos30);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj38 = listaSobreArreglos30.obtener((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null,]"+ "'", str28.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test040"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i12 = listaSobreArreglos5.longitud();
    listaSobreArreglos5.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.insertar(4, (java.lang.Object)"[null, -]");
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test041"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos4.insertar(obj11);
    boolean b13 = listaSobreArreglos4.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test042"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)(short)-1);
    boolean b18 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.eliminar(0);
    java.lang.String str21 = listaSobreArreglos13.toString();
    boolean b22 = listaSobreArreglos13.esVacia();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos13);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos0.equals(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test043"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    java.lang.String str16 = listaSobreArreglos6.toString();
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    boolean b19 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(4, (java.lang.Object)"[[-][[-]null, null,]");
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test044"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    listaSobreArreglos0.eliminar((int)(byte)0);
    java.lang.String str14 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    boolean b20 = listaSobreArreglos16.equals((java.lang.Object)1);
    listaSobreArreglos16.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj25 = listaSobreArreglos16.obtener(0);
    boolean b26 = listaSobreArreglos16.esVacia();
    java.lang.Object obj27 = null;
    listaSobreArreglos16.insertar(obj27);
    listaSobreArreglos16.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(100, (java.lang.Object)listaSobreArreglos16);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0d+ "'", obj25.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test045"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(0, obj18);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    boolean b21 = listaSobreArreglos20.esVacia();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b23 = listaSobreArreglos20.esVacia();
    java.lang.String str24 = listaSobreArreglos20.toString();
    int i25 = listaSobreArreglos20.longitud();
    listaSobreArreglos20.vaciar();
    boolean b27 = listaSobreArreglos20.esVacia();
    boolean b28 = listaSobreArreglos0.equals((java.lang.Object)b27);
    java.lang.Object obj30 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, obj30);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null,]"+ "'", str15.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test046"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.vaciar();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos5.equals(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)b9);
    int i11 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    listaSobreArreglos12.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos12);
    int i16 = listaSobreArreglos12.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test047"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.eliminar(0);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos3.equals(obj13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = listaSobreArreglos3.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test048"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    int i18 = listaSobreArreglos6.longitud();
    java.lang.String str19 = listaSobreArreglos6.toString();
    listaSobreArreglos6.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test049"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    int i9 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    boolean b16 = listaSobreArreglos11.esVacia();
    boolean b17 = listaSobreArreglos11.esVacia();
    java.lang.Object obj18 = null;
    listaSobreArreglos11.insertar(obj18);
    java.lang.String str20 = listaSobreArreglos11.toString();
    int i21 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj23 = null;
    boolean b24 = listaSobreArreglos0.equals(obj23);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[-1null,]"+ "'", str20.equals("[-1null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test050"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    boolean b12 = listaSobreArreglos8.equals((java.lang.Object)1);
    java.lang.Object obj13 = null;
    listaSobreArreglos8.insertar(obj13);
    listaSobreArreglos0.insertar(0, obj13);
    int i16 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test051"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.String str6 = listaSobreArreglos0.toString();
    int i7 = listaSobreArreglos0.longitud();
    boolean b8 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    listaSobreArreglos10.vaciar();
    java.lang.String str12 = listaSobreArreglos10.toString();
    java.lang.Object obj13 = null;
    listaSobreArreglos10.insertar(obj13);
    listaSobreArreglos10.eliminar(0);
    java.lang.String str17 = listaSobreArreglos10.toString();
    java.lang.Object obj18 = null;
    listaSobreArreglos10.insertar(obj18);
    listaSobreArreglos0.insertar(0, obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null,]"+ "'", str6.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test052"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos11.equals(obj14);
    java.lang.String str16 = listaSobreArreglos11.toString();
    listaSobreArreglos11.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test053"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    boolean b16 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test054"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'4', obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test055"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    int i13 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    int i18 = listaSobreArreglos17.longitud();
    java.lang.Object obj20 = null;
    listaSobreArreglos17.insertar(0, obj20);
    java.lang.String str22 = listaSobreArreglos17.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)str22);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null,]"+ "'", str22.equals("[null,]"));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test056"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    boolean b11 = listaSobreArreglos10.esVacia();
    boolean b12 = listaSobreArreglos10.esVacia();
    boolean b13 = listaSobreArreglos10.esVacia();
    java.lang.String str14 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    boolean b16 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.vaciar();
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos15.equals(obj18);
    listaSobreArreglos10.insertar((java.lang.Object)b19);
    int i21 = listaSobreArreglos10.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    listaSobreArreglos22.vaciar();
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos22);
    boolean b26 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos10);
    java.lang.String str27 = listaSobreArreglos10.toString();
    listaSobreArreglos10.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[false]"+ "'", str27.equals("[false]"));

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test057"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    boolean b11 = listaSobreArreglos10.esVacia();
    boolean b12 = listaSobreArreglos10.esVacia();
    boolean b13 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.vaciar();
    boolean b15 = listaSobreArreglos10.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    boolean b17 = listaSobreArreglos0.esVacia();
    java.lang.Object obj19 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj20 = null;
    listaSobreArreglos0.insertar(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj19);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test058"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)(short)-1);
    boolean b18 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos13);
    listaSobreArreglos13.vaciar();
    listaSobreArreglos13.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test059"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)(short)-1);
    boolean b18 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.eliminar(0);
    java.lang.String str21 = listaSobreArreglos13.toString();
    boolean b22 = listaSobreArreglos13.esVacia();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos13);
    java.lang.String str24 = listaSobreArreglos13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test060"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(obj10);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test061"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    java.lang.String str10 = listaSobreArreglos9.toString();
    boolean b11 = listaSobreArreglos9.esVacia();
    int i12 = listaSobreArreglos9.longitud();
    java.lang.String str13 = listaSobreArreglos9.toString();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    boolean b19 = listaSobreArreglos14.esVacia();
    listaSobreArreglos9.insertar((java.lang.Object)listaSobreArreglos14);
    java.lang.Object obj21 = null;
    boolean b22 = listaSobreArreglos14.equals(obj21);
    listas.ListaSobreArreglos listaSobreArreglos23 = new listas.ListaSobreArreglos();
    listaSobreArreglos23.vaciar();
    int i25 = listaSobreArreglos23.longitud();
    listaSobreArreglos14.insertar((java.lang.Object)listaSobreArreglos23);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, (java.lang.Object)listaSobreArreglos14);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test062"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.vaciar();
    java.lang.Object obj13 = null;
    listaSobreArreglos3.insertar(0, obj13);
    int i15 = listaSobreArreglos3.longitud();
    int i16 = listaSobreArreglos3.longitud();
    listaSobreArreglos3.eliminar(0);
    boolean b19 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test063"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos17.equals(obj22);
    listaSobreArreglos17.insertar((java.lang.Object)0);
    boolean b26 = listaSobreArreglos17.esVacia();
    int i27 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj31 = null;
    listaSobreArreglos0.insertar(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test064"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    java.lang.String str9 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    java.lang.String str16 = listaSobreArreglos12.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    java.lang.Object obj20 = null;
    boolean b21 = listaSobreArreglos17.equals(obj20);
    listaSobreArreglos12.insertar((java.lang.Object)b21);
    int i23 = listaSobreArreglos12.longitud();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    listaSobreArreglos24.vaciar();
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[-1]"+ "'", str9.equals("[-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test065"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    int i13 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)10.0f);
    java.lang.Object obj19 = null;
    listaSobreArreglos14.insertar(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    boolean b26 = listaSobreArreglos14.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)b26);
    java.lang.String str28 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    int i32 = listaSobreArreglos29.longitud();
    java.lang.String str33 = listaSobreArreglos29.toString();
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    java.lang.String str35 = listaSobreArreglos34.toString();
    boolean b36 = listaSobreArreglos34.esVacia();
    listaSobreArreglos34.insertar((java.lang.Object)(short)-1);
    boolean b39 = listaSobreArreglos34.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)listaSobreArreglos34);
    java.lang.Object obj41 = null;
    boolean b42 = listaSobreArreglos34.equals(obj41);
    boolean b43 = listaSobreArreglos34.esVacia();
    listaSobreArreglos34.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    listas.ListaSobreArreglos listaSobreArreglos48 = new listas.ListaSobreArreglos();
    int i49 = listaSobreArreglos48.longitud();
    java.lang.Object obj51 = null;
    listaSobreArreglos48.insertar(0, obj51);
    int i53 = listaSobreArreglos48.longitud();
    boolean b55 = listaSobreArreglos48.equals((java.lang.Object)1.0f);
    java.lang.String str56 = listaSobreArreglos48.toString();
    listas.ListaSobreArreglos listaSobreArreglos57 = new listas.ListaSobreArreglos();
    int i58 = listaSobreArreglos57.longitud();
    boolean b59 = listaSobreArreglos57.esVacia();
    boolean b61 = listaSobreArreglos57.equals((java.lang.Object)1);
    java.lang.Object obj62 = null;
    listaSobreArreglos57.insertar(obj62);
    listas.ListaSobreArreglos listaSobreArreglos64 = new listas.ListaSobreArreglos();
    int i65 = listaSobreArreglos64.longitud();
    listaSobreArreglos64.vaciar();
    java.lang.String str67 = listaSobreArreglos64.toString();
    listas.ListaSobreArreglos listaSobreArreglos68 = new listas.ListaSobreArreglos();
    int i69 = listaSobreArreglos68.longitud();
    listaSobreArreglos68.vaciar();
    java.lang.String str71 = listaSobreArreglos68.toString();
    boolean b72 = listaSobreArreglos64.equals((java.lang.Object)listaSobreArreglos68);
    boolean b73 = listaSobreArreglos64.esVacia();
    java.lang.String str74 = listaSobreArreglos64.toString();
    listas.ListaSobreArreglos listaSobreArreglos75 = new listas.ListaSobreArreglos();
    int i76 = listaSobreArreglos75.longitud();
    boolean b77 = listaSobreArreglos75.esVacia();
    boolean b79 = listaSobreArreglos75.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos80 = new listas.ListaSobreArreglos();
    java.lang.String str81 = listaSobreArreglos80.toString();
    boolean b82 = listaSobreArreglos80.esVacia();
    listaSobreArreglos80.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos75.insertar((java.lang.Object)listaSobreArreglos80);
    boolean b86 = listaSobreArreglos75.esVacia();
    int i87 = listaSobreArreglos75.longitud();
    listaSobreArreglos64.insertar((java.lang.Object)listaSobreArreglos75);
    boolean b89 = listaSobreArreglos64.esVacia();
    java.lang.Object obj90 = null;
    listaSobreArreglos64.insertar(obj90);
    boolean b92 = listaSobreArreglos57.equals((java.lang.Object)listaSobreArreglos64);
    java.lang.Object obj93 = null;
    listaSobreArreglos64.insertar(obj93);
    listaSobreArreglos48.insertar((java.lang.Object)listaSobreArreglos64);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(5, (java.lang.Object)listaSobreArreglos48);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[10.0fals]"+ "'", str28.equals("[10.0fals]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[null,]"+ "'", str56.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "]"+ "'", str67.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "]"+ "'", str71.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "]"+ "'", str74.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "]"+ "'", str81.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test066"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos3.equals(obj15);
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos3.equals(obj17);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.Object obj20 = null;
    listaSobreArreglos19.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    java.lang.String str24 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    boolean b27 = listaSobreArreglos25.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)10.0f);
    java.lang.Object obj30 = null;
    listaSobreArreglos25.insertar(obj30);
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos25);
    boolean b33 = listaSobreArreglos19.equals((java.lang.Object)listaSobreArreglos25);
    boolean b34 = listaSobreArreglos25.esVacia();
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos25.equals(obj35);
    listaSobreArreglos25.eliminar(0);
    boolean b39 = listaSobreArreglos3.equals((java.lang.Object)listaSobreArreglos25);
    int i40 = listaSobreArreglos25.longitud();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    java.lang.String str43 = listaSobreArreglos42.toString();
    java.lang.String str44 = listaSobreArreglos42.toString();
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    int i46 = listaSobreArreglos45.longitud();
    boolean b47 = listaSobreArreglos45.esVacia();
    listaSobreArreglos45.insertar((java.lang.Object)10.0f);
    java.lang.Object obj50 = null;
    listaSobreArreglos45.insertar(obj50);
    listaSobreArreglos42.insertar((java.lang.Object)listaSobreArreglos45);
    java.lang.Object obj54 = listaSobreArreglos42.obtener(0);
    java.lang.String str55 = listaSobreArreglos42.toString();
    boolean b56 = listaSobreArreglos42.esVacia();
    java.lang.Object obj58 = null;
    listaSobreArreglos42.insertar((int)(short)1, obj58);
    listaSobreArreglos42.eliminar(0);
    java.lang.String str62 = listaSobreArreglos42.toString();
    int i63 = listaSobreArreglos42.longitud();
    listas.ListaSobreArreglos listaSobreArreglos64 = new listas.ListaSobreArreglos();
    boolean b65 = listaSobreArreglos64.esVacia();
    boolean b66 = listaSobreArreglos64.esVacia();
    java.lang.Object obj67 = null;
    boolean b68 = listaSobreArreglos64.equals(obj67);
    int i69 = listaSobreArreglos64.longitud();
    boolean b70 = listaSobreArreglos42.equals((java.lang.Object)listaSobreArreglos64);
    int i71 = listaSobreArreglos42.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos25.insertar((int)(short)10, (java.lang.Object)listaSobreArreglos42);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "]"+ "'", str44.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[[10.0null,]"+ "'", str55.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "]"+ "'", str62.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test067"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    listaSobreArreglos0.insertar(obj6);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'a', obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test068"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    boolean b10 = listaSobreArreglos9.esVacia();
    boolean b11 = listaSobreArreglos9.esVacia();
    boolean b12 = listaSobreArreglos9.esVacia();
    java.lang.String str13 = listaSobreArreglos9.toString();
    java.lang.Object obj14 = null;
    listaSobreArreglos9.insertar(obj14);
    int i16 = listaSobreArreglos9.longitud();
    boolean b17 = listaSobreArreglos9.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos9);
    boolean b19 = listaSobreArreglos9.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test069"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i11 = listaSobreArreglos5.longitud();
    listaSobreArreglos5.insertar(0, (java.lang.Object)4);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test070"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)(short)-1);
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos12);
    boolean b19 = listaSobreArreglos7.esVacia();
    java.lang.Object obj20 = null;
    listaSobreArreglos7.insertar(obj20);
    listaSobreArreglos7.vaciar();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos0.vaciar();
    boolean b25 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj27 = listaSobreArreglos0.obtener((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test071"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos17.equals(obj22);
    listaSobreArreglos17.insertar((java.lang.Object)0);
    boolean b26 = listaSobreArreglos17.esVacia();
    int i27 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    boolean b33 = listaSobreArreglos31.esVacia();
    boolean b35 = listaSobreArreglos31.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos31.insertar((java.lang.Object)listaSobreArreglos36);
    boolean b42 = listaSobreArreglos31.esVacia();
    java.lang.String str43 = listaSobreArreglos31.toString();
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    int i46 = listaSobreArreglos45.longitud();
    boolean b47 = listaSobreArreglos45.esVacia();
    boolean b49 = listaSobreArreglos45.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos50 = new listas.ListaSobreArreglos();
    java.lang.String str51 = listaSobreArreglos50.toString();
    boolean b52 = listaSobreArreglos50.esVacia();
    listaSobreArreglos50.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos45.insertar((java.lang.Object)listaSobreArreglos50);
    java.lang.Object obj56 = null;
    listaSobreArreglos45.insertar(obj56);
    int i58 = listaSobreArreglos45.longitud();
    java.lang.Object obj59 = null;
    listaSobreArreglos45.insertar(obj59);
    listaSobreArreglos31.insertar((int)(short)1, (java.lang.Object)listaSobreArreglos45);
    listaSobreArreglos17.insertar(0, (java.lang.Object)listaSobreArreglos31);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos31.eliminar((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[[-]"+ "'", str43.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "]"+ "'", str51.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test072"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    java.lang.String str11 = listaSobreArreglos10.toString();
    java.lang.String str12 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)10.0f);
    java.lang.Object obj18 = null;
    listaSobreArreglos13.insertar(obj18);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos13);
    listaSobreArreglos13.vaciar();
    boolean b22 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos13);
    int i23 = listaSobreArreglos13.longitud();
    java.lang.String str24 = listaSobreArreglos13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test073"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    int i2 = listaSobreArreglos0.longitud();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj5 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(5, obj5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test074"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    int i24 = listaSobreArreglos0.longitud();
    java.lang.Object obj25 = null;
    listaSobreArreglos0.insertar(obj25);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj29 = null;
    listaSobreArreglos0.insertar((int)(short)0, obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test075"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    listaSobreArreglos5.vaciar();
    java.lang.Object obj7 = null;
    boolean b8 = listaSobreArreglos5.equals(obj7);
    java.lang.String str9 = listaSobreArreglos5.toString();
    boolean b10 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos5);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos5.obtener((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test076"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)10.0f);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    boolean b13 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos4.insertar((int)(byte)10, (java.lang.Object)(-1.0f));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test077"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test078"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos4.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test079"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    int i6 = listaSobreArreglos5.longitud();
    boolean b7 = listaSobreArreglos5.esVacia();
    boolean b9 = listaSobreArreglos5.equals((java.lang.Object)1);
    boolean b10 = listaSobreArreglos5.esVacia();
    java.lang.Object obj11 = null;
    listaSobreArreglos5.insertar(obj11);
    boolean b13 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj15 = listaSobreArreglos5.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj15);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test080"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj12 = null;
    listaSobreArreglos0.insertar(0, obj12);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    java.lang.Object obj17 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(10, obj17);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[-]"+ "'", str10.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test081"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    int i8 = listaSobreArreglos0.longitud();
    java.lang.Object obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(1, obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test082"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.String str11 = listaSobreArreglos5.toString();
    listaSobreArreglos5.vaciar();
    boolean b13 = listaSobreArreglos5.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[-]"+ "'", str11.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test083"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i11 = listaSobreArreglos5.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(0, obj16);
    java.lang.Object obj19 = listaSobreArreglos12.obtener((int)(short)0);
    listaSobreArreglos12.vaciar();
    java.lang.String str21 = listaSobreArreglos12.toString();
    int i22 = listaSobreArreglos12.longitud();
    java.lang.String str23 = listaSobreArreglos12.toString();
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos12);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj26 = listaSobreArreglos12.obtener((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test084"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'#', obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test085"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b6 = listaSobreArreglos0.esVacia();
    boolean b7 = listaSobreArreglos0.esVacia();
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.String str9 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    boolean b14 = listaSobreArreglos10.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos15);
    boolean b21 = listaSobreArreglos10.esVacia();
    boolean b22 = listaSobreArreglos10.esVacia();
    boolean b23 = listaSobreArreglos10.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)10.0f);
    java.lang.Object obj29 = null;
    listaSobreArreglos24.insertar(obj29);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    java.lang.String str32 = listaSobreArreglos31.toString();
    boolean b33 = listaSobreArreglos31.esVacia();
    listaSobreArreglos31.insertar((java.lang.Object)(short)-1);
    boolean b36 = listaSobreArreglos24.equals((java.lang.Object)(short)-1);
    boolean b37 = listaSobreArreglos24.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    int i40 = listaSobreArreglos39.longitud();
    boolean b41 = listaSobreArreglos39.esVacia();
    listaSobreArreglos39.insertar((java.lang.Object)10.0f);
    java.lang.Object obj44 = null;
    listaSobreArreglos39.insertar(obj44);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    java.lang.String str47 = listaSobreArreglos46.toString();
    boolean b48 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.insertar((java.lang.Object)(short)-1);
    boolean b51 = listaSobreArreglos39.equals((java.lang.Object)(short)-1);
    boolean b52 = listaSobreArreglos39.esVacia();
    listaSobreArreglos24.insertar(0, (java.lang.Object)listaSobreArreglos39);
    int i54 = listaSobreArreglos24.longitud();
    listaSobreArreglos10.insertar((java.lang.Object)i54);
    listaSobreArreglos0.insertar((java.lang.Object)i54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 3);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test086"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    int i17 = listaSobreArreglos6.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos6.eliminar((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test087"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    boolean b17 = listaSobreArreglos0.equals((java.lang.Object)"[10.010]");
    java.lang.String str18 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test088"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos17.equals(obj22);
    listaSobreArreglos17.insertar((java.lang.Object)0);
    boolean b26 = listaSobreArreglos17.esVacia();
    int i27 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    listaSobreArreglos0.eliminar(0);
    int i32 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test089"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    int i11 = listaSobreArreglos8.longitud();
    int i12 = listaSobreArreglos8.longitud();
    listaSobreArreglos8.vaciar();
    boolean b14 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos8);
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    int i19 = listaSobreArreglos18.longitud();
    boolean b20 = listaSobreArreglos18.esVacia();
    boolean b22 = listaSobreArreglos18.equals((java.lang.Object)1);
    listaSobreArreglos18.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj27 = listaSobreArreglos18.obtener(0);
    boolean b28 = listaSobreArreglos18.esVacia();
    listaSobreArreglos18.eliminar(0);
    int i31 = listaSobreArreglos18.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos18);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj34 = listaSobreArreglos18.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0d+ "'", obj27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test090"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    listaSobreArreglos11.vaciar();
    java.lang.String str14 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    listaSobreArreglos15.vaciar();
    java.lang.String str18 = listaSobreArreglos15.toString();
    boolean b19 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos15);
    boolean b20 = listaSobreArreglos11.esVacia();
    java.lang.String str21 = listaSobreArreglos11.toString();
    boolean b22 = listaSobreArreglos11.esVacia();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos11);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    java.lang.String str28 = listaSobreArreglos24.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    boolean b34 = listaSobreArreglos29.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos29);
    java.lang.Object obj36 = null;
    boolean b37 = listaSobreArreglos29.equals(obj36);
    boolean b38 = listaSobreArreglos29.esVacia();
    java.lang.Object obj39 = null;
    listaSobreArreglos29.insertar(obj39);
    boolean b41 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos29);
    listaSobreArreglos29.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj45 = listaSobreArreglos29.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test091"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listaSobreArreglos0.insertar((java.lang.Object)0.0f);
    boolean b7 = listaSobreArreglos0.esVacia();
    boolean b8 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test092"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)10.0f);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    listaSobreArreglos0.insertar((java.lang.Object)10);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos0.equals(obj15);
    int i17 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test093"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos0.eliminar(0);
    int i16 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = listaSobreArreglos0.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test094"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos0.esVacia();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(0, obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos21.equals(obj26);
    boolean b28 = listaSobreArreglos21.esVacia();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos21.equals(obj29);
    boolean b31 = listaSobreArreglos21.esVacia();
    boolean b32 = listaSobreArreglos0.equals((java.lang.Object)b31);
    int i33 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    int i35 = listaSobreArreglos34.longitud();
    boolean b36 = listaSobreArreglos34.esVacia();
    boolean b38 = listaSobreArreglos34.equals((java.lang.Object)1);
    listaSobreArreglos34.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj43 = listaSobreArreglos34.obtener(0);
    boolean b44 = listaSobreArreglos34.esVacia();
    java.lang.Object obj46 = listaSobreArreglos34.obtener(0);
    listaSobreArreglos34.eliminar(0);
    java.lang.String str49 = listaSobreArreglos34.toString();
    int i50 = listaSobreArreglos34.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos34);
    listaSobreArreglos34.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0d+ "'", obj43.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 10.0d+ "'", obj46.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "]"+ "'", str49.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test095"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.vaciar();
    int i8 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    int i10 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos0.obtener(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test096"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    boolean b12 = listaSobreArreglos8.equals((java.lang.Object)1);
    java.lang.Object obj13 = null;
    listaSobreArreglos8.insertar(obj13);
    listaSobreArreglos0.insertar(0, obj13);
    java.lang.String str16 = listaSobreArreglos0.toString();
    java.lang.String str17 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null,]"+ "'", str16.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null,]"+ "'", str17.equals("[null,]"));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test097"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    listaSobreArreglos7.vaciar();
    java.lang.String str10 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    listaSobreArreglos11.vaciar();
    java.lang.String str14 = listaSobreArreglos11.toString();
    boolean b15 = listaSobreArreglos7.equals((java.lang.Object)listaSobreArreglos11);
    boolean b16 = listaSobreArreglos7.esVacia();
    java.lang.String str17 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    int i19 = listaSobreArreglos18.longitud();
    boolean b20 = listaSobreArreglos18.esVacia();
    boolean b22 = listaSobreArreglos18.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos23 = new listas.ListaSobreArreglos();
    java.lang.String str24 = listaSobreArreglos23.toString();
    boolean b25 = listaSobreArreglos23.esVacia();
    listaSobreArreglos23.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos18.insertar((java.lang.Object)listaSobreArreglos23);
    boolean b29 = listaSobreArreglos18.esVacia();
    int i30 = listaSobreArreglos18.longitud();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos18);
    boolean b32 = listaSobreArreglos7.esVacia();
    java.lang.Object obj33 = null;
    listaSobreArreglos7.insertar(obj33);
    boolean b35 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test098"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i12 = listaSobreArreglos5.longitud();
    listaSobreArreglos5.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test099"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos5.equals(obj12);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    listaSobreArreglos14.vaciar();
    int i16 = listaSobreArreglos14.longitud();
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos14);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos14.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test100"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    listaSobreArreglos0.eliminar((int)(byte)0);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    boolean b19 = listaSobreArreglos14.esVacia();
    boolean b20 = listaSobreArreglos14.esVacia();
    int i21 = listaSobreArreglos14.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj27 = null;
    boolean b28 = listaSobreArreglos22.equals(obj27);
    listaSobreArreglos22.insertar((java.lang.Object)0);
    listaSobreArreglos22.vaciar();
    boolean b32 = listaSobreArreglos14.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj34 = null;
    listaSobreArreglos22.insertar(0, obj34);
    boolean b36 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos22.eliminar((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test101"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos5.esVacia();
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos5.equals(obj13);
    java.lang.String str15 = listaSobreArreglos5.toString();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    listaSobreArreglos16.vaciar();
    boolean b19 = listaSobreArreglos5.equals((java.lang.Object)listaSobreArreglos16);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.vaciar();
    boolean b26 = listaSobreArreglos21.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos16.insertar((int)(short)100, (java.lang.Object)listaSobreArreglos21);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[-]"+ "'", str15.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test102"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test103"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(obj10);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj19 = null;
    boolean b20 = listaSobreArreglos14.equals(obj19);
    listaSobreArreglos14.vaciar();
    int i22 = listaSobreArreglos14.longitud();
    listaSobreArreglos14.insertar((java.lang.Object)'a');
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(5, (java.lang.Object)listaSobreArreglos14);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test104"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos0.equals(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test105"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    java.lang.String str17 = listaSobreArreglos6.toString();
    boolean b18 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    java.lang.String str21 = listaSobreArreglos20.toString();
    boolean b22 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos20.equals(obj25);
    listaSobreArreglos20.vaciar();
    int i28 = listaSobreArreglos20.longitud();
    listaSobreArreglos20.vaciar();
    int i30 = listaSobreArreglos20.longitud();
    boolean b31 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos20);
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    java.lang.String str34 = listaSobreArreglos33.toString();
    boolean b35 = listaSobreArreglos33.esVacia();
    listaSobreArreglos33.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj38 = null;
    boolean b39 = listaSobreArreglos33.equals(obj38);
    listaSobreArreglos33.vaciar();
    int i41 = listaSobreArreglos33.longitud();
    listaSobreArreglos33.vaciar();
    listaSobreArreglos33.vaciar();
    listaSobreArreglos33.vaciar();
    int i45 = listaSobreArreglos33.longitud();
    int i46 = listaSobreArreglos33.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos6.insertar((int)(short)-1, (java.lang.Object)i46);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test106"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj11 = null;
    listaSobreArreglos3.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)b14);
    java.lang.Object obj17 = listaSobreArreglos3.obtener(0);
    java.lang.Object obj19 = listaSobreArreglos3.obtener(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj21 = listaSobreArreglos3.obtener((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10.0f+ "'", obj17.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test107"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    int i7 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    java.lang.String str10 = listaSobreArreglos9.toString();
    boolean b11 = listaSobreArreglos9.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos9.insertar(0, obj13);
    java.lang.String str15 = listaSobreArreglos9.toString();
    int i16 = listaSobreArreglos9.longitud();
    boolean b17 = listaSobreArreglos9.esVacia();
    boolean b18 = listaSobreArreglos0.equals((java.lang.Object)b17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null,]"+ "'", str15.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test108"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str7 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test109"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar((int)(short)0, obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = listaSobreArreglos0.obtener((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test110"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar((int)(byte)1, obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    int i29 = listaSobreArreglos28.longitud();
    listaSobreArreglos28.vaciar();
    java.lang.String str31 = listaSobreArreglos28.toString();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    int i33 = listaSobreArreglos32.longitud();
    listaSobreArreglos32.vaciar();
    java.lang.String str35 = listaSobreArreglos32.toString();
    boolean b36 = listaSobreArreglos28.equals((java.lang.Object)listaSobreArreglos32);
    boolean b37 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos28);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    int i39 = listaSobreArreglos38.longitud();
    listaSobreArreglos38.vaciar();
    java.lang.String str41 = listaSobreArreglos38.toString();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    listaSobreArreglos42.vaciar();
    java.lang.String str45 = listaSobreArreglos42.toString();
    boolean b46 = listaSobreArreglos38.equals((java.lang.Object)listaSobreArreglos42);
    boolean b47 = listaSobreArreglos38.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos48 = new listas.ListaSobreArreglos();
    listaSobreArreglos48.vaciar();
    listaSobreArreglos38.insertar((java.lang.Object)listaSobreArreglos48);
    int i51 = listaSobreArreglos38.longitud();
    listaSobreArreglos38.vaciar();
    listaSobreArreglos28.insertar((java.lang.Object)listaSobreArreglos38);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos38.eliminar(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test111"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.vaciar();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos5.equals(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)b9);
    int i11 = listaSobreArreglos0.longitud();
    int i12 = listaSobreArreglos0.longitud();
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos0.equals(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test112"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    boolean b11 = listaSobreArreglos7.esVacia();
    int i12 = listaSobreArreglos7.longitud();
    java.lang.Object obj13 = null;
    listaSobreArreglos7.insertar(obj13);
    boolean b15 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj17 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos7.insertar((int)(short)-1, obj17);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test113"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test114"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    int i3 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)10.0f);
    int i13 = listaSobreArreglos8.longitud();
    listaSobreArreglos8.eliminar(0);
    listaSobreArreglos4.insertar((java.lang.Object)listaSobreArreglos8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos8);
    java.lang.Object obj18 = null;
    listaSobreArreglos8.insertar(obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test115"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    int i2 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test116"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj17 = null;
    listaSobreArreglos0.insertar(obj17);
    boolean b19 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null,]"+ "'", str15.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test117"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    java.lang.Object obj11 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(0, obj16);
    java.lang.String str18 = listaSobreArreglos12.toString();
    boolean b19 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.eliminar(0);
    java.lang.Object obj22 = null;
    listaSobreArreglos12.insertar(obj22);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos12);
    boolean b25 = listaSobreArreglos12.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null,]"+ "'", str18.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test118"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.vaciar();
    int i8 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    int i12 = listaSobreArreglos0.longitud();
    int i13 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test119"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    listaSobreArreglos0.eliminar(0);
    boolean b7 = listaSobreArreglos0.esVacia();
    boolean b8 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test120"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    boolean b5 = listaSobreArreglos4.esVacia();
    boolean b6 = listaSobreArreglos4.esVacia();
    boolean b7 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.vaciar();
    boolean b9 = listaSobreArreglos4.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    java.lang.Object obj16 = null;
    listaSobreArreglos11.insertar(obj16);
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    java.lang.String str19 = listaSobreArreglos18.toString();
    boolean b20 = listaSobreArreglos18.esVacia();
    int i21 = listaSobreArreglos18.longitud();
    java.lang.String str22 = listaSobreArreglos18.toString();
    int i23 = listaSobreArreglos18.longitud();
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos18);
    boolean b25 = listaSobreArreglos4.equals((java.lang.Object)listaSobreArreglos11);
    java.lang.String str26 = listaSobreArreglos11.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[null, ]"+ "'", str26.equals("[null, ]"));

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test121"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10.0f+ "'", obj14.equals(10.0f));

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test122"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.String str8 = listaSobreArreglos0.toString();
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = listaSobreArreglos0.obtener((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[-]"+ "'", str8.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test123"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    java.lang.String str11 = listaSobreArreglos10.toString();
    java.lang.String str12 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)10.0f);
    java.lang.Object obj18 = null;
    listaSobreArreglos13.insertar(obj18);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos13);
    listaSobreArreglos13.vaciar();
    boolean b22 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos13);
    java.lang.Object obj24 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(5, obj24);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test124"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.String str11 = listaSobreArreglos0.toString();
    java.lang.Object obj13 = listaSobreArreglos0.obtener(0);
    int i14 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[[10.0null,]"+ "'", str11.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test125"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    java.lang.Object obj11 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(0, obj16);
    java.lang.String str18 = listaSobreArreglos12.toString();
    boolean b19 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.eliminar(0);
    java.lang.Object obj22 = null;
    listaSobreArreglos12.insertar(obj22);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos12);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[null,]"+ "'", str18.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test126"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos0.eliminar(0);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test127"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos3.equals(obj15);
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos3.equals(obj17);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.Object obj20 = null;
    listaSobreArreglos19.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    java.lang.String str24 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    boolean b27 = listaSobreArreglos25.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)10.0f);
    java.lang.Object obj30 = null;
    listaSobreArreglos25.insertar(obj30);
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos25);
    boolean b33 = listaSobreArreglos19.equals((java.lang.Object)listaSobreArreglos25);
    boolean b34 = listaSobreArreglos25.esVacia();
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos25.equals(obj35);
    listaSobreArreglos25.eliminar(0);
    boolean b39 = listaSobreArreglos3.equals((java.lang.Object)listaSobreArreglos25);
    int i40 = listaSobreArreglos25.longitud();
    listaSobreArreglos25.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    boolean b44 = listaSobreArreglos43.esVacia();
    boolean b45 = listaSobreArreglos43.esVacia();
    boolean b46 = listaSobreArreglos43.esVacia();
    java.lang.String str47 = listaSobreArreglos43.toString();
    listaSobreArreglos43.vaciar();
    java.lang.Object obj49 = null;
    listaSobreArreglos43.insertar(obj49);
    listaSobreArreglos43.vaciar();
    java.lang.String str52 = listaSobreArreglos43.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos25.insertar(5, (java.lang.Object)str52);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "]"+ "'", str52.equals("]"));

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test128"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)10.0f);
    int i21 = listaSobreArreglos16.longitud();
    listaSobreArreglos16.insertar((java.lang.Object)(byte)100);
    java.lang.String str24 = listaSobreArreglos16.toString();
    java.lang.String str25 = listaSobreArreglos16.toString();
    listaSobreArreglos16.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)10, (java.lang.Object)listaSobreArreglos16);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[10.010]"+ "'", str24.equals("[10.010]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[10.010]"+ "'", str25.equals("[10.010]"));

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test129"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    int i11 = listaSobreArreglos4.longitud();
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos4.equals(obj12);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos4.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test130"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj7 = null;
    listaSobreArreglos0.insertar(obj7);
    java.lang.Object obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)' ', obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test131"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    int i9 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    boolean b16 = listaSobreArreglos11.esVacia();
    boolean b17 = listaSobreArreglos11.esVacia();
    java.lang.Object obj18 = null;
    listaSobreArreglos11.insertar(obj18);
    java.lang.String str20 = listaSobreArreglos11.toString();
    int i21 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj24 = listaSobreArreglos0.obtener((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[-1null,]"+ "'", str20.equals("[-1null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test132"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    int i4 = listaSobreArreglos0.longitud();
    int i5 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test133"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test134"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)10.0f);
    java.lang.Object obj13 = null;
    listaSobreArreglos8.insertar(obj13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)(short)-1);
    boolean b20 = listaSobreArreglos8.equals((java.lang.Object)(short)-1);
    listaSobreArreglos8.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)(short)-1);
    boolean b29 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.eliminar(0);
    java.lang.String str32 = listaSobreArreglos24.toString();
    boolean b33 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos35 = new listas.ListaSobreArreglos();
    int i36 = listaSobreArreglos35.longitud();
    boolean b37 = listaSobreArreglos35.esVacia();
    listaSobreArreglos35.insertar((java.lang.Object)10.0f);
    int i40 = listaSobreArreglos35.longitud();
    boolean b41 = listaSobreArreglos35.esVacia();
    listaSobreArreglos35.vaciar();
    boolean b43 = listaSobreArreglos24.equals((java.lang.Object)listaSobreArreglos35);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos35);
    java.lang.Object obj45 = null;
    boolean b46 = listaSobreArreglos35.equals(obj45);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj48 = listaSobreArreglos35.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test135"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test136"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    boolean b5 = listaSobreArreglos0.esVacia();
    java.lang.String str6 = listaSobreArreglos0.toString();
    int i7 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test137"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    boolean b5 = listaSobreArreglos4.esVacia();
    boolean b6 = listaSobreArreglos4.esVacia();
    boolean b7 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.vaciar();
    boolean b9 = listaSobreArreglos4.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos4.insertar((int)(short)100, obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test138"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    int i4 = listaSobreArreglos0.longitud();
    java.lang.String str5 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test139"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    int i11 = listaSobreArreglos8.longitud();
    java.lang.String str12 = listaSobreArreglos8.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    boolean b15 = listaSobreArreglos13.esVacia();
    boolean b16 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.vaciar();
    listaSobreArreglos13.vaciar();
    boolean b19 = listaSobreArreglos8.equals((java.lang.Object)listaSobreArreglos13);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    java.lang.Object obj23 = null;
    listaSobreArreglos20.insertar(0, obj23);
    java.lang.String str25 = listaSobreArreglos20.toString();
    listaSobreArreglos13.insertar((java.lang.Object)listaSobreArreglos20);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'#', (java.lang.Object)listaSobreArreglos13);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[null,]"+ "'", str25.equals("[null,]"));

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test140"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    java.lang.String str5 = listaSobreArreglos4.toString();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    boolean b11 = listaSobreArreglos4.esVacia();
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos4.equals(obj12);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)b13);
    boolean b15 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test141"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    listaSobreArreglos11.vaciar();
    java.lang.String str14 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    listaSobreArreglos15.vaciar();
    java.lang.String str18 = listaSobreArreglos15.toString();
    boolean b19 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos15);
    boolean b20 = listaSobreArreglos11.esVacia();
    java.lang.String str21 = listaSobreArreglos11.toString();
    boolean b22 = listaSobreArreglos11.esVacia();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos11);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    java.lang.String str28 = listaSobreArreglos24.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    boolean b34 = listaSobreArreglos29.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos29);
    java.lang.Object obj36 = null;
    boolean b37 = listaSobreArreglos29.equals(obj36);
    boolean b38 = listaSobreArreglos29.esVacia();
    java.lang.Object obj39 = null;
    listaSobreArreglos29.insertar(obj39);
    boolean b41 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos29);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test142"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj17 = null;
    listaSobreArreglos0.insertar(obj17);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    java.lang.String str21 = listaSobreArreglos19.toString();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)10.0f);
    java.lang.Object obj27 = null;
    listaSobreArreglos22.insertar(obj27);
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos22);
    java.lang.String str30 = listaSobreArreglos19.toString();
    java.lang.Object obj32 = listaSobreArreglos19.obtener(0);
    boolean b33 = listaSobreArreglos0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null,]"+ "'", str15.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[[10.0null,]"+ "'", str30.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test143"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    boolean b13 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = listaSobreArreglos0.obtener(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test144"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos3.equals(obj15);
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos3.equals(obj17);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.Object obj20 = null;
    listaSobreArreglos19.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    java.lang.String str24 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    boolean b27 = listaSobreArreglos25.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)10.0f);
    java.lang.Object obj30 = null;
    listaSobreArreglos25.insertar(obj30);
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos25);
    boolean b33 = listaSobreArreglos19.equals((java.lang.Object)listaSobreArreglos25);
    boolean b34 = listaSobreArreglos25.esVacia();
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos25.equals(obj35);
    listaSobreArreglos25.eliminar(0);
    boolean b39 = listaSobreArreglos3.equals((java.lang.Object)listaSobreArreglos25);
    listaSobreArreglos25.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj42 = listaSobreArreglos25.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test145"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos5.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = listaSobreArreglos5.obtener(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test146"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos0.equals(obj16);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test147"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i12 = listaSobreArreglos5.longitud();
    java.lang.Object obj14 = listaSobreArreglos5.obtener(0);
    java.lang.Object obj16 = listaSobreArreglos5.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)-1+ "'", obj14.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (short)-1+ "'", obj16.equals((short)-1));

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test148"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(obj14);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    java.lang.Object obj21 = null;
    listaSobreArreglos17.insertar(obj21);
    listaSobreArreglos17.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos24.equals(obj29);
    listaSobreArreglos24.vaciar();
    int i32 = listaSobreArreglos24.longitud();
    boolean b33 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos24);
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    boolean b35 = listaSobreArreglos34.esVacia();
    boolean b36 = listaSobreArreglos34.esVacia();
    boolean b37 = listaSobreArreglos34.esVacia();
    listaSobreArreglos34.vaciar();
    listaSobreArreglos34.vaciar();
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos34);
    java.lang.Object obj41 = null;
    listaSobreArreglos34.insertar(obj41);
    listaSobreArreglos34.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(10, (java.lang.Object)listaSobreArreglos34);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test149"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.Object obj15 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.insertar((java.lang.Object)100.0d);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj15);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test150"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos2 = new listas.ListaSobreArreglos();
    int i3 = listaSobreArreglos2.longitud();
    boolean b4 = listaSobreArreglos2.esVacia();
    boolean b6 = listaSobreArreglos2.equals((java.lang.Object)1);
    java.lang.Object obj7 = null;
    listaSobreArreglos2.insertar(obj7);
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    java.lang.String str10 = listaSobreArreglos9.toString();
    boolean b11 = listaSobreArreglos9.esVacia();
    int i12 = listaSobreArreglos9.longitud();
    java.lang.String str13 = listaSobreArreglos9.toString();
    int i14 = listaSobreArreglos9.longitud();
    listaSobreArreglos2.insertar((java.lang.Object)listaSobreArreglos9);
    java.lang.Object obj16 = null;
    listaSobreArreglos9.insertar(obj16);
    listaSobreArreglos9.eliminar(0);
    java.lang.Object obj20 = null;
    boolean b21 = listaSobreArreglos9.equals(obj20);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj24 = listaSobreArreglos9.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test151"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listaSobreArreglos0.vaciar();
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test152"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    listaSobreArreglos9.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    java.lang.String str14 = listaSobreArreglos12.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)10.0f);
    java.lang.Object obj20 = null;
    listaSobreArreglos15.insertar(obj20);
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos15);
    listaSobreArreglos9.insertar((java.lang.Object)listaSobreArreglos12);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    boolean b26 = listaSobreArreglos24.esVacia();
    boolean b28 = listaSobreArreglos24.equals((java.lang.Object)1);
    listaSobreArreglos24.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj33 = listaSobreArreglos24.obtener(0);
    boolean b34 = listaSobreArreglos24.esVacia();
    java.lang.String str35 = listaSobreArreglos24.toString();
    boolean b36 = listaSobreArreglos24.esVacia();
    listaSobreArreglos9.insertar((java.lang.Object)listaSobreArreglos24);
    java.lang.String str38 = listaSobreArreglos9.toString();
    listaSobreArreglos0.insertar((int)(byte)0, (java.lang.Object)listaSobreArreglos9);
    listaSobreArreglos9.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    listaSobreArreglos42.vaciar();
    java.lang.String str45 = listaSobreArreglos42.toString();
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    int i47 = listaSobreArreglos46.longitud();
    listaSobreArreglos46.vaciar();
    java.lang.String str49 = listaSobreArreglos46.toString();
    boolean b50 = listaSobreArreglos42.equals((java.lang.Object)listaSobreArreglos46);
    boolean b51 = listaSobreArreglos42.esVacia();
    java.lang.String str52 = listaSobreArreglos42.toString();
    listas.ListaSobreArreglos listaSobreArreglos53 = new listas.ListaSobreArreglos();
    int i54 = listaSobreArreglos53.longitud();
    boolean b55 = listaSobreArreglos53.esVacia();
    boolean b57 = listaSobreArreglos53.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos58 = new listas.ListaSobreArreglos();
    java.lang.String str59 = listaSobreArreglos58.toString();
    boolean b60 = listaSobreArreglos58.esVacia();
    listaSobreArreglos58.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos53.insertar((java.lang.Object)listaSobreArreglos58);
    boolean b64 = listaSobreArreglos53.esVacia();
    int i65 = listaSobreArreglos53.longitud();
    listaSobreArreglos42.insertar((java.lang.Object)listaSobreArreglos53);
    int i67 = listaSobreArreglos53.longitud();
    java.lang.Object obj69 = listaSobreArreglos53.obtener(0);
    java.lang.Object obj71 = null;
    listaSobreArreglos53.insertar(0, obj71);
    listaSobreArreglos9.insertar((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null,]"+ "'", str7.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj33 + "' != '" + 10.0d+ "'", obj33.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[10.]"+ "'", str35.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[-1.0[[10.0null,][10.]"+ "'", str38.equals("[-1.0[[10.0null,][10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "]"+ "'", str49.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "]"+ "'", str52.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "]"+ "'", str59.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj69);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test153"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj17 = null;
    listaSobreArreglos7.insertar(obj17);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    boolean b21 = listaSobreArreglos20.esVacia();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b23 = listaSobreArreglos20.esVacia();
    java.lang.Object obj24 = null;
    listaSobreArreglos20.insertar(obj24);
    listaSobreArreglos20.vaciar();
    int i27 = listaSobreArreglos20.longitud();
    listaSobreArreglos7.insertar((int)(short)0, (java.lang.Object)i27);
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    int i32 = listaSobreArreglos29.longitud();
    java.lang.String str33 = listaSobreArreglos29.toString();
    listaSobreArreglos29.insertar((java.lang.Object)0.0f);
    boolean b36 = listaSobreArreglos29.esVacia();
    java.lang.Object obj37 = null;
    boolean b38 = listaSobreArreglos29.equals(obj37);
    boolean b39 = listaSobreArreglos29.esVacia();
    java.lang.String str40 = listaSobreArreglos29.toString();
    boolean b41 = listaSobreArreglos7.equals((java.lang.Object)listaSobreArreglos29);
    java.lang.String str42 = listaSobreArreglos29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[0.]"+ "'", str40.equals("[0.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[0.]"+ "'", str42.equals("[0.]"));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test154"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = listaSobreArreglos0.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test155"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    java.lang.Object obj12 = null;
    listaSobreArreglos7.insertar(obj12);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    int i17 = listaSobreArreglos14.longitud();
    java.lang.String str18 = listaSobreArreglos14.toString();
    int i19 = listaSobreArreglos14.longitud();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos14);
    listaSobreArreglos7.eliminar(1);
    int i23 = listaSobreArreglos7.longitud();
    boolean b24 = listaSobreArreglos0.equals((java.lang.Object)i23);
    boolean b25 = listaSobreArreglos0.esVacia();
    boolean b26 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test156"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    int i13 = listaSobreArreglos0.longitud();
    boolean b14 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test157"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.String str18 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj20 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test158"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)i10);
    java.lang.String str12 = listaSobreArreglos0.toString();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test159"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    listaSobreArreglos7.vaciar();
    java.lang.String str10 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    listaSobreArreglos11.vaciar();
    java.lang.String str14 = listaSobreArreglos11.toString();
    boolean b15 = listaSobreArreglos7.equals((java.lang.Object)listaSobreArreglos11);
    boolean b16 = listaSobreArreglos7.esVacia();
    java.lang.String str17 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    int i19 = listaSobreArreglos18.longitud();
    boolean b20 = listaSobreArreglos18.esVacia();
    boolean b22 = listaSobreArreglos18.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos23 = new listas.ListaSobreArreglos();
    java.lang.String str24 = listaSobreArreglos23.toString();
    boolean b25 = listaSobreArreglos23.esVacia();
    listaSobreArreglos23.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos18.insertar((java.lang.Object)listaSobreArreglos23);
    boolean b29 = listaSobreArreglos18.esVacia();
    int i30 = listaSobreArreglos18.longitud();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos18);
    boolean b32 = listaSobreArreglos7.esVacia();
    java.lang.Object obj33 = null;
    listaSobreArreglos7.insertar(obj33);
    boolean b35 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj36 = null;
    listaSobreArreglos7.insertar(obj36);
    java.lang.String str38 = listaSobreArreglos7.toString();
    listaSobreArreglos7.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[[[-]null, null,]"+ "'", str38.equals("[[[-]null, null,]"));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test160"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    java.lang.String str27 = listaSobreArreglos19.toString();
    boolean b28 = listaSobreArreglos19.esVacia();
    boolean b29 = listaSobreArreglos19.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos30);
    listaSobreArreglos30.vaciar();
    boolean b36 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos30);
    boolean b37 = listaSobreArreglos6.esVacia();
    boolean b38 = listaSobreArreglos6.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj40 = listaSobreArreglos6.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test161"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b13);
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos0.equals(obj15);
    java.lang.String str17 = listaSobreArreglos0.toString();
    boolean b18 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null, -1tru]"+ "'", str17.equals("[null, -1tru]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test162"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listaSobreArreglos0.vaciar();
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.String str11 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(obj16);
    listaSobreArreglos12.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listaSobreArreglos12.insertar(0, obj25);
    java.lang.String str28 = listaSobreArreglos12.toString();
    boolean b29 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos12);
    int i30 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    boolean b33 = listaSobreArreglos31.esVacia();
    boolean b35 = listaSobreArreglos31.equals((java.lang.Object)1);
    listaSobreArreglos31.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj40 = listaSobreArreglos31.obtener(0);
    boolean b41 = listaSobreArreglos31.esVacia();
    java.lang.Object obj42 = null;
    listaSobreArreglos31.insertar(obj42);
    listaSobreArreglos31.eliminar(0);
    listaSobreArreglos31.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos31);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos31.eliminar((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null,]"+ "'", str28.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 10.0d+ "'", obj40.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test163"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    boolean b6 = listaSobreArreglos0.esVacia();
    int i7 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos8.equals(obj13);
    listaSobreArreglos8.insertar((java.lang.Object)0);
    listaSobreArreglos8.vaciar();
    boolean b18 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos8);
    int i19 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj21 = listaSobreArreglos0.obtener((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test164"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    boolean b13 = listaSobreArreglos0.esVacia();
    int i14 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test165"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    int i6 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test166"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    int i13 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    int i18 = listaSobreArreglos17.longitud();
    java.lang.Object obj20 = null;
    listaSobreArreglos17.insertar(0, obj20);
    java.lang.String str22 = listaSobreArreglos17.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)str22);
    boolean b24 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[null,]"+ "'", str22.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test167"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str8 = listaSobreArreglos0.toString();
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)10.0f);
    int i16 = listaSobreArreglos11.longitud();
    boolean b17 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.vaciar();
    boolean b19 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos11);
    boolean b20 = listaSobreArreglos0.esVacia();
    java.lang.Object obj21 = null;
    boolean b22 = listaSobreArreglos0.equals(obj21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test168"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)(short)-1);
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos12);
    boolean b19 = listaSobreArreglos7.esVacia();
    java.lang.Object obj20 = null;
    listaSobreArreglos7.insertar(obj20);
    listaSobreArreglos7.vaciar();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos0.vaciar();
    boolean b25 = listaSobreArreglos0.esVacia();
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar(obj26);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = listaSobreArreglos0.obtener((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test169"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj12 = null;
    listaSobreArreglos0.insertar(0, obj12);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    int i20 = listaSobreArreglos17.longitud();
    java.lang.String str21 = listaSobreArreglos17.toString();
    int i22 = listaSobreArreglos17.longitud();
    int i23 = listaSobreArreglos17.longitud();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    java.lang.String str28 = listaSobreArreglos24.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    boolean b34 = listaSobreArreglos29.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos29);
    boolean b36 = listaSobreArreglos24.esVacia();
    java.lang.Object obj37 = null;
    listaSobreArreglos24.insertar(obj37);
    listaSobreArreglos24.vaciar();
    boolean b40 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    java.lang.String str43 = listaSobreArreglos17.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos17.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[-]"+ "'", str10.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test170"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    int i7 = listaSobreArreglos0.longitud();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(obj10);
    java.lang.Object obj13 = listaSobreArreglos0.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj13);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test171"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos0.esVacia();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(0, obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos21.equals(obj26);
    boolean b28 = listaSobreArreglos21.esVacia();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos21.equals(obj29);
    boolean b31 = listaSobreArreglos21.esVacia();
    boolean b32 = listaSobreArreglos0.equals((java.lang.Object)b31);
    int i33 = listaSobreArreglos0.longitud();
    int i34 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.Object obj37 = null;
    listaSobreArreglos36.insertar(obj37);
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    java.lang.String str40 = listaSobreArreglos39.toString();
    java.lang.String str41 = listaSobreArreglos39.toString();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    boolean b44 = listaSobreArreglos42.esVacia();
    listaSobreArreglos42.insertar((java.lang.Object)10.0f);
    java.lang.Object obj47 = null;
    listaSobreArreglos42.insertar(obj47);
    listaSobreArreglos39.insertar((java.lang.Object)listaSobreArreglos42);
    boolean b50 = listaSobreArreglos36.equals((java.lang.Object)listaSobreArreglos42);
    boolean b51 = listaSobreArreglos42.esVacia();
    java.lang.Object obj52 = null;
    boolean b53 = listaSobreArreglos42.equals(obj52);
    int i54 = listaSobreArreglos42.longitud();
    listas.ListaSobreArreglos listaSobreArreglos55 = new listas.ListaSobreArreglos();
    java.lang.String str56 = listaSobreArreglos55.toString();
    boolean b57 = listaSobreArreglos55.esVacia();
    listaSobreArreglos55.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj60 = null;
    boolean b61 = listaSobreArreglos55.equals(obj60);
    boolean b62 = listaSobreArreglos55.esVacia();
    listaSobreArreglos55.eliminar(0);
    int i65 = listaSobreArreglos55.longitud();
    boolean b66 = listaSobreArreglos42.equals((java.lang.Object)listaSobreArreglos55);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, (java.lang.Object)listaSobreArreglos42);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "]"+ "'", str40.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "]"+ "'", str56.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test172"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    java.lang.String str7 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null,]"+ "'", str7.equals("[null,]"));

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test173"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test174"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    int i16 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test175"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    java.lang.String str27 = listaSobreArreglos19.toString();
    boolean b28 = listaSobreArreglos19.esVacia();
    boolean b29 = listaSobreArreglos19.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos30);
    listaSobreArreglos30.vaciar();
    boolean b36 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos30);
    int i37 = listaSobreArreglos6.longitud();
    java.lang.Object obj39 = null;
    listaSobreArreglos6.insertar(0, obj39);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos6.eliminar(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test176"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    int i10 = listaSobreArreglos0.longitud();
    java.lang.String str11 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test177"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    int i5 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test178"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar((int)(byte)1, obj26);
    java.lang.Object obj29 = null;
    listaSobreArreglos0.insertar(0, obj29);
    int i31 = listaSobreArreglos0.longitud();
    java.lang.String str32 = listaSobreArreglos0.toString();
    java.lang.String str33 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[null, [[-]null,]"+ "'", str32.equals("[null, [[-]null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[null, [[-]null,]"+ "'", str33.equals("[null, [[-]null,]"));

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test179"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    listaSobreArreglos7.eliminar(0);
    java.lang.Object obj19 = null;
    listaSobreArreglos7.insertar(0, obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b25 = listaSobreArreglos21.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos26);
    boolean b32 = listaSobreArreglos21.esVacia();
    boolean b33 = listaSobreArreglos21.esVacia();
    java.lang.Object obj35 = listaSobreArreglos21.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    java.lang.Object obj39 = null;
    listaSobreArreglos36.insertar(0, obj39);
    boolean b41 = listaSobreArreglos21.equals((java.lang.Object)listaSobreArreglos36);
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    boolean b44 = listaSobreArreglos43.esVacia();
    boolean b45 = listaSobreArreglos43.esVacia();
    boolean b46 = listaSobreArreglos43.esVacia();
    java.lang.String str47 = listaSobreArreglos43.toString();
    listas.ListaSobreArreglos listaSobreArreglos48 = new listas.ListaSobreArreglos();
    int i49 = listaSobreArreglos48.longitud();
    listaSobreArreglos48.vaciar();
    java.lang.String str51 = listaSobreArreglos48.toString();
    listas.ListaSobreArreglos listaSobreArreglos52 = new listas.ListaSobreArreglos();
    int i53 = listaSobreArreglos52.longitud();
    listaSobreArreglos52.vaciar();
    java.lang.String str55 = listaSobreArreglos52.toString();
    boolean b56 = listaSobreArreglos48.equals((java.lang.Object)listaSobreArreglos52);
    boolean b57 = listaSobreArreglos48.esVacia();
    listaSobreArreglos48.vaciar();
    listaSobreArreglos43.insertar((java.lang.Object)listaSobreArreglos48);
    listaSobreArreglos36.insertar(0, (java.lang.Object)listaSobreArreglos48);
    boolean b61 = listaSobreArreglos7.equals((java.lang.Object)listaSobreArreglos36);
    java.lang.Object obj63 = listaSobreArreglos36.obtener(0);
    java.lang.Object obj64 = null;
    boolean b65 = listaSobreArreglos36.equals(obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "]"+ "'", str51.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "]"+ "'", str55.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test180"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test181"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj17 = null;
    listaSobreArreglos7.insertar(obj17);
    java.lang.Object obj19 = null;
    boolean b20 = listaSobreArreglos7.equals(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    listaSobreArreglos21.vaciar();
    java.lang.String str24 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    listaSobreArreglos25.vaciar();
    java.lang.String str28 = listaSobreArreglos25.toString();
    boolean b29 = listaSobreArreglos21.equals((java.lang.Object)listaSobreArreglos25);
    boolean b30 = listaSobreArreglos21.esVacia();
    java.lang.String str31 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    int i33 = listaSobreArreglos32.longitud();
    boolean b34 = listaSobreArreglos32.esVacia();
    boolean b36 = listaSobreArreglos32.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos37 = new listas.ListaSobreArreglos();
    java.lang.String str38 = listaSobreArreglos37.toString();
    boolean b39 = listaSobreArreglos37.esVacia();
    listaSobreArreglos37.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos32.insertar((java.lang.Object)listaSobreArreglos37);
    boolean b43 = listaSobreArreglos32.esVacia();
    int i44 = listaSobreArreglos32.longitud();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos32);
    listas.ListaSobreArreglos listaSobreArreglos47 = new listas.ListaSobreArreglos();
    java.lang.String str48 = listaSobreArreglos47.toString();
    boolean b49 = listaSobreArreglos47.esVacia();
    java.lang.Object obj51 = null;
    listaSobreArreglos47.insertar(0, obj51);
    java.lang.Object obj54 = listaSobreArreglos47.obtener((int)(short)0);
    listaSobreArreglos47.vaciar();
    listaSobreArreglos32.insertar(0, (java.lang.Object)listaSobreArreglos47);
    listas.ListaSobreArreglos listaSobreArreglos57 = new listas.ListaSobreArreglos();
    int i58 = listaSobreArreglos57.longitud();
    boolean b59 = listaSobreArreglos57.esVacia();
    boolean b61 = listaSobreArreglos57.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos62 = new listas.ListaSobreArreglos();
    java.lang.String str63 = listaSobreArreglos62.toString();
    boolean b64 = listaSobreArreglos62.esVacia();
    listaSobreArreglos62.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos57.insertar((java.lang.Object)listaSobreArreglos62);
    java.lang.Object obj68 = null;
    listaSobreArreglos57.insertar(obj68);
    listas.ListaSobreArreglos listaSobreArreglos70 = new listas.ListaSobreArreglos();
    java.lang.String str71 = listaSobreArreglos70.toString();
    boolean b72 = listaSobreArreglos70.esVacia();
    listaSobreArreglos70.insertar((java.lang.Object)(short)-1);
    boolean b75 = listaSobreArreglos70.esVacia();
    listaSobreArreglos70.eliminar(0);
    listaSobreArreglos57.insertar((java.lang.Object)listaSobreArreglos70);
    boolean b79 = listaSobreArreglos57.esVacia();
    listaSobreArreglos47.insertar((java.lang.Object)b79);
    java.lang.Object obj82 = null;
    listaSobreArreglos47.insertar(0, obj82);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos47);
    int i85 = listaSobreArreglos47.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "]"+ "'", str38.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "]"+ "'", str48.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "]"+ "'", str63.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "]"+ "'", str71.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i85 == 2);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test182"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(100, obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test183"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos11.eliminar(0);
    java.lang.Object obj28 = null;
    listaSobreArreglos11.insertar(0, obj28);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj31 = listaSobreArreglos11.obtener((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test184"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    boolean b5 = listaSobreArreglos0.esVacia();
    java.lang.Object obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(5, obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test185"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)(short)-1);
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos12);
    boolean b19 = listaSobreArreglos7.esVacia();
    java.lang.Object obj20 = null;
    listaSobreArreglos7.insertar(obj20);
    listaSobreArreglos7.vaciar();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj25 = null;
    listaSobreArreglos7.insertar(0, obj25);
    java.lang.String str27 = listaSobreArreglos7.toString();
    java.lang.Object obj29 = listaSobreArreglos7.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    java.lang.String str31 = listaSobreArreglos30.toString();
    boolean b32 = listaSobreArreglos30.esVacia();
    listaSobreArreglos30.insertar((java.lang.Object)(short)-1);
    boolean b35 = listaSobreArreglos30.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    listaSobreArreglos36.vaciar();
    java.lang.String str39 = listaSobreArreglos36.toString();
    listas.ListaSobreArreglos listaSobreArreglos40 = new listas.ListaSobreArreglos();
    int i41 = listaSobreArreglos40.longitud();
    listaSobreArreglos40.vaciar();
    java.lang.String str43 = listaSobreArreglos40.toString();
    boolean b44 = listaSobreArreglos36.equals((java.lang.Object)listaSobreArreglos40);
    boolean b45 = listaSobreArreglos36.esVacia();
    boolean b46 = listaSobreArreglos30.equals((java.lang.Object)listaSobreArreglos36);
    boolean b47 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos49 = new listas.ListaSobreArreglos();
    java.lang.String str50 = listaSobreArreglos49.toString();
    boolean b51 = listaSobreArreglos49.esVacia();
    listaSobreArreglos49.insertar((java.lang.Object)(short)-1);
    boolean b54 = listaSobreArreglos49.esVacia();
    listaSobreArreglos49.eliminar(0);
    java.lang.String str57 = listaSobreArreglos49.toString();
    boolean b58 = listaSobreArreglos49.esVacia();
    boolean b59 = listaSobreArreglos49.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos60 = new listas.ListaSobreArreglos();
    int i61 = listaSobreArreglos60.longitud();
    boolean b62 = listaSobreArreglos60.esVacia();
    int i63 = listaSobreArreglos60.longitud();
    listaSobreArreglos49.insertar((java.lang.Object)listaSobreArreglos60);
    listaSobreArreglos60.vaciar();
    boolean b66 = listaSobreArreglos36.equals((java.lang.Object)listaSobreArreglos60);
    java.lang.Object obj67 = null;
    listaSobreArreglos36.insertar(obj67);
    listaSobreArreglos7.insertar(obj67);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos7.eliminar((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null,]"+ "'", str27.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "]"+ "'", str39.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "]"+ "'", str50.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "]"+ "'", str57.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test186"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)i10);
    java.lang.String str12 = listaSobreArreglos0.toString();
    java.lang.String str13 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    boolean b19 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)10.0f);
    java.lang.Object obj27 = null;
    listaSobreArreglos22.insertar(obj27);
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    boolean b34 = listaSobreArreglos22.equals((java.lang.Object)(short)-1);
    listaSobreArreglos22.eliminar(0);
    listaSobreArreglos14.insertar((java.lang.Object)0);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    java.lang.String str39 = listaSobreArreglos38.toString();
    boolean b40 = listaSobreArreglos38.esVacia();
    int i41 = listaSobreArreglos38.longitud();
    java.lang.String str42 = listaSobreArreglos38.toString();
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    java.lang.String str44 = listaSobreArreglos43.toString();
    boolean b45 = listaSobreArreglos43.esVacia();
    listaSobreArreglos43.insertar((java.lang.Object)(short)-1);
    boolean b48 = listaSobreArreglos43.esVacia();
    listaSobreArreglos38.insertar((java.lang.Object)listaSobreArreglos43);
    java.lang.Object obj50 = null;
    boolean b51 = listaSobreArreglos43.equals(obj50);
    boolean b52 = listaSobreArreglos43.esVacia();
    boolean b53 = listaSobreArreglos43.esVacia();
    listaSobreArreglos43.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos56 = new listas.ListaSobreArreglos();
    int i57 = listaSobreArreglos56.longitud();
    boolean b58 = listaSobreArreglos56.esVacia();
    boolean b60 = listaSobreArreglos56.equals((java.lang.Object)1);
    listaSobreArreglos56.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos56.vaciar();
    listaSobreArreglos56.vaciar();
    listaSobreArreglos43.insertar(0, (java.lang.Object)listaSobreArreglos56);
    listaSobreArreglos14.insertar((java.lang.Object)0);
    boolean b68 = listaSobreArreglos0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[]"+ "'", str12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[]"+ "'", str13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "]"+ "'", str39.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "]"+ "'", str42.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "]"+ "'", str44.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test187"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    boolean b13 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    java.lang.String str19 = listaSobreArreglos17.toString();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)10.0f);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj28 = null;
    listaSobreArreglos20.insertar(obj28);
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    boolean b31 = listaSobreArreglos30.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)b31);
    java.lang.Object obj34 = listaSobreArreglos20.obtener(0);
    java.lang.Object obj36 = listaSobreArreglos20.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    int i39 = listaSobreArreglos38.longitud();
    listas.ListaSobreArreglos listaSobreArreglos40 = new listas.ListaSobreArreglos();
    int i41 = listaSobreArreglos40.longitud();
    boolean b42 = listaSobreArreglos40.esVacia();
    int i43 = listaSobreArreglos40.longitud();
    listaSobreArreglos38.insertar((java.lang.Object)i43);
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    java.lang.Object obj46 = null;
    listaSobreArreglos45.insertar(obj46);
    listaSobreArreglos38.insertar(obj46);
    listaSobreArreglos20.insertar(0, obj46);
    int i50 = listaSobreArreglos20.longitud();
    listaSobreArreglos20.vaciar();
    boolean b52 = listaSobreArreglos20.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)1, (java.lang.Object)b52);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 10.0f+ "'", obj34.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 10.0f+ "'", obj36.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test188"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(0, obj13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    java.lang.String str17 = listaSobreArreglos15.toString();
    java.lang.Object obj18 = null;
    listaSobreArreglos15.insertar(obj18);
    boolean b20 = listaSobreArreglos15.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    listaSobreArreglos21.vaciar();
    java.lang.String str24 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    listaSobreArreglos25.vaciar();
    java.lang.String str28 = listaSobreArreglos25.toString();
    boolean b29 = listaSobreArreglos21.equals((java.lang.Object)listaSobreArreglos25);
    boolean b30 = listaSobreArreglos21.esVacia();
    java.lang.String str31 = listaSobreArreglos21.toString();
    boolean b32 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.vaciar();
    boolean b34 = listaSobreArreglos15.equals((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos0.insertar((java.lang.Object)b34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test189"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.String str18 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test190"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    java.lang.Object obj17 = null;
    listaSobreArreglos7.insertar(0, obj17);
    listaSobreArreglos7.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos7.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test191"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test192"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    listaSobreArreglos7.eliminar(0);
    java.lang.Object obj19 = null;
    listaSobreArreglos7.insertar(0, obj19);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj22 = listaSobreArreglos7.obtener(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test193"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b13);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test194"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    listaSobreArreglos0.insertar((java.lang.Object)str7);
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    java.lang.Object obj13 = listaSobreArreglos0.obtener((int)(short)0);
    java.lang.Object obj15 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj15);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test195"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    boolean b7 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test196"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    boolean b12 = listaSobreArreglos8.equals((java.lang.Object)1);
    java.lang.Object obj13 = null;
    listaSobreArreglos8.insertar(obj13);
    listaSobreArreglos0.insertar(0, obj13);
    int i16 = listaSobreArreglos0.longitud();
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos0.equals(obj17);
    boolean b19 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj21 = listaSobreArreglos0.obtener((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test197"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    listaSobreArreglos8.vaciar();
    java.lang.String str11 = listaSobreArreglos8.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    listaSobreArreglos12.vaciar();
    java.lang.String str15 = listaSobreArreglos12.toString();
    boolean b16 = listaSobreArreglos8.equals((java.lang.Object)listaSobreArreglos12);
    boolean b17 = listaSobreArreglos8.esVacia();
    java.lang.String str18 = listaSobreArreglos8.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    boolean b21 = listaSobreArreglos19.esVacia();
    boolean b23 = listaSobreArreglos19.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos24);
    boolean b30 = listaSobreArreglos19.esVacia();
    int i31 = listaSobreArreglos19.longitud();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos19);
    int i33 = listaSobreArreglos19.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)i33);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj37 = listaSobreArreglos0.obtener((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test198"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)10.0f);
    int i21 = listaSobreArreglos16.longitud();
    boolean b22 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.vaciar();
    java.lang.Object obj24 = null;
    listaSobreArreglos16.insertar(obj24);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.insertar((java.lang.Object)(short)-1);
    boolean b31 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.eliminar(0);
    java.lang.String str34 = listaSobreArreglos26.toString();
    boolean b35 = listaSobreArreglos26.esVacia();
    boolean b36 = listaSobreArreglos26.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)b36);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos16);
    java.lang.Object obj40 = listaSobreArreglos7.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj40);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test199"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str8 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = listaSobreArreglos0.obtener(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test200"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b11 = listaSobreArreglos0.equals((java.lang.Object)(short)100);
    listaSobreArreglos0.vaciar();
    java.lang.String str13 = listaSobreArreglos0.toString();
    java.lang.String str14 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)10.0f);
    boolean b20 = listaSobreArreglos15.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    int i24 = listaSobreArreglos21.longitud();
    java.lang.String str25 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.insertar((java.lang.Object)(short)-1);
    boolean b31 = listaSobreArreglos26.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos26);
    java.lang.Object obj34 = null;
    listaSobreArreglos21.insertar(0, obj34);
    listaSobreArreglos15.insertar(obj34);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos15);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj39 = listaSobreArreglos15.obtener((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test201"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    int i10 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    listaSobreArreglos12.vaciar();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos12.equals(obj14);
    java.lang.String str16 = listaSobreArreglos12.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    java.lang.String str21 = listaSobreArreglos17.toString();
    java.lang.Object obj22 = null;
    listaSobreArreglos17.insertar(obj22);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos12);
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    int i33 = listaSobreArreglos32.longitud();
    java.lang.Object obj35 = null;
    listaSobreArreglos32.insertar(0, obj35);
    java.lang.String str37 = listaSobreArreglos32.toString();
    listaSobreArreglos32.eliminar(0);
    boolean b40 = listaSobreArreglos32.esVacia();
    java.lang.Object obj42 = null;
    listaSobreArreglos32.insertar(0, obj42);
    listaSobreArreglos32.eliminar((int)(byte)0);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    java.lang.String str47 = listaSobreArreglos46.toString();
    boolean b48 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.insertar((java.lang.Object)(short)-1);
    boolean b51 = listaSobreArreglos46.esVacia();
    boolean b52 = listaSobreArreglos46.esVacia();
    int i53 = listaSobreArreglos46.longitud();
    listas.ListaSobreArreglos listaSobreArreglos54 = new listas.ListaSobreArreglos();
    java.lang.String str55 = listaSobreArreglos54.toString();
    boolean b56 = listaSobreArreglos54.esVacia();
    listaSobreArreglos54.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj59 = null;
    boolean b60 = listaSobreArreglos54.equals(obj59);
    listaSobreArreglos54.insertar((java.lang.Object)0);
    listaSobreArreglos54.vaciar();
    boolean b64 = listaSobreArreglos46.equals((java.lang.Object)listaSobreArreglos54);
    java.lang.Object obj66 = null;
    listaSobreArreglos54.insertar(0, obj66);
    boolean b68 = listaSobreArreglos32.equals((java.lang.Object)listaSobreArreglos54);
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos32);
    java.lang.String str70 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[null,]"+ "'", str37.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "]"+ "'", str55.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "[][]"+ "'", str70.equals("[][]"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test202"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.String str6 = listaSobreArreglos0.toString();
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null,]"+ "'", str6.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test203"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    boolean b14 = listaSobreArreglos10.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos15);
    java.lang.String str21 = listaSobreArreglos10.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos10);
    boolean b23 = listaSobreArreglos10.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos24.equals(obj29);
    boolean b31 = listaSobreArreglos24.esVacia();
    java.lang.String str32 = listaSobreArreglos24.toString();
    boolean b33 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.eliminar(0);
    java.lang.String str36 = listaSobreArreglos24.toString();
    java.lang.String str37 = listaSobreArreglos24.toString();
    listaSobreArreglos10.insertar((java.lang.Object)str37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[[-]"+ "'", str21.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[-]"+ "'", str32.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "]"+ "'", str36.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test204"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    java.lang.String str10 = listaSobreArreglos9.toString();
    boolean b11 = listaSobreArreglos9.esVacia();
    listaSobreArreglos9.insertar((java.lang.Object)(short)-1);
    boolean b14 = listaSobreArreglos9.esVacia();
    boolean b15 = listaSobreArreglos9.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos9.insertar(obj16);
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos9);
    java.lang.Object obj20 = listaSobreArreglos0.obtener(0);
    int i21 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    listaSobreArreglos22.vaciar();
    java.lang.String str25 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    int i27 = listaSobreArreglos26.longitud();
    listaSobreArreglos26.vaciar();
    java.lang.String str29 = listaSobreArreglos26.toString();
    boolean b30 = listaSobreArreglos22.equals((java.lang.Object)listaSobreArreglos26);
    boolean b31 = listaSobreArreglos22.esVacia();
    java.lang.String str32 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    int i34 = listaSobreArreglos33.longitud();
    boolean b35 = listaSobreArreglos33.esVacia();
    boolean b37 = listaSobreArreglos33.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    java.lang.String str39 = listaSobreArreglos38.toString();
    boolean b40 = listaSobreArreglos38.esVacia();
    listaSobreArreglos38.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos33.insertar((java.lang.Object)listaSobreArreglos38);
    boolean b44 = listaSobreArreglos33.esVacia();
    int i45 = listaSobreArreglos33.longitud();
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos33);
    int i47 = listaSobreArreglos33.longitud();
    java.lang.Object obj49 = listaSobreArreglos33.obtener(0);
    java.lang.Object obj51 = null;
    listaSobreArreglos33.insertar(0, obj51);
    listas.ListaSobreArreglos listaSobreArreglos53 = new listas.ListaSobreArreglos();
    int i54 = listaSobreArreglos53.longitud();
    java.lang.Object obj56 = null;
    listaSobreArreglos53.insertar(0, obj56);
    java.lang.Object obj59 = listaSobreArreglos53.obtener(0);
    java.lang.Object obj61 = listaSobreArreglos53.obtener(0);
    boolean b62 = listaSobreArreglos53.esVacia();
    boolean b63 = listaSobreArreglos33.equals((java.lang.Object)listaSobreArreglos53);
    java.lang.String str64 = listaSobreArreglos33.toString();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos33);
    boolean b66 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "]"+ "'", str39.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "[null, [-]"+ "'", str64.equals("[null, [-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test205"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    boolean b7 = listaSobreArreglos5.esVacia();
    boolean b8 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.vaciar();
    listaSobreArreglos5.vaciar();
    boolean b11 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos5);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    java.lang.Object obj15 = null;
    listaSobreArreglos12.insertar(0, obj15);
    java.lang.String str17 = listaSobreArreglos12.toString();
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos12);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    boolean b21 = listaSobreArreglos20.esVacia();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b23 = listaSobreArreglos20.esVacia();
    java.lang.String str24 = listaSobreArreglos20.toString();
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    java.lang.String str28 = listaSobreArreglos27.toString();
    boolean b29 = listaSobreArreglos27.esVacia();
    listaSobreArreglos27.insertar((java.lang.Object)(short)-1);
    boolean b32 = listaSobreArreglos20.equals((java.lang.Object)(short)-1);
    int i33 = listaSobreArreglos20.longitud();
    listaSobreArreglos5.insertar(0, (java.lang.Object)i33);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    boolean b38 = listaSobreArreglos36.esVacia();
    boolean b40 = listaSobreArreglos36.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos41 = new listas.ListaSobreArreglos();
    java.lang.String str42 = listaSobreArreglos41.toString();
    boolean b43 = listaSobreArreglos41.esVacia();
    listaSobreArreglos41.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos36.insertar((java.lang.Object)listaSobreArreglos41);
    java.lang.String str47 = listaSobreArreglos41.toString();
    listaSobreArreglos41.vaciar();
    java.lang.Object obj49 = null;
    boolean b50 = listaSobreArreglos41.equals(obj49);
    int i51 = listaSobreArreglos41.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.insertar(3, (java.lang.Object)i51);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null,]"+ "'", str17.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "]"+ "'", str42.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[-]"+ "'", str47.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test206"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.String str3 = listaSobreArreglos0.toString();
    boolean b4 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test207"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj15 = null;
    listaSobreArreglos0.insertar(obj15);
    boolean b17 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    java.lang.String str19 = listaSobreArreglos18.toString();
    java.lang.String str20 = listaSobreArreglos18.toString();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)10.0f);
    java.lang.Object obj26 = null;
    listaSobreArreglos21.insertar(obj26);
    listaSobreArreglos18.insertar((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos21.eliminar(0);
    java.lang.Object obj31 = null;
    boolean b32 = listaSobreArreglos21.equals(obj31);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos21);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos21.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test208"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    java.lang.Object obj7 = null;
    listaSobreArreglos4.insertar(0, obj7);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj17 = null;
    listaSobreArreglos12.insertar(obj17);
    java.lang.String str19 = listaSobreArreglos12.toString();
    java.lang.Object obj21 = null;
    listaSobreArreglos12.insertar(0, obj21);
    java.lang.Object obj24 = null;
    listaSobreArreglos12.insertar(0, obj24);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos4.insertar((int)(short)-1, (java.lang.Object)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[-1null,]"+ "'", str19.equals("[-1null,]"));

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test209"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos8.equals(obj13);
    listaSobreArreglos8.vaciar();
    int i16 = listaSobreArreglos8.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i16);
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos0.equals(obj18);
    java.lang.Object obj20 = null;
    boolean b21 = listaSobreArreglos0.equals(obj20);
    java.lang.String str22 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[010.0null,]"+ "'", str22.equals("[010.0null,]"));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test210"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj11 = null;
    listaSobreArreglos3.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)b14);
    java.lang.Object obj17 = listaSobreArreglos3.obtener(0);
    java.lang.Object obj19 = listaSobreArreglos3.obtener(0);
    java.lang.Object obj20 = null;
    listaSobreArreglos3.insertar(obj20);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos3.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 10.0f+ "'", obj17.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0f+ "'", obj19.equals(10.0f));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test211"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str7 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = listaSobreArreglos0.obtener((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test212"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listaSobreArreglos0.insertar((java.lang.Object)0.0f);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b10 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(0, obj16);
    java.lang.Object obj19 = listaSobreArreglos12.obtener((int)(short)0);
    listaSobreArreglos12.vaciar();
    java.lang.String str21 = listaSobreArreglos12.toString();
    int i22 = listaSobreArreglos12.longitud();
    boolean b23 = listaSobreArreglos12.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(4, (java.lang.Object)b23);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test213"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    listaSobreArreglos0.insertar((java.lang.Object)str7);
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    java.lang.Object obj13 = listaSobreArreglos0.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj13);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test214"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    boolean b8 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test215"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    java.lang.Object obj25 = null;
    listaSobreArreglos0.insertar(0, obj25);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test216"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    java.lang.String str11 = listaSobreArreglos10.toString();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)(short)-1);
    boolean b15 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.eliminar(0);
    java.lang.String str18 = listaSobreArreglos10.toString();
    boolean b19 = listaSobreArreglos10.esVacia();
    boolean b20 = listaSobreArreglos10.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b20);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj24 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test217"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos5.insertar(0, obj9);
    boolean b11 = listaSobreArreglos0.equals(obj9);
    listaSobreArreglos0.vaciar();
    boolean b13 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test218"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    int i18 = listaSobreArreglos6.longitud();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    java.lang.String str21 = listaSobreArreglos19.toString();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)10.0f);
    java.lang.Object obj27 = null;
    listaSobreArreglos22.insertar(obj27);
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj31 = listaSobreArreglos19.obtener(0);
    java.lang.String str32 = listaSobreArreglos19.toString();
    boolean b33 = listaSobreArreglos19.esVacia();
    java.lang.Object obj35 = null;
    listaSobreArreglos19.insertar((int)(short)1, obj35);
    listaSobreArreglos19.eliminar(0);
    java.lang.String str39 = listaSobreArreglos19.toString();
    boolean b40 = listaSobreArreglos19.esVacia();
    boolean b41 = listaSobreArreglos6.equals((java.lang.Object)b40);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj43 = listaSobreArreglos6.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[[10.0null,]"+ "'", str32.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "]"+ "'", str39.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test219"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    java.lang.String str27 = listaSobreArreglos19.toString();
    boolean b28 = listaSobreArreglos19.esVacia();
    boolean b29 = listaSobreArreglos19.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos30);
    listaSobreArreglos30.vaciar();
    boolean b36 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos30);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj38 = listaSobreArreglos6.obtener((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test220"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    boolean b16 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test221"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b15 = listaSobreArreglos6.esVacia();
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos6.equals(obj16);
    int i18 = listaSobreArreglos6.longitud();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj24 = null;
    boolean b25 = listaSobreArreglos19.equals(obj24);
    boolean b26 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    int i29 = listaSobreArreglos19.longitud();
    boolean b30 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj31 = null;
    boolean b32 = listaSobreArreglos6.equals(obj31);
    listaSobreArreglos6.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test222"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    int i10 = listaSobreArreglos0.longitud();
    boolean b11 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = listaSobreArreglos0.obtener(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test223"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = listaSobreArreglos3.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test224"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    java.lang.String str9 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    java.lang.String str16 = listaSobreArreglos12.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    java.lang.Object obj20 = null;
    boolean b21 = listaSobreArreglos17.equals(obj20);
    listaSobreArreglos12.insertar((java.lang.Object)b21);
    int i23 = listaSobreArreglos12.longitud();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    listaSobreArreglos24.vaciar();
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos24);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos24.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[-1]"+ "'", str9.equals("[-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test225"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos8.equals(obj13);
    listaSobreArreglos8.vaciar();
    int i16 = listaSobreArreglos8.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i16);
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    int i19 = listaSobreArreglos18.longitud();
    boolean b20 = listaSobreArreglos18.esVacia();
    boolean b22 = listaSobreArreglos18.equals((java.lang.Object)1);
    listaSobreArreglos18.insertar(0, (java.lang.Object)10.0d);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    java.lang.String str28 = listaSobreArreglos27.toString();
    boolean b29 = listaSobreArreglos27.esVacia();
    listaSobreArreglos27.insertar((java.lang.Object)(short)-1);
    boolean b32 = listaSobreArreglos27.esVacia();
    boolean b33 = listaSobreArreglos27.esVacia();
    java.lang.Object obj34 = null;
    listaSobreArreglos27.insertar(obj34);
    listaSobreArreglos18.insertar(0, (java.lang.Object)listaSobreArreglos27);
    java.lang.Object obj38 = listaSobreArreglos18.obtener(0);
    int i39 = listaSobreArreglos18.longitud();
    listas.ListaSobreArreglos listaSobreArreglos40 = new listas.ListaSobreArreglos();
    int i41 = listaSobreArreglos40.longitud();
    listaSobreArreglos40.vaciar();
    java.lang.String str43 = listaSobreArreglos40.toString();
    listas.ListaSobreArreglos listaSobreArreglos44 = new listas.ListaSobreArreglos();
    int i45 = listaSobreArreglos44.longitud();
    listaSobreArreglos44.vaciar();
    java.lang.String str47 = listaSobreArreglos44.toString();
    boolean b48 = listaSobreArreglos40.equals((java.lang.Object)listaSobreArreglos44);
    boolean b49 = listaSobreArreglos40.esVacia();
    java.lang.String str50 = listaSobreArreglos40.toString();
    listas.ListaSobreArreglos listaSobreArreglos51 = new listas.ListaSobreArreglos();
    int i52 = listaSobreArreglos51.longitud();
    boolean b53 = listaSobreArreglos51.esVacia();
    boolean b55 = listaSobreArreglos51.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos56 = new listas.ListaSobreArreglos();
    java.lang.String str57 = listaSobreArreglos56.toString();
    boolean b58 = listaSobreArreglos56.esVacia();
    listaSobreArreglos56.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos51.insertar((java.lang.Object)listaSobreArreglos56);
    boolean b62 = listaSobreArreglos51.esVacia();
    int i63 = listaSobreArreglos51.longitud();
    listaSobreArreglos40.insertar((java.lang.Object)listaSobreArreglos51);
    int i65 = listaSobreArreglos51.longitud();
    java.lang.Object obj67 = listaSobreArreglos51.obtener(0);
    java.lang.Object obj69 = null;
    listaSobreArreglos51.insertar(0, obj69);
    listas.ListaSobreArreglos listaSobreArreglos71 = new listas.ListaSobreArreglos();
    int i72 = listaSobreArreglos71.longitud();
    java.lang.Object obj74 = null;
    listaSobreArreglos71.insertar(0, obj74);
    java.lang.Object obj77 = listaSobreArreglos71.obtener(0);
    java.lang.Object obj79 = listaSobreArreglos71.obtener(0);
    boolean b80 = listaSobreArreglos71.esVacia();
    boolean b81 = listaSobreArreglos51.equals((java.lang.Object)listaSobreArreglos71);
    java.lang.String str82 = listaSobreArreglos51.toString();
    listaSobreArreglos18.insertar((java.lang.Object)listaSobreArreglos51);
    boolean b84 = listaSobreArreglos18.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "]"+ "'", str50.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "]"+ "'", str57.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "[null, [-]"+ "'", str82.equals("[null, [-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test226"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    listaSobreArreglos0.eliminar(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test227"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.Object obj15 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj15);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test228"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos0.insertar((int)(short)1, obj16);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str20 = listaSobreArreglos0.toString();
    int i21 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos22.equals(obj25);
    int i27 = listaSobreArreglos22.longitud();
    boolean b28 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj29 = null;
    listaSobreArreglos0.insertar(obj29);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj32 = listaSobreArreglos0.obtener(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test229"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    int i16 = listaSobreArreglos0.longitud();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos0.equals(obj18);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b25 = listaSobreArreglos21.equals((java.lang.Object)1);
    java.lang.Object obj26 = null;
    listaSobreArreglos21.insertar(obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    int i29 = listaSobreArreglos28.longitud();
    listaSobreArreglos28.vaciar();
    java.lang.String str31 = listaSobreArreglos28.toString();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    int i33 = listaSobreArreglos32.longitud();
    listaSobreArreglos32.vaciar();
    java.lang.String str35 = listaSobreArreglos32.toString();
    boolean b36 = listaSobreArreglos28.equals((java.lang.Object)listaSobreArreglos32);
    boolean b37 = listaSobreArreglos28.esVacia();
    java.lang.String str38 = listaSobreArreglos28.toString();
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    int i40 = listaSobreArreglos39.longitud();
    boolean b41 = listaSobreArreglos39.esVacia();
    boolean b43 = listaSobreArreglos39.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos44 = new listas.ListaSobreArreglos();
    java.lang.String str45 = listaSobreArreglos44.toString();
    boolean b46 = listaSobreArreglos44.esVacia();
    listaSobreArreglos44.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos39.insertar((java.lang.Object)listaSobreArreglos44);
    boolean b50 = listaSobreArreglos39.esVacia();
    int i51 = listaSobreArreglos39.longitud();
    listaSobreArreglos28.insertar((java.lang.Object)listaSobreArreglos39);
    boolean b53 = listaSobreArreglos28.esVacia();
    java.lang.Object obj54 = null;
    listaSobreArreglos28.insertar(obj54);
    boolean b56 = listaSobreArreglos21.equals((java.lang.Object)listaSobreArreglos28);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(3, (java.lang.Object)listaSobreArreglos28);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "]"+ "'", str38.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test230"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.String str18 = listaSobreArreglos0.toString();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b25 = listaSobreArreglos21.equals((java.lang.Object)1);
    java.lang.Object obj26 = null;
    listaSobreArreglos21.insertar(obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    java.lang.String str29 = listaSobreArreglos28.toString();
    boolean b30 = listaSobreArreglos28.esVacia();
    int i31 = listaSobreArreglos28.longitud();
    java.lang.String str32 = listaSobreArreglos28.toString();
    int i33 = listaSobreArreglos28.longitud();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos28);
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos21.equals(obj35);
    int i37 = listaSobreArreglos21.longitud();
    int i38 = listaSobreArreglos21.longitud();
    java.lang.Object obj40 = listaSobreArreglos21.obtener((int)(short)1);
    listaSobreArreglos0.insertar(obj40);
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    listaSobreArreglos42.vaciar();
    java.lang.Object obj44 = null;
    boolean b45 = listaSobreArreglos42.equals(obj44);
    java.lang.String str46 = listaSobreArreglos42.toString();
    listas.ListaSobreArreglos listaSobreArreglos47 = new listas.ListaSobreArreglos();
    boolean b48 = listaSobreArreglos47.esVacia();
    boolean b49 = listaSobreArreglos47.esVacia();
    boolean b50 = listaSobreArreglos47.esVacia();
    java.lang.String str51 = listaSobreArreglos47.toString();
    java.lang.Object obj52 = null;
    listaSobreArreglos47.insertar(obj52);
    listas.ListaSobreArreglos listaSobreArreglos54 = new listas.ListaSobreArreglos();
    int i55 = listaSobreArreglos54.longitud();
    boolean b56 = listaSobreArreglos54.esVacia();
    int i57 = listaSobreArreglos54.longitud();
    listaSobreArreglos47.insertar((java.lang.Object)listaSobreArreglos54);
    listaSobreArreglos42.insertar((java.lang.Object)listaSobreArreglos54);
    boolean b60 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos42);
    boolean b61 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "]"+ "'", str51.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test231"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    java.lang.Object obj10 = null;
    listaSobreArreglos7.insertar(0, obj10);
    java.lang.String str12 = listaSobreArreglos7.toString();
    listaSobreArreglos7.eliminar(0);
    boolean b15 = listaSobreArreglos7.esVacia();
    java.lang.Object obj17 = null;
    listaSobreArreglos7.insertar(0, obj17);
    listaSobreArreglos7.eliminar((int)(byte)0);
    java.lang.String str21 = listaSobreArreglos7.toString();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj24 = listaSobreArreglos0.obtener(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[null,]"+ "'", str12.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test232"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null,]"+ "'", str7.equals("[null,]"));

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test233"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    java.lang.String str18 = listaSobreArreglos0.toString();
    java.lang.Object obj20 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((-1), obj20);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[]"+ "'", str18.equals("[]"));

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test234"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    boolean b25 = listaSobreArreglos11.esVacia();
    java.lang.String str26 = listaSobreArreglos11.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.eliminar((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[[-]"+ "'", str26.equals("[[-]"));

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test235"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.vaciar();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos5.equals(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)b9);
    int i11 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    listaSobreArreglos12.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos12);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    boolean b20 = listaSobreArreglos16.equals((java.lang.Object)1);
    listaSobreArreglos16.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj25 = listaSobreArreglos16.obtener(0);
    boolean b26 = listaSobreArreglos16.esVacia();
    boolean b27 = listaSobreArreglos12.equals((java.lang.Object)b26);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = listaSobreArreglos12.obtener((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 10.0d+ "'", obj25.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test236"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos0.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test237"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    listaSobreArreglos0.vaciar();
    int i10 = listaSobreArreglos0.longitud();
    java.lang.String str11 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test238"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    listaSobreArreglos10.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = listaSobreArreglos0.obtener((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test239"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos0.vaciar();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test240"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.Object obj7 = null;
    boolean b8 = listaSobreArreglos0.equals(obj7);
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test241"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos0.vaciar();
    int i9 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = listaSobreArreglos0.obtener((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test242"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    boolean b25 = listaSobreArreglos0.esVacia();
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar(obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    int i29 = listaSobreArreglos28.longitud();
    boolean b30 = listaSobreArreglos28.esVacia();
    boolean b32 = listaSobreArreglos28.equals((java.lang.Object)1);
    listaSobreArreglos28.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj37 = listaSobreArreglos28.obtener(0);
    boolean b38 = listaSobreArreglos28.esVacia();
    java.lang.String str39 = listaSobreArreglos28.toString();
    boolean b40 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos28);
    listas.ListaSobreArreglos listaSobreArreglos41 = new listas.ListaSobreArreglos();
    int i42 = listaSobreArreglos41.longitud();
    boolean b43 = listaSobreArreglos41.esVacia();
    listaSobreArreglos41.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    int i46 = listaSobreArreglos45.longitud();
    java.lang.Object obj48 = null;
    listaSobreArreglos45.insertar(0, obj48);
    int i50 = listaSobreArreglos45.longitud();
    listaSobreArreglos41.insertar((java.lang.Object)listaSobreArreglos45);
    boolean b52 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos45);
    listas.ListaSobreArreglos listaSobreArreglos54 = new listas.ListaSobreArreglos();
    int i55 = listaSobreArreglos54.longitud();
    listaSobreArreglos54.vaciar();
    java.lang.String str57 = listaSobreArreglos54.toString();
    listas.ListaSobreArreglos listaSobreArreglos58 = new listas.ListaSobreArreglos();
    int i59 = listaSobreArreglos58.longitud();
    listaSobreArreglos58.vaciar();
    java.lang.String str61 = listaSobreArreglos58.toString();
    boolean b62 = listaSobreArreglos54.equals((java.lang.Object)listaSobreArreglos58);
    boolean b63 = listaSobreArreglos54.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos64 = new listas.ListaSobreArreglos();
    listaSobreArreglos64.vaciar();
    listaSobreArreglos54.insertar((java.lang.Object)listaSobreArreglos64);
    int i67 = listaSobreArreglos54.longitud();
    java.lang.String str68 = listaSobreArreglos54.toString();
    java.lang.Object obj69 = null;
    boolean b70 = listaSobreArreglos54.equals(obj69);
    boolean b71 = listaSobreArreglos54.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos45.insertar(10, (java.lang.Object)listaSobreArreglos54);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 10.0d+ "'", obj37.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[10.]"+ "'", str39.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "]"+ "'", str57.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "]"+ "'", str61.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[]"+ "'", str68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test243"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    boolean b13 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = listaSobreArreglos0.obtener((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test244"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    boolean b13 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test245"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.String str11 = listaSobreArreglos5.toString();
    int i12 = listaSobreArreglos5.longitud();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    int i16 = listaSobreArreglos13.longitud();
    boolean b17 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    listaSobreArreglos20.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos20.vaciar();
    listaSobreArreglos20.vaciar();
    listaSobreArreglos13.insertar(0, (java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj31 = null;
    listaSobreArreglos13.insertar(obj31);
    boolean b33 = listaSobreArreglos13.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos13);
    boolean b35 = listaSobreArreglos5.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[-]"+ "'", str11.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test246"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos5.equals(obj12);
    boolean b14 = listaSobreArreglos5.esVacia();
    java.lang.Object obj15 = null;
    listaSobreArreglos5.insertar(obj15);
    java.lang.Object obj18 = null;
    listaSobreArreglos5.insertar((int)(short)0, obj18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test247"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj7 = null;
    listaSobreArreglos0.insertar(obj7);
    listaSobreArreglos0.vaciar();
    boolean b10 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos0.obtener((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test248"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str8 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = listaSobreArreglos0.obtener((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test249"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj10 = listaSobreArreglos0.obtener((int)(short)1);
    java.lang.Object obj12 = listaSobreArreglos0.obtener((int)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0f+ "'", obj12.equals(10.0f));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test250"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test251"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.String str11 = listaSobreArreglos5.toString();
    int i12 = listaSobreArreglos5.longitud();
    java.lang.Object obj14 = listaSobreArreglos5.obtener(0);
    boolean b15 = listaSobreArreglos5.esVacia();
    boolean b16 = listaSobreArreglos5.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = listaSobreArreglos5.obtener((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[-]"+ "'", str11.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)-1+ "'", obj14.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test252"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos5.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.Object obj14 = null;
    listaSobreArreglos13.insertar(obj14);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    java.lang.String str18 = listaSobreArreglos16.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)10.0f);
    java.lang.Object obj24 = null;
    listaSobreArreglos19.insertar(obj24);
    listaSobreArreglos16.insertar((java.lang.Object)listaSobreArreglos19);
    boolean b27 = listaSobreArreglos13.equals((java.lang.Object)listaSobreArreglos19);
    java.lang.String str28 = listaSobreArreglos13.toString();
    listaSobreArreglos13.vaciar();
    boolean b30 = listaSobreArreglos5.equals((java.lang.Object)listaSobreArreglos13);
    java.lang.Object obj32 = listaSobreArreglos5.obtener(0);
    java.lang.String str33 = listaSobreArreglos5.toString();
    java.lang.Object obj35 = listaSobreArreglos5.obtener(0);
    boolean b36 = listaSobreArreglos5.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null,]"+ "'", str28.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj32 + "' != '" + (short)-1+ "'", obj32.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "[-]"+ "'", str33.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (short)-1+ "'", obj35.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test253"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    java.lang.String str16 = listaSobreArreglos0.toString();
    int i17 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[[-]"+ "'", str15.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[[-]"+ "'", str16.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test254"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = listaSobreArreglos0.obtener(2);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test255"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    int i13 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)10.0f);
    java.lang.Object obj19 = null;
    listaSobreArreglos14.insertar(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    boolean b26 = listaSobreArreglos14.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)b26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    boolean b29 = listaSobreArreglos28.esVacia();
    boolean b30 = listaSobreArreglos28.esVacia();
    java.lang.Object obj31 = null;
    boolean b32 = listaSobreArreglos28.equals(obj31);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos28);
    boolean b34 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj36 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test256"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test257"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    java.lang.String str27 = listaSobreArreglos19.toString();
    boolean b28 = listaSobreArreglos19.esVacia();
    boolean b29 = listaSobreArreglos19.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos30);
    listaSobreArreglos30.vaciar();
    boolean b36 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos30);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj38 = listaSobreArreglos30.obtener((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test258"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos17.equals(obj22);
    listaSobreArreglos17.insertar((java.lang.Object)0);
    boolean b26 = listaSobreArreglos17.esVacia();
    int i27 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj33 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test259"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    java.lang.String str16 = listaSobreArreglos0.toString();
    java.lang.Object obj17 = null;
    listaSobreArreglos0.insertar(obj17);
    java.lang.Object obj20 = null;
    listaSobreArreglos0.insertar(0, obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[[-]"+ "'", str15.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[[-]"+ "'", str16.equals("[[-]"));

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test260"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos0.esVacia();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(0, obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos21.equals(obj26);
    boolean b28 = listaSobreArreglos21.esVacia();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos21.equals(obj29);
    boolean b31 = listaSobreArreglos21.esVacia();
    boolean b32 = listaSobreArreglos0.equals((java.lang.Object)b31);
    int i33 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    int i35 = listaSobreArreglos34.longitud();
    boolean b36 = listaSobreArreglos34.esVacia();
    boolean b38 = listaSobreArreglos34.equals((java.lang.Object)1);
    listaSobreArreglos34.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj43 = listaSobreArreglos34.obtener(0);
    boolean b44 = listaSobreArreglos34.esVacia();
    java.lang.Object obj46 = listaSobreArreglos34.obtener(0);
    listaSobreArreglos34.eliminar(0);
    java.lang.String str49 = listaSobreArreglos34.toString();
    int i50 = listaSobreArreglos34.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos34);
    int i52 = listaSobreArreglos34.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0d+ "'", obj43.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 10.0d+ "'", obj46.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "]"+ "'", str49.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test261"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test262"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    java.lang.Object obj11 = null;
    listaSobreArreglos4.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    boolean b18 = listaSobreArreglos14.equals((java.lang.Object)1);
    listaSobreArreglos14.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj23 = listaSobreArreglos14.obtener(0);
    boolean b24 = listaSobreArreglos14.esVacia();
    java.lang.Object obj25 = null;
    listaSobreArreglos14.insertar(obj25);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    java.lang.Object obj28 = null;
    listaSobreArreglos27.insertar(obj28);
    boolean b30 = listaSobreArreglos27.esVacia();
    boolean b31 = listaSobreArreglos14.equals((java.lang.Object)b30);
    java.lang.Object obj33 = null;
    listaSobreArreglos14.insertar(0, obj33);
    int i35 = listaSobreArreglos14.longitud();
    boolean b36 = listaSobreArreglos14.esVacia();
    listaSobreArreglos4.insertar((int)(short)0, (java.lang.Object)b36);
    boolean b38 = listaSobreArreglos4.esVacia();
    java.lang.Object obj40 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos4.insertar((int)(byte)100, obj40);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj23 + "' != '" + 10.0d+ "'", obj23.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test263"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    java.lang.Object obj2 = null;
    listaSobreArreglos0.insertar(obj2);
    java.lang.Object obj4 = null;
    boolean b5 = listaSobreArreglos0.equals(obj4);
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)10.0f);
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos7.vaciar();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos7.equals(obj14);
    listaSobreArreglos0.insertar((java.lang.Object)b15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test264"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b6 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = listaSobreArreglos0.obtener((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test265"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    int i11 = listaSobreArreglos8.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.vaciar();
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos12);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos8);
    java.lang.String str20 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj22 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[-1[]"+ "'", str20.equals("[-1[]"));

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test266"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    boolean b7 = listaSobreArreglos5.esVacia();
    boolean b8 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.vaciar();
    listaSobreArreglos5.vaciar();
    boolean b11 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos5);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    java.lang.Object obj15 = null;
    listaSobreArreglos12.insertar(0, obj15);
    java.lang.String str17 = listaSobreArreglos12.toString();
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos12);
    java.lang.Object obj20 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.insertar((int)(short)10, obj20);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null,]"+ "'", str17.equals("[null,]"));

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test267"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    boolean b6 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test268"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos11.equals(obj14);
    java.lang.String str16 = listaSobreArreglos11.toString();
    java.lang.String str17 = listaSobreArreglos11.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos11.obtener((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test269"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    int i9 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    boolean b16 = listaSobreArreglos11.esVacia();
    boolean b17 = listaSobreArreglos11.esVacia();
    java.lang.Object obj18 = null;
    listaSobreArreglos11.insertar(obj18);
    java.lang.String str20 = listaSobreArreglos11.toString();
    int i21 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj23 = null;
    boolean b24 = listaSobreArreglos0.equals(obj23);
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos0.equals(obj25);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[-1null,]"+ "'", str20.equals("[-1null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test270"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    listaSobreArreglos0.insertar(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test271"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.String str18 = listaSobreArreglos0.toString();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b25 = listaSobreArreglos21.equals((java.lang.Object)1);
    java.lang.Object obj26 = null;
    listaSobreArreglos21.insertar(obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    java.lang.String str29 = listaSobreArreglos28.toString();
    boolean b30 = listaSobreArreglos28.esVacia();
    int i31 = listaSobreArreglos28.longitud();
    java.lang.String str32 = listaSobreArreglos28.toString();
    int i33 = listaSobreArreglos28.longitud();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos28);
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos21.equals(obj35);
    int i37 = listaSobreArreglos21.longitud();
    int i38 = listaSobreArreglos21.longitud();
    java.lang.Object obj40 = listaSobreArreglos21.obtener((int)(short)1);
    listaSobreArreglos0.insertar(obj40);
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    listaSobreArreglos42.vaciar();
    java.lang.Object obj44 = null;
    boolean b45 = listaSobreArreglos42.equals(obj44);
    java.lang.String str46 = listaSobreArreglos42.toString();
    listas.ListaSobreArreglos listaSobreArreglos47 = new listas.ListaSobreArreglos();
    boolean b48 = listaSobreArreglos47.esVacia();
    boolean b49 = listaSobreArreglos47.esVacia();
    boolean b50 = listaSobreArreglos47.esVacia();
    java.lang.String str51 = listaSobreArreglos47.toString();
    java.lang.Object obj52 = null;
    listaSobreArreglos47.insertar(obj52);
    listas.ListaSobreArreglos listaSobreArreglos54 = new listas.ListaSobreArreglos();
    int i55 = listaSobreArreglos54.longitud();
    boolean b56 = listaSobreArreglos54.esVacia();
    int i57 = listaSobreArreglos54.longitud();
    listaSobreArreglos47.insertar((java.lang.Object)listaSobreArreglos54);
    listaSobreArreglos42.insertar((java.lang.Object)listaSobreArreglos54);
    boolean b60 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos42);
    int i61 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "]"+ "'", str51.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 2);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test272"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    int i7 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    java.lang.String str10 = listaSobreArreglos8.toString();
    boolean b11 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos8);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    boolean b15 = listaSobreArreglos13.esVacia();
    boolean b17 = listaSobreArreglos13.equals((java.lang.Object)1);
    java.lang.String str18 = listaSobreArreglos13.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)str18);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    listaSobreArreglos27.vaciar();
    java.lang.String str30 = listaSobreArreglos27.toString();
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    listaSobreArreglos31.vaciar();
    java.lang.String str34 = listaSobreArreglos31.toString();
    boolean b35 = listaSobreArreglos27.equals((java.lang.Object)listaSobreArreglos31);
    boolean b36 = listaSobreArreglos27.esVacia();
    java.lang.String str37 = listaSobreArreglos27.toString();
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    int i39 = listaSobreArreglos38.longitud();
    boolean b40 = listaSobreArreglos38.esVacia();
    boolean b42 = listaSobreArreglos38.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    java.lang.String str44 = listaSobreArreglos43.toString();
    boolean b45 = listaSobreArreglos43.esVacia();
    listaSobreArreglos43.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos38.insertar((java.lang.Object)listaSobreArreglos43);
    boolean b49 = listaSobreArreglos38.esVacia();
    int i50 = listaSobreArreglos38.longitud();
    listaSobreArreglos27.insertar((java.lang.Object)listaSobreArreglos38);
    boolean b52 = listaSobreArreglos27.esVacia();
    java.lang.Object obj53 = null;
    listaSobreArreglos27.insertar(obj53);
    boolean b55 = listaSobreArreglos20.equals((java.lang.Object)listaSobreArreglos27);
    java.lang.Object obj56 = null;
    listaSobreArreglos27.insertar(obj56);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "]"+ "'", str44.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test273"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos0.eliminar(1);
    java.lang.Object obj17 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj17);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test274"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos0.eliminar(1);
    java.lang.Object obj17 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(0, obj19);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj17);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test275"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    listaSobreArreglos3.vaciar();
    java.lang.String str6 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    listaSobreArreglos7.vaciar();
    java.lang.String str10 = listaSobreArreglos7.toString();
    boolean b11 = listaSobreArreglos3.equals((java.lang.Object)listaSobreArreglos7);
    boolean b12 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.vaciar();
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos3);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj16 = listaSobreArreglos3.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test276"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test277"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.String str14 = listaSobreArreglos11.toString();
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos11.equals(obj15);
    java.lang.String str17 = listaSobreArreglos11.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos11.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test278"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    int i14 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    java.lang.String str18 = listaSobreArreglos16.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)10.0f);
    java.lang.Object obj24 = null;
    listaSobreArreglos19.insertar(obj24);
    listaSobreArreglos16.insertar((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj28 = listaSobreArreglos16.obtener(0);
    java.lang.String str29 = listaSobreArreglos16.toString();
    int i30 = listaSobreArreglos16.longitud();
    int i31 = listaSobreArreglos16.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i31);
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    int i34 = listaSobreArreglos33.longitud();
    boolean b35 = listaSobreArreglos33.esVacia();
    boolean b37 = listaSobreArreglos33.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    java.lang.String str39 = listaSobreArreglos38.toString();
    boolean b40 = listaSobreArreglos38.esVacia();
    listaSobreArreglos38.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos33.insertar((java.lang.Object)listaSobreArreglos38);
    boolean b44 = listaSobreArreglos33.esVacia();
    boolean b45 = listaSobreArreglos33.esVacia();
    java.lang.Object obj47 = listaSobreArreglos33.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos48 = new listas.ListaSobreArreglos();
    int i49 = listaSobreArreglos48.longitud();
    java.lang.Object obj51 = null;
    listaSobreArreglos48.insertar(0, obj51);
    boolean b53 = listaSobreArreglos33.equals((java.lang.Object)listaSobreArreglos48);
    boolean b54 = listaSobreArreglos0.equals((java.lang.Object)b53);
    boolean b55 = listaSobreArreglos0.esVacia();
    java.lang.Object obj57 = listaSobreArreglos0.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[[10.0null,]"+ "'", str29.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "]"+ "'", str39.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 1+ "'", obj57.equals(1));

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test279"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    boolean b9 = listaSobreArreglos0.esVacia();
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    boolean b15 = listaSobreArreglos13.esVacia();
    boolean b16 = listaSobreArreglos13.esVacia();
    java.lang.Object obj17 = null;
    listaSobreArreglos13.insertar(obj17);
    listaSobreArreglos13.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    java.lang.String str21 = listaSobreArreglos20.toString();
    boolean b22 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos20.equals(obj25);
    listaSobreArreglos20.vaciar();
    int i28 = listaSobreArreglos20.longitud();
    boolean b29 = listaSobreArreglos13.equals((java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj30 = null;
    listaSobreArreglos20.insertar(obj30);
    java.lang.Object obj32 = null;
    boolean b33 = listaSobreArreglos20.equals(obj32);
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    int i35 = listaSobreArreglos34.longitud();
    listaSobreArreglos34.vaciar();
    java.lang.String str37 = listaSobreArreglos34.toString();
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    int i39 = listaSobreArreglos38.longitud();
    listaSobreArreglos38.vaciar();
    java.lang.String str41 = listaSobreArreglos38.toString();
    boolean b42 = listaSobreArreglos34.equals((java.lang.Object)listaSobreArreglos38);
    boolean b43 = listaSobreArreglos34.esVacia();
    java.lang.String str44 = listaSobreArreglos34.toString();
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    int i46 = listaSobreArreglos45.longitud();
    boolean b47 = listaSobreArreglos45.esVacia();
    boolean b49 = listaSobreArreglos45.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos50 = new listas.ListaSobreArreglos();
    java.lang.String str51 = listaSobreArreglos50.toString();
    boolean b52 = listaSobreArreglos50.esVacia();
    listaSobreArreglos50.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos45.insertar((java.lang.Object)listaSobreArreglos50);
    boolean b56 = listaSobreArreglos45.esVacia();
    int i57 = listaSobreArreglos45.longitud();
    listaSobreArreglos34.insertar((java.lang.Object)listaSobreArreglos45);
    listas.ListaSobreArreglos listaSobreArreglos60 = new listas.ListaSobreArreglos();
    java.lang.String str61 = listaSobreArreglos60.toString();
    boolean b62 = listaSobreArreglos60.esVacia();
    java.lang.Object obj64 = null;
    listaSobreArreglos60.insertar(0, obj64);
    java.lang.Object obj67 = listaSobreArreglos60.obtener((int)(short)0);
    listaSobreArreglos60.vaciar();
    listaSobreArreglos45.insertar(0, (java.lang.Object)listaSobreArreglos60);
    listas.ListaSobreArreglos listaSobreArreglos70 = new listas.ListaSobreArreglos();
    int i71 = listaSobreArreglos70.longitud();
    boolean b72 = listaSobreArreglos70.esVacia();
    boolean b74 = listaSobreArreglos70.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos75 = new listas.ListaSobreArreglos();
    java.lang.String str76 = listaSobreArreglos75.toString();
    boolean b77 = listaSobreArreglos75.esVacia();
    listaSobreArreglos75.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos70.insertar((java.lang.Object)listaSobreArreglos75);
    java.lang.Object obj81 = null;
    listaSobreArreglos70.insertar(obj81);
    listas.ListaSobreArreglos listaSobreArreglos83 = new listas.ListaSobreArreglos();
    java.lang.String str84 = listaSobreArreglos83.toString();
    boolean b85 = listaSobreArreglos83.esVacia();
    listaSobreArreglos83.insertar((java.lang.Object)(short)-1);
    boolean b88 = listaSobreArreglos83.esVacia();
    listaSobreArreglos83.eliminar(0);
    listaSobreArreglos70.insertar((java.lang.Object)listaSobreArreglos83);
    boolean b92 = listaSobreArreglos70.esVacia();
    listaSobreArreglos60.insertar((java.lang.Object)b92);
    java.lang.Object obj95 = null;
    listaSobreArreglos60.insertar(0, obj95);
    listaSobreArreglos20.insertar((java.lang.Object)listaSobreArreglos60);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos60);
    listaSobreArreglos60.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "]"+ "'", str44.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "]"+ "'", str51.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "]"+ "'", str61.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "]"+ "'", str76.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "]"+ "'", str84.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test280"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    boolean b9 = listaSobreArreglos0.esVacia();
    int i10 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = listaSobreArreglos0.obtener((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test281"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    listaSobreArreglos7.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos7.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test282"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    listaSobreArreglos0.insertar((java.lang.Object)str7);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos0.equals(obj9);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos0.obtener(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test283"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    java.lang.String str6 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null,]"+ "'", str6.equals("[null,]"));

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test284"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listaSobreArreglos15.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj24 = listaSobreArreglos15.obtener(0);
    boolean b25 = listaSobreArreglos15.esVacia();
    java.lang.String str26 = listaSobreArreglos15.toString();
    boolean b27 = listaSobreArreglos15.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos15);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj30 = listaSobreArreglos15.obtener(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0d+ "'", obj24.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10.]"+ "'", str26.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test285"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar((int)(byte)1, obj26);
    java.lang.Object obj29 = null;
    listaSobreArreglos0.insertar(0, obj29);
    int i31 = listaSobreArreglos0.longitud();
    java.lang.String str32 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar((int)(byte)1);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj41 = null;
    boolean b42 = listaSobreArreglos36.equals(obj41);
    boolean b43 = listaSobreArreglos36.esVacia();
    java.lang.Object obj44 = null;
    boolean b45 = listaSobreArreglos36.equals(obj44);
    boolean b47 = listaSobreArreglos36.equals((java.lang.Object)(short)100);
    java.lang.Object obj49 = listaSobreArreglos36.obtener(0);
    listaSobreArreglos0.insertar(0, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[null, [[-]null,]"+ "'", str32.equals("[null, [[-]null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj49 + "' != '" + (short)-1+ "'", obj49.equals((short)-1));

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test286"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    int i11 = listaSobreArreglos8.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.vaciar();
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos12);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos8);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    listaSobreArreglos20.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos20.vaciar();
    listaSobreArreglos20.vaciar();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos20);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    java.lang.String str32 = listaSobreArreglos31.toString();
    boolean b33 = listaSobreArreglos31.esVacia();
    int i34 = listaSobreArreglos31.longitud();
    java.lang.String str35 = listaSobreArreglos31.toString();
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    boolean b41 = listaSobreArreglos36.esVacia();
    listaSobreArreglos31.insertar((java.lang.Object)listaSobreArreglos36);
    listaSobreArreglos36.insertar(0, (java.lang.Object)'4');
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    java.lang.String str47 = listaSobreArreglos46.toString();
    boolean b48 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.insertar((java.lang.Object)(short)-1);
    boolean b51 = listaSobreArreglos46.esVacia();
    boolean b52 = listaSobreArreglos46.esVacia();
    java.lang.Object obj53 = null;
    listaSobreArreglos46.insertar(obj53);
    listas.ListaSobreArreglos listaSobreArreglos56 = new listas.ListaSobreArreglos();
    int i57 = listaSobreArreglos56.longitud();
    listaSobreArreglos56.vaciar();
    java.lang.String str59 = listaSobreArreglos56.toString();
    listas.ListaSobreArreglos listaSobreArreglos60 = new listas.ListaSobreArreglos();
    int i61 = listaSobreArreglos60.longitud();
    listaSobreArreglos60.vaciar();
    java.lang.String str63 = listaSobreArreglos60.toString();
    boolean b64 = listaSobreArreglos56.equals((java.lang.Object)listaSobreArreglos60);
    boolean b65 = listaSobreArreglos56.esVacia();
    java.lang.String str66 = listaSobreArreglos56.toString();
    listas.ListaSobreArreglos listaSobreArreglos67 = new listas.ListaSobreArreglos();
    int i68 = listaSobreArreglos67.longitud();
    boolean b69 = listaSobreArreglos67.esVacia();
    boolean b71 = listaSobreArreglos67.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos72 = new listas.ListaSobreArreglos();
    java.lang.String str73 = listaSobreArreglos72.toString();
    boolean b74 = listaSobreArreglos72.esVacia();
    listaSobreArreglos72.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos67.insertar((java.lang.Object)listaSobreArreglos72);
    boolean b78 = listaSobreArreglos67.esVacia();
    int i79 = listaSobreArreglos67.longitud();
    listaSobreArreglos56.insertar((java.lang.Object)listaSobreArreglos67);
    boolean b81 = listaSobreArreglos56.esVacia();
    java.lang.Object obj82 = null;
    listaSobreArreglos56.insertar(obj82);
    listaSobreArreglos46.insertar(0, obj82);
    listaSobreArreglos36.insertar((java.lang.Object)listaSobreArreglos46);
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos46);
    int i87 = listaSobreArreglos8.longitud();
    java.lang.Object obj89 = listaSobreArreglos8.obtener(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "]"+ "'", str59.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "]"+ "'", str63.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "]"+ "'", str66.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "]"+ "'", str73.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i87 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj89);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test287"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.String str14 = listaSobreArreglos11.toString();
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos11.equals(obj15);
    boolean b17 = listaSobreArreglos11.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.eliminar((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test288"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar((int)(byte)1, obj26);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = listaSobreArreglos0.obtener((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test289"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b11 = listaSobreArreglos0.equals((java.lang.Object)(short)100);
    java.lang.Object obj13 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj15 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)-1, obj15);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (short)-1+ "'", obj13.equals((short)-1));

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test290"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = listaSobreArreglos0.obtener((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test291"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    boolean b14 = listaSobreArreglos10.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos15);
    java.lang.String str21 = listaSobreArreglos10.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos10);
    boolean b24 = listaSobreArreglos10.equals((java.lang.Object)"[false]");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj26 = listaSobreArreglos10.obtener(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[[-]"+ "'", str21.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test292"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    java.lang.String str16 = listaSobreArreglos0.toString();
    java.lang.String str17 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[[-]"+ "'", str15.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[[-]"+ "'", str16.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[[-]"+ "'", str17.equals("[[-]"));

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test293"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos0.esVacia();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(0, obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos21.equals(obj26);
    boolean b28 = listaSobreArreglos21.esVacia();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos21.equals(obj29);
    boolean b31 = listaSobreArreglos21.esVacia();
    boolean b32 = listaSobreArreglos0.equals((java.lang.Object)b31);
    int i33 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    int i35 = listaSobreArreglos34.longitud();
    boolean b36 = listaSobreArreglos34.esVacia();
    boolean b38 = listaSobreArreglos34.equals((java.lang.Object)1);
    listaSobreArreglos34.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj43 = listaSobreArreglos34.obtener(0);
    boolean b44 = listaSobreArreglos34.esVacia();
    java.lang.Object obj46 = listaSobreArreglos34.obtener(0);
    listaSobreArreglos34.eliminar(0);
    java.lang.String str49 = listaSobreArreglos34.toString();
    int i50 = listaSobreArreglos34.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos34);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj53 = listaSobreArreglos0.obtener((int)(short)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 10.0d+ "'", obj43.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 10.0d+ "'", obj46.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "]"+ "'", str49.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test294"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)10.0f);
    int i21 = listaSobreArreglos16.longitud();
    boolean b22 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.vaciar();
    java.lang.Object obj24 = null;
    listaSobreArreglos16.insertar(obj24);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.insertar((java.lang.Object)(short)-1);
    boolean b31 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.eliminar(0);
    java.lang.String str34 = listaSobreArreglos26.toString();
    boolean b35 = listaSobreArreglos26.esVacia();
    boolean b36 = listaSobreArreglos26.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)b36);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos16);
    int i39 = listaSobreArreglos16.longitud();
    listaSobreArreglos16.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos16.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 2);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test295"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    int i24 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    int i27 = listaSobreArreglos26.longitud();
    boolean b28 = listaSobreArreglos26.esVacia();
    boolean b30 = listaSobreArreglos26.equals((java.lang.Object)1);
    listaSobreArreglos26.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj35 = listaSobreArreglos26.obtener(0);
    boolean b36 = listaSobreArreglos26.esVacia();
    java.lang.Object obj38 = listaSobreArreglos26.obtener(0);
    int i39 = listaSobreArreglos26.longitud();
    listas.ListaSobreArreglos listaSobreArreglos40 = new listas.ListaSobreArreglos();
    int i41 = listaSobreArreglos40.longitud();
    boolean b42 = listaSobreArreglos40.esVacia();
    listaSobreArreglos40.insertar((java.lang.Object)10.0f);
    java.lang.Object obj45 = null;
    listaSobreArreglos40.insertar(obj45);
    listas.ListaSobreArreglos listaSobreArreglos47 = new listas.ListaSobreArreglos();
    java.lang.String str48 = listaSobreArreglos47.toString();
    boolean b49 = listaSobreArreglos47.esVacia();
    listaSobreArreglos47.insertar((java.lang.Object)(short)-1);
    boolean b52 = listaSobreArreglos40.equals((java.lang.Object)(short)-1);
    listaSobreArreglos26.insertar((java.lang.Object)b52);
    listas.ListaSobreArreglos listaSobreArreglos54 = new listas.ListaSobreArreglos();
    boolean b55 = listaSobreArreglos54.esVacia();
    boolean b56 = listaSobreArreglos54.esVacia();
    java.lang.Object obj57 = null;
    boolean b58 = listaSobreArreglos54.equals(obj57);
    listaSobreArreglos26.insertar((java.lang.Object)listaSobreArreglos54);
    listaSobreArreglos26.vaciar();
    int i61 = listaSobreArreglos26.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)i61);
    java.lang.Object obj64 = null;
    listaSobreArreglos0.insertar(0, obj64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj35 + "' != '" + 10.0d+ "'", obj35.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 10.0d+ "'", obj38.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "]"+ "'", str48.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test296"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    boolean b13 = listaSobreArreglos0.esVacia();
    int i14 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    java.lang.Object obj19 = null;
    listaSobreArreglos15.insertar(0, obj19);
    java.lang.Object obj22 = listaSobreArreglos15.obtener((int)(short)0);
    listaSobreArreglos15.vaciar();
    boolean b24 = listaSobreArreglos15.esVacia();
    java.lang.String str25 = listaSobreArreglos15.toString();
    java.lang.String str26 = listaSobreArreglos15.toString();
    listaSobreArreglos0.insertar((java.lang.Object)str26);
    boolean b28 = listaSobreArreglos0.esVacia();
    java.lang.Object obj29 = null;
    listaSobreArreglos0.insertar(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test297"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    int i12 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos13.equals(obj18);
    boolean b20 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos13);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos13.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test298"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.String str6 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj11 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test299"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    int i4 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test300"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    listaSobreArreglos14.vaciar();
    java.lang.String str17 = listaSobreArreglos14.toString();
    boolean b18 = listaSobreArreglos10.equals((java.lang.Object)listaSobreArreglos14);
    boolean b19 = listaSobreArreglos10.esVacia();
    java.lang.String str20 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b25 = listaSobreArreglos21.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos26);
    boolean b32 = listaSobreArreglos21.esVacia();
    int i33 = listaSobreArreglos21.longitud();
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos21);
    java.lang.Object obj36 = null;
    listaSobreArreglos10.insertar((int)(byte)1, obj36);
    java.lang.String str38 = listaSobreArreglos10.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)100, (java.lang.Object)str38);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[null,]"+ "'", str7.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[[[-]null,]"+ "'", str38.equals("[[[-]null,]"));

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test301"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test302"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listaSobreArreglos15.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj24 = listaSobreArreglos15.obtener(0);
    boolean b25 = listaSobreArreglos15.esVacia();
    java.lang.Object obj27 = listaSobreArreglos15.obtener(0);
    int i28 = listaSobreArreglos15.longitud();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    int i30 = listaSobreArreglos29.longitud();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)10.0f);
    java.lang.Object obj34 = null;
    listaSobreArreglos29.insertar(obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    boolean b41 = listaSobreArreglos29.equals((java.lang.Object)(short)-1);
    listaSobreArreglos15.insertar((java.lang.Object)b41);
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    boolean b44 = listaSobreArreglos43.esVacia();
    boolean b45 = listaSobreArreglos43.esVacia();
    java.lang.Object obj46 = null;
    boolean b47 = listaSobreArreglos43.equals(obj46);
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos43);
    boolean b49 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos43);
    java.lang.Object obj50 = null;
    listaSobreArreglos0.insertar(obj50);
    java.lang.Object obj52 = null;
    listaSobreArreglos0.insertar(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0d+ "'", obj24.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0d+ "'", obj27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test303"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    int i11 = listaSobreArreglos4.longitud();
    java.lang.String str12 = listaSobreArreglos4.toString();
    listaSobreArreglos4.vaciar();
    java.lang.String str14 = listaSobreArreglos4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test304"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj11 = null;
    listaSobreArreglos3.insertar(obj11);
    java.lang.Object obj14 = listaSobreArreglos3.obtener(0);
    java.lang.String str15 = listaSobreArreglos3.toString();
    listaSobreArreglos3.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 10.0f+ "'", obj14.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test305"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test306"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    int i7 = listaSobreArreglos0.longitud();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b10 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test307"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    boolean b13 = listaSobreArreglos0.esVacia();
    int i14 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    java.lang.Object obj19 = null;
    listaSobreArreglos15.insertar(0, obj19);
    java.lang.Object obj22 = listaSobreArreglos15.obtener((int)(short)0);
    listaSobreArreglos15.vaciar();
    boolean b24 = listaSobreArreglos15.esVacia();
    java.lang.String str25 = listaSobreArreglos15.toString();
    java.lang.String str26 = listaSobreArreglos15.toString();
    listaSobreArreglos0.insertar((java.lang.Object)str26);
    boolean b28 = listaSobreArreglos0.esVacia();
    java.lang.String str29 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[]"+ "'", str29.equals("[]"));

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test308"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str15 = listaSobreArreglos0.toString();
    boolean b17 = listaSobreArreglos0.equals((java.lang.Object)"[10.010]");
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test309"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj10 = null;
    boolean b11 = listaSobreArreglos0.equals(obj10);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)-1+ "'", obj9.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test310"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)(short)-1);
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos12);
    boolean b19 = listaSobreArreglos7.esVacia();
    java.lang.Object obj20 = null;
    listaSobreArreglos7.insertar(obj20);
    listaSobreArreglos7.vaciar();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.String str24 = listaSobreArreglos7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test311"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    java.lang.String str27 = listaSobreArreglos19.toString();
    boolean b28 = listaSobreArreglos19.esVacia();
    boolean b29 = listaSobreArreglos19.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos30);
    listaSobreArreglos30.vaciar();
    boolean b36 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos30);
    int i37 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    int i39 = listaSobreArreglos6.longitud();
    listas.ListaSobreArreglos listaSobreArreglos41 = new listas.ListaSobreArreglos();
    java.lang.String str42 = listaSobreArreglos41.toString();
    java.lang.String str43 = listaSobreArreglos41.toString();
    listas.ListaSobreArreglos listaSobreArreglos44 = new listas.ListaSobreArreglos();
    int i45 = listaSobreArreglos44.longitud();
    boolean b46 = listaSobreArreglos44.esVacia();
    listaSobreArreglos44.insertar((java.lang.Object)10.0f);
    java.lang.Object obj49 = null;
    listaSobreArreglos44.insertar(obj49);
    listaSobreArreglos41.insertar((java.lang.Object)listaSobreArreglos44);
    java.lang.Object obj53 = listaSobreArreglos41.obtener(0);
    java.lang.String str54 = listaSobreArreglos41.toString();
    boolean b55 = listaSobreArreglos41.esVacia();
    java.lang.Object obj57 = null;
    listaSobreArreglos41.insertar((int)(short)1, obj57);
    listaSobreArreglos41.eliminar(0);
    java.lang.String str61 = listaSobreArreglos41.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos6.insertar(6, (java.lang.Object)str61);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "]"+ "'", str42.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "[[10.0null,]"+ "'", str54.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "]"+ "'", str61.equals("]"));

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test312"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    java.lang.String str9 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)10.0f);
    java.lang.Object obj15 = null;
    listaSobreArreglos10.insertar(obj15);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    java.lang.String str19 = listaSobreArreglos10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[10.0null,]"+ "'", str19.equals("[10.0null,]"));

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test313"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    int i16 = listaSobreArreglos0.longitud();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.Object obj19 = listaSobreArreglos0.obtener((int)(short)1);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj19);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test314"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    int i5 = listaSobreArreglos0.longitud();
    java.lang.String str6 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = listaSobreArreglos0.obtener(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test315"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj3 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test316"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    int i6 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str8 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test317"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    int i8 = listaSobreArreglos0.longitud();
    int i9 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos11.equals(obj16);
    boolean b18 = listaSobreArreglos11.esVacia();
    java.lang.Object obj19 = null;
    boolean b20 = listaSobreArreglos11.equals(obj19);
    java.lang.String str21 = listaSobreArreglos11.toString();
    java.lang.Object obj23 = null;
    listaSobreArreglos11.insertar(0, obj23);
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos11.equals(obj25);
    int i27 = listaSobreArreglos11.longitud();
    int i28 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj31 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)' ', obj31);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[-]"+ "'", str21.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 2);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test318"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    java.lang.String str9 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)10.0f);
    java.lang.Object obj15 = null;
    listaSobreArreglos10.insertar(obj15);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    java.lang.Object obj25 = null;
    listaSobreArreglos21.insertar(obj25);
    listaSobreArreglos0.insertar(0, obj25);
    java.lang.String str28 = listaSobreArreglos0.toString();
    boolean b29 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null,]"+ "'", str28.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test319"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.String str18 = listaSobreArreglos0.toString();
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b25 = listaSobreArreglos21.equals((java.lang.Object)1);
    java.lang.Object obj26 = null;
    listaSobreArreglos21.insertar(obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    java.lang.String str29 = listaSobreArreglos28.toString();
    boolean b30 = listaSobreArreglos28.esVacia();
    int i31 = listaSobreArreglos28.longitud();
    java.lang.String str32 = listaSobreArreglos28.toString();
    int i33 = listaSobreArreglos28.longitud();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos28);
    java.lang.Object obj35 = null;
    boolean b36 = listaSobreArreglos21.equals(obj35);
    int i37 = listaSobreArreglos21.longitud();
    int i38 = listaSobreArreglos21.longitud();
    java.lang.Object obj40 = listaSobreArreglos21.obtener((int)(short)1);
    listaSobreArreglos0.insertar(obj40);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos44 = new listas.ListaSobreArreglos();
    java.lang.String str45 = listaSobreArreglos44.toString();
    boolean b46 = listaSobreArreglos44.esVacia();
    listaSobreArreglos44.insertar((java.lang.Object)(short)-1);
    boolean b49 = listaSobreArreglos44.esVacia();
    boolean b50 = listaSobreArreglos44.esVacia();
    java.lang.Object obj51 = null;
    listaSobreArreglos44.insertar(obj51);
    java.lang.Object obj53 = new java.lang.Object();
    boolean b54 = listaSobreArreglos44.equals(obj53);
    listas.ListaSobreArreglos listaSobreArreglos55 = new listas.ListaSobreArreglos();
    int i56 = listaSobreArreglos55.longitud();
    boolean b57 = listaSobreArreglos55.esVacia();
    boolean b59 = listaSobreArreglos55.equals((java.lang.Object)1);
    java.lang.String str60 = listaSobreArreglos55.toString();
    listaSobreArreglos55.insertar(0, (java.lang.Object)10.0d);
    listas.ListaSobreArreglos listaSobreArreglos64 = new listas.ListaSobreArreglos();
    java.lang.String str65 = listaSobreArreglos64.toString();
    boolean b66 = listaSobreArreglos64.esVacia();
    int i67 = listaSobreArreglos64.longitud();
    java.lang.String str68 = listaSobreArreglos64.toString();
    int i69 = listaSobreArreglos64.longitud();
    boolean b70 = listaSobreArreglos64.esVacia();
    int i71 = listaSobreArreglos64.longitud();
    java.lang.Object obj72 = null;
    listaSobreArreglos64.insertar(obj72);
    listaSobreArreglos55.insertar((java.lang.Object)listaSobreArreglos64);
    listaSobreArreglos64.vaciar();
    boolean b76 = listaSobreArreglos44.equals((java.lang.Object)listaSobreArreglos64);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(6, (java.lang.Object)listaSobreArreglos64);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "]"+ "'", str60.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "]"+ "'", str65.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "]"+ "'", str68.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test320"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    boolean b25 = listaSobreArreglos11.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    int i27 = listaSobreArreglos26.longitud();
    listaSobreArreglos26.vaciar();
    java.lang.String str29 = listaSobreArreglos26.toString();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    listaSobreArreglos30.vaciar();
    java.lang.String str33 = listaSobreArreglos30.toString();
    boolean b34 = listaSobreArreglos26.equals((java.lang.Object)listaSobreArreglos30);
    boolean b35 = listaSobreArreglos26.esVacia();
    java.lang.String str36 = listaSobreArreglos26.toString();
    listas.ListaSobreArreglos listaSobreArreglos37 = new listas.ListaSobreArreglos();
    int i38 = listaSobreArreglos37.longitud();
    boolean b39 = listaSobreArreglos37.esVacia();
    boolean b41 = listaSobreArreglos37.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    java.lang.String str43 = listaSobreArreglos42.toString();
    boolean b44 = listaSobreArreglos42.esVacia();
    listaSobreArreglos42.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos37.insertar((java.lang.Object)listaSobreArreglos42);
    boolean b48 = listaSobreArreglos37.esVacia();
    int i49 = listaSobreArreglos37.longitud();
    listaSobreArreglos26.insertar((java.lang.Object)listaSobreArreglos37);
    int i51 = listaSobreArreglos37.longitud();
    java.lang.Object obj53 = listaSobreArreglos37.obtener(0);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos37);
    java.lang.Object obj55 = null;
    listaSobreArreglos37.insertar(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "]"+ "'", str36.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj53);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test321"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj7 = null;
    boolean b8 = listaSobreArreglos0.equals(obj7);
    java.lang.Object obj10 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)1, obj10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test322"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    int i25 = listaSobreArreglos11.longitud();
    java.lang.Object obj27 = listaSobreArreglos11.obtener(0);
    java.lang.Object obj29 = null;
    listaSobreArreglos11.insertar(0, obj29);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    java.lang.Object obj34 = null;
    listaSobreArreglos31.insertar(0, obj34);
    java.lang.Object obj37 = listaSobreArreglos31.obtener(0);
    java.lang.Object obj39 = listaSobreArreglos31.obtener(0);
    boolean b40 = listaSobreArreglos31.esVacia();
    boolean b41 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos31);
    java.lang.String str42 = listaSobreArreglos11.toString();
    java.lang.Object obj43 = null;
    listaSobreArreglos11.insertar(obj43);
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    java.lang.String str46 = listaSobreArreglos45.toString();
    boolean b47 = listaSobreArreglos45.esVacia();
    int i48 = listaSobreArreglos45.longitud();
    boolean b49 = listaSobreArreglos45.esVacia();
    int i50 = listaSobreArreglos45.longitud();
    boolean b51 = listaSobreArreglos45.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos52 = new listas.ListaSobreArreglos();
    int i53 = listaSobreArreglos52.longitud();
    boolean b54 = listaSobreArreglos52.esVacia();
    boolean b56 = listaSobreArreglos52.equals((java.lang.Object)1);
    java.lang.Object obj57 = null;
    listaSobreArreglos52.insertar(obj57);
    listas.ListaSobreArreglos listaSobreArreglos59 = new listas.ListaSobreArreglos();
    java.lang.String str60 = listaSobreArreglos59.toString();
    boolean b61 = listaSobreArreglos59.esVacia();
    int i62 = listaSobreArreglos59.longitud();
    java.lang.String str63 = listaSobreArreglos59.toString();
    int i64 = listaSobreArreglos59.longitud();
    listaSobreArreglos52.insertar((java.lang.Object)listaSobreArreglos59);
    listaSobreArreglos52.eliminar(1);
    int i68 = listaSobreArreglos52.longitud();
    boolean b69 = listaSobreArreglos45.equals((java.lang.Object)i68);
    boolean b70 = listaSobreArreglos45.esVacia();
    boolean b71 = listaSobreArreglos11.equals((java.lang.Object)b70);
    java.lang.String str72 = listaSobreArreglos11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null, [-]"+ "'", str42.equals("[null, [-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "]"+ "'", str60.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "]"+ "'", str63.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[null, [-]null,]"+ "'", str72.equals("[null, [-]null,]"));

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test323"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj6 = null;
    listaSobreArreglos0.insertar(obj6);
    listaSobreArreglos0.vaciar();
    java.lang.String str9 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test324"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    int i15 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    boolean b20 = listaSobreArreglos16.equals((java.lang.Object)1);
    java.lang.String str21 = listaSobreArreglos16.toString();
    listaSobreArreglos16.insertar(0, (java.lang.Object)10.0d);
    boolean b25 = listaSobreArreglos16.esVacia();
    java.lang.String str26 = listaSobreArreglos16.toString();
    boolean b27 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos16);
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10.]"+ "'", str26.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test325"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    java.lang.Object obj24 = null;
    listaSobreArreglos17.insertar(obj24);
    listaSobreArreglos17.vaciar();
    int i27 = listaSobreArreglos17.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos17.eliminar((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test326"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)(short)-1);
    boolean b18 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos13);
    listaSobreArreglos13.vaciar();
    java.lang.String str23 = listaSobreArreglos13.toString();
    java.lang.String str24 = listaSobreArreglos13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test327"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    java.lang.Object obj18 = null;
    listaSobreArreglos15.insertar(0, obj18);
    boolean b20 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos15);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    boolean b25 = listaSobreArreglos22.esVacia();
    java.lang.String str26 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    listaSobreArreglos27.vaciar();
    java.lang.String str30 = listaSobreArreglos27.toString();
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    listaSobreArreglos31.vaciar();
    java.lang.String str34 = listaSobreArreglos31.toString();
    boolean b35 = listaSobreArreglos27.equals((java.lang.Object)listaSobreArreglos31);
    boolean b36 = listaSobreArreglos27.esVacia();
    listaSobreArreglos27.vaciar();
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos15.insertar(0, (java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos15.vaciar();
    java.lang.String str41 = listaSobreArreglos15.toString();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    java.lang.Object obj45 = null;
    listaSobreArreglos42.insertar(0, obj45);
    java.lang.String str47 = listaSobreArreglos42.toString();
    listaSobreArreglos42.eliminar(0);
    boolean b50 = listaSobreArreglos42.esVacia();
    java.lang.Object obj52 = null;
    listaSobreArreglos42.insertar(0, obj52);
    listas.ListaSobreArreglos listaSobreArreglos54 = new listas.ListaSobreArreglos();
    java.lang.String str55 = listaSobreArreglos54.toString();
    boolean b56 = listaSobreArreglos54.esVacia();
    listaSobreArreglos54.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj59 = null;
    boolean b60 = listaSobreArreglos54.equals(obj59);
    boolean b61 = listaSobreArreglos54.esVacia();
    java.lang.Object obj62 = null;
    boolean b63 = listaSobreArreglos54.equals(obj62);
    boolean b65 = listaSobreArreglos54.equals((java.lang.Object)(short)100);
    boolean b66 = listaSobreArreglos54.esVacia();
    boolean b67 = listaSobreArreglos42.equals((java.lang.Object)listaSobreArreglos54);
    java.lang.String str68 = listaSobreArreglos42.toString();
    listaSobreArreglos15.insertar((java.lang.Object)str68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "[null,]"+ "'", str47.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "]"+ "'", str55.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "[null,]"+ "'", str68.equals("[null,]"));

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test328"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listaSobreArreglos0.vaciar();
    java.lang.String str9 = listaSobreArreglos0.toString();
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'a', obj12);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test329"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    int i6 = listaSobreArreglos0.longitud();
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = listaSobreArreglos0.obtener((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test330"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.eliminar(0);
    int i15 = listaSobreArreglos0.longitud();
    java.lang.String str16 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test331"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    java.lang.String str9 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)10.0f);
    java.lang.Object obj15 = null;
    listaSobreArreglos10.insertar(obj15);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj20 = null;
    listaSobreArreglos0.insertar(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test332"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    boolean b6 = listaSobreArreglos0.esVacia();
    int i7 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    listaSobreArreglos8.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos8.equals(obj13);
    listaSobreArreglos8.insertar((java.lang.Object)0);
    listaSobreArreglos8.vaciar();
    boolean b18 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos8);
    java.lang.Object obj20 = null;
    listaSobreArreglos8.insertar(0, obj20);
    listaSobreArreglos8.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)10.0f);
    java.lang.Object obj29 = null;
    listaSobreArreglos24.insertar(obj29);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    java.lang.String str32 = listaSobreArreglos31.toString();
    boolean b33 = listaSobreArreglos31.esVacia();
    listaSobreArreglos31.insertar((java.lang.Object)(short)-1);
    boolean b36 = listaSobreArreglos24.equals((java.lang.Object)(short)-1);
    listaSobreArreglos24.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    int i40 = listaSobreArreglos39.longitud();
    listaSobreArreglos39.vaciar();
    java.lang.String str42 = listaSobreArreglos39.toString();
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    int i44 = listaSobreArreglos43.longitud();
    listaSobreArreglos43.vaciar();
    java.lang.String str46 = listaSobreArreglos43.toString();
    boolean b47 = listaSobreArreglos39.equals((java.lang.Object)listaSobreArreglos43);
    boolean b48 = listaSobreArreglos39.esVacia();
    java.lang.String str49 = listaSobreArreglos39.toString();
    listas.ListaSobreArreglos listaSobreArreglos50 = new listas.ListaSobreArreglos();
    int i51 = listaSobreArreglos50.longitud();
    boolean b52 = listaSobreArreglos50.esVacia();
    boolean b54 = listaSobreArreglos50.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos55 = new listas.ListaSobreArreglos();
    java.lang.String str56 = listaSobreArreglos55.toString();
    boolean b57 = listaSobreArreglos55.esVacia();
    listaSobreArreglos55.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos50.insertar((java.lang.Object)listaSobreArreglos55);
    boolean b61 = listaSobreArreglos50.esVacia();
    int i62 = listaSobreArreglos50.longitud();
    listaSobreArreglos39.insertar((java.lang.Object)listaSobreArreglos50);
    int i64 = listaSobreArreglos50.longitud();
    java.lang.Object obj66 = listaSobreArreglos50.obtener(0);
    java.lang.Object obj68 = null;
    listaSobreArreglos50.insertar(0, obj68);
    listas.ListaSobreArreglos listaSobreArreglos70 = new listas.ListaSobreArreglos();
    int i71 = listaSobreArreglos70.longitud();
    java.lang.Object obj73 = null;
    listaSobreArreglos70.insertar(0, obj73);
    java.lang.Object obj76 = listaSobreArreglos70.obtener(0);
    java.lang.Object obj78 = listaSobreArreglos70.obtener(0);
    boolean b79 = listaSobreArreglos70.esVacia();
    boolean b80 = listaSobreArreglos50.equals((java.lang.Object)listaSobreArreglos70);
    java.lang.String str81 = listaSobreArreglos50.toString();
    listaSobreArreglos50.vaciar();
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos50);
    boolean b84 = listaSobreArreglos24.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos8.insertar(10, (java.lang.Object)b84);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "]"+ "'", str42.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "]"+ "'", str49.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "]"+ "'", str56.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "[null, [-]"+ "'", str81.equals("[null, [-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test333"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    int i25 = listaSobreArreglos11.longitud();
    java.lang.Object obj27 = listaSobreArreglos11.obtener(0);
    java.lang.Object obj29 = null;
    listaSobreArreglos11.insertar(0, obj29);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    java.lang.Object obj34 = null;
    listaSobreArreglos31.insertar(0, obj34);
    java.lang.Object obj37 = listaSobreArreglos31.obtener(0);
    java.lang.Object obj39 = listaSobreArreglos31.obtener(0);
    boolean b40 = listaSobreArreglos31.esVacia();
    boolean b41 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos31);
    java.lang.String str42 = listaSobreArreglos11.toString();
    boolean b43 = listaSobreArreglos11.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos44 = new listas.ListaSobreArreglos();
    boolean b45 = listaSobreArreglos44.esVacia();
    boolean b46 = listaSobreArreglos44.esVacia();
    boolean b47 = listaSobreArreglos44.esVacia();
    java.lang.Object obj48 = null;
    listaSobreArreglos44.insertar(obj48);
    listaSobreArreglos44.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos51 = new listas.ListaSobreArreglos();
    java.lang.String str52 = listaSobreArreglos51.toString();
    boolean b53 = listaSobreArreglos51.esVacia();
    listaSobreArreglos51.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj56 = null;
    boolean b57 = listaSobreArreglos51.equals(obj56);
    listaSobreArreglos51.vaciar();
    int i59 = listaSobreArreglos51.longitud();
    boolean b60 = listaSobreArreglos44.equals((java.lang.Object)listaSobreArreglos51);
    listas.ListaSobreArreglos listaSobreArreglos61 = new listas.ListaSobreArreglos();
    boolean b62 = listaSobreArreglos61.esVacia();
    boolean b63 = listaSobreArreglos61.esVacia();
    boolean b64 = listaSobreArreglos61.esVacia();
    listaSobreArreglos61.vaciar();
    listaSobreArreglos61.vaciar();
    listaSobreArreglos44.insertar((java.lang.Object)listaSobreArreglos61);
    int i68 = listaSobreArreglos44.longitud();
    boolean b69 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos44);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos44.eliminar(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null, [-]"+ "'", str42.equals("[null, [-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "]"+ "'", str52.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test334"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.String str13 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = listaSobreArreglos0.obtener((int)(short)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test335"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj12 = null;
    listaSobreArreglos0.insertar(0, obj12);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    int i20 = listaSobreArreglos17.longitud();
    java.lang.String str21 = listaSobreArreglos17.toString();
    int i22 = listaSobreArreglos17.longitud();
    int i23 = listaSobreArreglos17.longitud();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    java.lang.String str28 = listaSobreArreglos24.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    boolean b34 = listaSobreArreglos29.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos29);
    boolean b36 = listaSobreArreglos24.esVacia();
    java.lang.Object obj37 = null;
    listaSobreArreglos24.insertar(obj37);
    listaSobreArreglos24.vaciar();
    boolean b40 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    java.lang.String str43 = listaSobreArreglos17.toString();
    listaSobreArreglos17.vaciar();
    int i45 = listaSobreArreglos17.longitud();
    boolean b46 = listaSobreArreglos17.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj48 = listaSobreArreglos17.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[-]"+ "'", str10.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test336"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.String str14 = listaSobreArreglos7.toString();
    listaSobreArreglos7.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = listaSobreArreglos7.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test337"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    java.lang.String str28 = listaSobreArreglos27.toString();
    boolean b29 = listaSobreArreglos27.esVacia();
    int i30 = listaSobreArreglos27.longitud();
    java.lang.String str31 = listaSobreArreglos27.toString();
    int i32 = listaSobreArreglos27.longitud();
    listaSobreArreglos20.insertar((java.lang.Object)listaSobreArreglos27);
    java.lang.Object obj34 = null;
    listaSobreArreglos27.insertar(obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)10.0f);
    int i41 = listaSobreArreglos36.longitud();
    boolean b42 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.vaciar();
    java.lang.Object obj44 = null;
    listaSobreArreglos36.insertar(obj44);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    java.lang.String str47 = listaSobreArreglos46.toString();
    boolean b48 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.insertar((java.lang.Object)(short)-1);
    boolean b51 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.eliminar(0);
    java.lang.String str54 = listaSobreArreglos46.toString();
    boolean b55 = listaSobreArreglos46.esVacia();
    boolean b56 = listaSobreArreglos46.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)b56);
    listaSobreArreglos27.insertar((java.lang.Object)listaSobreArreglos36);
    listaSobreArreglos27.vaciar();
    boolean b60 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos27);
    listas.ListaSobreArreglos listaSobreArreglos62 = new listas.ListaSobreArreglos();
    int i63 = listaSobreArreglos62.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos62);
    boolean b65 = listaSobreArreglos62.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "]"+ "'", str54.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test338"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listaSobreArreglos0.vaciar();
    java.lang.String str9 = listaSobreArreglos0.toString();
    boolean b10 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj12 = listaSobreArreglos0.obtener((int)(short)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test339"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    boolean b6 = listaSobreArreglos0.esVacia();
    int i7 = listaSobreArreglos0.longitud();
    java.lang.Object obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)-1, obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test340"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    listaSobreArreglos0.eliminar((int)(byte)0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = listaSobreArreglos0.obtener((int)'#');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test341"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    int i2 = listaSobreArreglos0.longitud();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj7 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)100, obj7);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test342"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test343"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    listaSobreArreglos11.vaciar();
    java.lang.String str14 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    listaSobreArreglos15.vaciar();
    java.lang.String str18 = listaSobreArreglos15.toString();
    boolean b19 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos15);
    boolean b20 = listaSobreArreglos11.esVacia();
    java.lang.String str21 = listaSobreArreglos11.toString();
    boolean b22 = listaSobreArreglos11.esVacia();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos11);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj25 = listaSobreArreglos0.obtener((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test344"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos5.insertar(0, obj9);
    boolean b11 = listaSobreArreglos0.equals(obj9);
    java.lang.String str12 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj14 = listaSobreArreglos0.obtener(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test345"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)10.0f);
    java.lang.Object obj15 = null;
    listaSobreArreglos10.insertar(obj15);
    java.lang.String str17 = listaSobreArreglos10.toString();
    java.lang.Object obj19 = null;
    listaSobreArreglos10.insertar(0, obj19);
    java.lang.Object obj21 = null;
    listaSobreArreglos10.insertar(obj21);
    int i23 = listaSobreArreglos10.longitud();
    java.lang.Object obj24 = null;
    boolean b25 = listaSobreArreglos10.equals(obj24);
    listaSobreArreglos10.eliminar(0);
    boolean b28 = listaSobreArreglos0.equals((java.lang.Object)0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[10.0null,]"+ "'", str17.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test346"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    int i7 = listaSobreArreglos0.longitud();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test347"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test348"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'4', obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test349"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos0.insertar((int)(short)1, obj16);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str20 = listaSobreArreglos0.toString();
    int i21 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos22.equals(obj25);
    int i27 = listaSobreArreglos22.longitud();
    boolean b28 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj29 = null;
    listaSobreArreglos0.insertar(obj29);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test350"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    int i13 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)10.0f);
    java.lang.Object obj19 = null;
    listaSobreArreglos14.insertar(obj19);
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    java.lang.String str22 = listaSobreArreglos21.toString();
    boolean b23 = listaSobreArreglos21.esVacia();
    listaSobreArreglos21.insertar((java.lang.Object)(short)-1);
    boolean b26 = listaSobreArreglos14.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)b26);
    listaSobreArreglos0.vaciar();
    java.lang.String str29 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 10.0d+ "'", obj12.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "]"+ "'", str29.equals("]"));

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test351"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    boolean b15 = listaSobreArreglos13.esVacia();
    boolean b17 = listaSobreArreglos13.equals((java.lang.Object)1);
    java.lang.Object obj18 = null;
    listaSobreArreglos13.insertar(obj18);
    int i20 = listaSobreArreglos13.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos13);
    boolean b22 = listaSobreArreglos13.esVacia();
    int i23 = listaSobreArreglos13.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj25 = listaSobreArreglos13.obtener((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test352"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    int i4 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test353"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    listaSobreArreglos0.vaciar();
    java.lang.String str14 = listaSobreArreglos0.toString();
    java.lang.String str15 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test354"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos0.insertar((int)(short)1, obj16);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str20 = listaSobreArreglos0.toString();
    int i21 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    java.lang.Object obj25 = null;
    boolean b26 = listaSobreArreglos22.equals(obj25);
    int i27 = listaSobreArreglos22.longitud();
    boolean b28 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    int i29 = listaSobreArreglos0.longitud();
    java.lang.Object obj30 = null;
    listaSobreArreglos0.insertar(obj30);
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test355"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos7.equals(obj9);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    boolean b12 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test356"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    java.lang.String str9 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    java.lang.String str16 = listaSobreArreglos12.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    java.lang.Object obj20 = null;
    boolean b21 = listaSobreArreglos17.equals(obj20);
    listaSobreArreglos12.insertar((java.lang.Object)b21);
    int i23 = listaSobreArreglos12.longitud();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    listaSobreArreglos24.vaciar();
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos24);
    java.lang.Object obj30 = null;
    listaSobreArreglos24.insertar(0, obj30);
    int i32 = listaSobreArreglos24.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[-1]"+ "'", str9.equals("[-1]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test357"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    java.lang.Object obj21 = null;
    listaSobreArreglos17.insertar(obj21);
    listaSobreArreglos17.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos24.equals(obj29);
    listaSobreArreglos24.vaciar();
    int i32 = listaSobreArreglos24.longitud();
    boolean b33 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos24);
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    boolean b35 = listaSobreArreglos34.esVacia();
    boolean b36 = listaSobreArreglos34.esVacia();
    boolean b37 = listaSobreArreglos34.esVacia();
    listaSobreArreglos34.vaciar();
    listaSobreArreglos34.vaciar();
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos34);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos17);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos17.eliminar((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test358"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos11.equals(obj16);
    listaSobreArreglos11.insertar((java.lang.Object)0);
    listaSobreArreglos11.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    java.lang.String str25 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    boolean b27 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.vaciar();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos26.equals(obj29);
    listaSobreArreglos21.insertar((java.lang.Object)b30);
    int i32 = listaSobreArreglos21.longitud();
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    int i34 = listaSobreArreglos33.longitud();
    listaSobreArreglos33.vaciar();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos33);
    boolean b37 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos4.insertar((java.lang.Object)listaSobreArreglos11);
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    listaSobreArreglos39.vaciar();
    java.lang.String str41 = listaSobreArreglos39.toString();
    java.lang.Object obj42 = null;
    listaSobreArreglos39.insertar(obj42);
    listaSobreArreglos39.eliminar(0);
    java.lang.String str46 = listaSobreArreglos39.toString();
    java.lang.Object obj47 = null;
    listaSobreArreglos39.insertar(obj47);
    java.lang.Object obj50 = listaSobreArreglos39.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos51 = new listas.ListaSobreArreglos();
    java.lang.String str52 = listaSobreArreglos51.toString();
    boolean b53 = listaSobreArreglos51.esVacia();
    java.lang.Object obj55 = null;
    listaSobreArreglos51.insertar(0, obj55);
    java.lang.String str57 = listaSobreArreglos51.toString();
    boolean b58 = listaSobreArreglos51.esVacia();
    listaSobreArreglos51.eliminar(0);
    java.lang.Object obj61 = null;
    listaSobreArreglos51.insertar(obj61);
    listaSobreArreglos39.insertar((java.lang.Object)listaSobreArreglos51);
    listaSobreArreglos4.insertar((java.lang.Object)listaSobreArreglos39);
    java.lang.Object obj65 = null;
    listaSobreArreglos39.insertar(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "]"+ "'", str52.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[null,]"+ "'", str57.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test359"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    java.lang.String str9 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    boolean b12 = listaSobreArreglos10.esVacia();
    listaSobreArreglos10.insertar((java.lang.Object)10.0f);
    java.lang.Object obj15 = null;
    listaSobreArreglos10.insertar(obj15);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj21 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test360"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    boolean b23 = listaSobreArreglos11.esVacia();
    java.lang.Object obj25 = listaSobreArreglos11.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    int i27 = listaSobreArreglos26.longitud();
    java.lang.Object obj29 = null;
    listaSobreArreglos26.insertar(0, obj29);
    boolean b31 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos26);
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    boolean b34 = listaSobreArreglos33.esVacia();
    boolean b35 = listaSobreArreglos33.esVacia();
    boolean b36 = listaSobreArreglos33.esVacia();
    java.lang.String str37 = listaSobreArreglos33.toString();
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    int i39 = listaSobreArreglos38.longitud();
    listaSobreArreglos38.vaciar();
    java.lang.String str41 = listaSobreArreglos38.toString();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    listaSobreArreglos42.vaciar();
    java.lang.String str45 = listaSobreArreglos42.toString();
    boolean b46 = listaSobreArreglos38.equals((java.lang.Object)listaSobreArreglos42);
    boolean b47 = listaSobreArreglos38.esVacia();
    listaSobreArreglos38.vaciar();
    listaSobreArreglos33.insertar((java.lang.Object)listaSobreArreglos38);
    listaSobreArreglos26.insertar(0, (java.lang.Object)listaSobreArreglos38);
    listaSobreArreglos26.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos26);
    int i53 = listaSobreArreglos26.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test361"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    int i24 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    int i26 = listaSobreArreglos0.longitud();
    int i27 = listaSobreArreglos0.longitud();
    java.lang.Object obj28 = null;
    listaSobreArreglos0.insertar(obj28);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test362"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    int i16 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    int i19 = listaSobreArreglos18.longitud();
    boolean b20 = listaSobreArreglos18.esVacia();
    int i21 = listaSobreArreglos18.longitud();
    int i22 = listaSobreArreglos18.longitud();
    listaSobreArreglos18.vaciar();
    int i24 = listaSobreArreglos18.longitud();
    listaSobreArreglos18.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos18);
    java.lang.Object obj27 = null;
    listaSobreArreglos0.insertar(obj27);
    java.lang.Object obj30 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)10, obj30);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test363"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj6 = null;
    listaSobreArreglos0.insertar(obj6);
    java.lang.String str8 = listaSobreArreglos0.toString();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    listaSobreArreglos11.vaciar();
    java.lang.String str14 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    listaSobreArreglos15.vaciar();
    java.lang.String str18 = listaSobreArreglos15.toString();
    boolean b19 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos15);
    boolean b20 = listaSobreArreglos11.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    listaSobreArreglos21.vaciar();
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos21);
    int i24 = listaSobreArreglos11.longitud();
    java.lang.String str25 = listaSobreArreglos11.toString();
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos11.equals(obj26);
    listaSobreArreglos0.insertar((java.lang.Object)b27);
    int i29 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[null,]"+ "'", str8.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[]"+ "'", str25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 3);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test364"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    listaSobreArreglos0.eliminar((int)(byte)0);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    boolean b19 = listaSobreArreglos14.esVacia();
    boolean b20 = listaSobreArreglos14.esVacia();
    int i21 = listaSobreArreglos14.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj27 = null;
    boolean b28 = listaSobreArreglos22.equals(obj27);
    listaSobreArreglos22.insertar((java.lang.Object)0);
    listaSobreArreglos22.vaciar();
    boolean b32 = listaSobreArreglos14.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj34 = null;
    listaSobreArreglos22.insertar(0, obj34);
    boolean b36 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj37 = null;
    boolean b38 = listaSobreArreglos0.equals(obj37);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test365"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    boolean b13 = listaSobreArreglos0.esVacia();
    int i14 = listaSobreArreglos0.longitud();
    boolean b15 = listaSobreArreglos0.esVacia();
    java.lang.String str16 = listaSobreArreglos0.toString();
    boolean b17 = listaSobreArreglos0.esVacia();
    java.lang.Object obj19 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'4', obj19);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test366"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    boolean b5 = listaSobreArreglos0.esVacia();
    java.lang.String str6 = listaSobreArreglos0.toString();
    int i7 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test367"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj2 = null;
    boolean b3 = listaSobreArreglos0.equals(obj2);
    java.lang.String str4 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test368"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    java.lang.Object obj17 = listaSobreArreglos7.obtener(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos7.obtener(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj17);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test369"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = listaSobreArreglos0.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    java.lang.Object obj18 = null;
    listaSobreArreglos15.insertar(0, obj18);
    boolean b20 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos15);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    boolean b23 = listaSobreArreglos22.esVacia();
    boolean b24 = listaSobreArreglos22.esVacia();
    boolean b25 = listaSobreArreglos22.esVacia();
    java.lang.String str26 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    listaSobreArreglos27.vaciar();
    java.lang.String str30 = listaSobreArreglos27.toString();
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    listaSobreArreglos31.vaciar();
    java.lang.String str34 = listaSobreArreglos31.toString();
    boolean b35 = listaSobreArreglos27.equals((java.lang.Object)listaSobreArreglos31);
    boolean b36 = listaSobreArreglos27.esVacia();
    listaSobreArreglos27.vaciar();
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos15.insertar(0, (java.lang.Object)listaSobreArreglos27);
    boolean b40 = listaSobreArreglos15.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos15.eliminar((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test370"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = listaSobreArreglos0.obtener(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test371"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.insertar((java.lang.Object)(-1.0d));
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listaSobreArreglos15.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj24 = listaSobreArreglos15.obtener(0);
    boolean b25 = listaSobreArreglos15.esVacia();
    java.lang.String str26 = listaSobreArreglos15.toString();
    boolean b27 = listaSobreArreglos15.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos15);
    java.lang.Object obj29 = null;
    listaSobreArreglos15.insertar(obj29);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj32 = listaSobreArreglos15.obtener(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0d+ "'", obj24.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "[10.]"+ "'", str26.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test372"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    listaSobreArreglos0.vaciar();
    java.lang.String str17 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test373"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(6);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test374"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    int i17 = listaSobreArreglos0.longitud();
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    java.lang.String str28 = listaSobreArreglos27.toString();
    boolean b29 = listaSobreArreglos27.esVacia();
    int i30 = listaSobreArreglos27.longitud();
    java.lang.String str31 = listaSobreArreglos27.toString();
    int i32 = listaSobreArreglos27.longitud();
    listaSobreArreglos20.insertar((java.lang.Object)listaSobreArreglos27);
    java.lang.Object obj34 = null;
    listaSobreArreglos27.insertar(obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)10.0f);
    int i41 = listaSobreArreglos36.longitud();
    boolean b42 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.vaciar();
    java.lang.Object obj44 = null;
    listaSobreArreglos36.insertar(obj44);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    java.lang.String str47 = listaSobreArreglos46.toString();
    boolean b48 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.insertar((java.lang.Object)(short)-1);
    boolean b51 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.eliminar(0);
    java.lang.String str54 = listaSobreArreglos46.toString();
    boolean b55 = listaSobreArreglos46.esVacia();
    boolean b56 = listaSobreArreglos46.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)b56);
    listaSobreArreglos27.insertar((java.lang.Object)listaSobreArreglos36);
    listaSobreArreglos27.vaciar();
    boolean b60 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos27);
    listas.ListaSobreArreglos listaSobreArreglos62 = new listas.ListaSobreArreglos();
    int i63 = listaSobreArreglos62.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos62);
    int i65 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "]"+ "'", str54.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 2);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test375"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    int i10 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)10.0f);
    int i17 = listaSobreArreglos12.longitud();
    boolean b18 = listaSobreArreglos12.esVacia();
    java.lang.String str19 = listaSobreArreglos12.toString();
    int i20 = listaSobreArreglos12.longitud();
    boolean b21 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.eliminar(0);
    listaSobreArreglos0.insertar(0, (java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "[10.]"+ "'", str19.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test376"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    int i6 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(short)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test377"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    boolean b20 = listaSobreArreglos0.esVacia();
    int i21 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    java.lang.String str26 = listaSobreArreglos24.toString();
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    boolean b29 = listaSobreArreglos27.esVacia();
    listaSobreArreglos27.insertar((java.lang.Object)10.0f);
    java.lang.Object obj32 = null;
    listaSobreArreglos27.insertar(obj32);
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos27);
    java.lang.Object obj36 = listaSobreArreglos24.obtener(0);
    java.lang.String str37 = listaSobreArreglos24.toString();
    boolean b38 = listaSobreArreglos24.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b38);
    java.lang.Object obj40 = null;
    boolean b41 = listaSobreArreglos0.equals(obj40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "[[10.0null,]"+ "'", str37.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test378"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b6 = listaSobreArreglos0.esVacia();
    boolean b7 = listaSobreArreglos0.esVacia();
    boolean b8 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test379"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    int i9 = listaSobreArreglos0.longitud();
    int i10 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 1);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test380"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    boolean b13 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)10.0f);
    java.lang.Object obj20 = null;
    listaSobreArreglos15.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)(short)-1);
    boolean b27 = listaSobreArreglos15.equals((java.lang.Object)(short)-1);
    boolean b28 = listaSobreArreglos15.esVacia();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos15);
    listaSobreArreglos0.insertar(0, (java.lang.Object)"[-1]");
    boolean b33 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test381"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos11.equals(obj16);
    listaSobreArreglos11.insertar((java.lang.Object)0);
    listaSobreArreglos11.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    java.lang.String str25 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    boolean b27 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.vaciar();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos26.equals(obj29);
    listaSobreArreglos21.insertar((java.lang.Object)b30);
    int i32 = listaSobreArreglos21.longitud();
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    int i34 = listaSobreArreglos33.longitud();
    listaSobreArreglos33.vaciar();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos33);
    boolean b37 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos4.insertar((java.lang.Object)listaSobreArreglos11);
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    listaSobreArreglos39.vaciar();
    java.lang.String str41 = listaSobreArreglos39.toString();
    java.lang.Object obj42 = null;
    listaSobreArreglos39.insertar(obj42);
    listaSobreArreglos39.eliminar(0);
    java.lang.String str46 = listaSobreArreglos39.toString();
    java.lang.Object obj47 = null;
    listaSobreArreglos39.insertar(obj47);
    java.lang.Object obj50 = listaSobreArreglos39.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos51 = new listas.ListaSobreArreglos();
    java.lang.String str52 = listaSobreArreglos51.toString();
    boolean b53 = listaSobreArreglos51.esVacia();
    java.lang.Object obj55 = null;
    listaSobreArreglos51.insertar(0, obj55);
    java.lang.String str57 = listaSobreArreglos51.toString();
    boolean b58 = listaSobreArreglos51.esVacia();
    listaSobreArreglos51.eliminar(0);
    java.lang.Object obj61 = null;
    listaSobreArreglos51.insertar(obj61);
    listaSobreArreglos39.insertar((java.lang.Object)listaSobreArreglos51);
    listaSobreArreglos4.insertar((java.lang.Object)listaSobreArreglos39);
    listas.ListaSobreArreglos listaSobreArreglos65 = new listas.ListaSobreArreglos();
    int i66 = listaSobreArreglos65.longitud();
    boolean b67 = listaSobreArreglos65.esVacia();
    listaSobreArreglos65.insertar((java.lang.Object)10.0f);
    int i70 = listaSobreArreglos65.longitud();
    boolean b71 = listaSobreArreglos65.esVacia();
    int i72 = listaSobreArreglos65.longitud();
    listaSobreArreglos39.insertar((java.lang.Object)i72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "]"+ "'", str52.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[null,]"+ "'", str57.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 1);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test382"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    listaSobreArreglos0.vaciar();
    java.lang.String str11 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test383"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    java.lang.Object obj7 = null;
    listaSobreArreglos4.insertar(0, obj7);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    boolean b11 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test384"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    boolean b20 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test385"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    boolean b14 = listaSobreArreglos0.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos0.insertar((int)(short)1, obj16);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str20 = listaSobreArreglos0.toString();
    java.lang.String str21 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj23 = listaSobreArreglos0.obtener((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test386"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str8 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test387"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i11 = listaSobreArreglos5.longitud();
    listaSobreArreglos5.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test388"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.vaciar();
    java.lang.Object obj13 = null;
    listaSobreArreglos3.insertar(0, obj13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    int i18 = listaSobreArreglos15.longitud();
    boolean b19 = listaSobreArreglos15.esVacia();
    int i20 = listaSobreArreglos15.longitud();
    boolean b21 = listaSobreArreglos15.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    boolean b24 = listaSobreArreglos22.esVacia();
    boolean b26 = listaSobreArreglos22.equals((java.lang.Object)1);
    java.lang.Object obj27 = null;
    listaSobreArreglos22.insertar(obj27);
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    int i32 = listaSobreArreglos29.longitud();
    java.lang.String str33 = listaSobreArreglos29.toString();
    int i34 = listaSobreArreglos29.longitud();
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos29);
    listaSobreArreglos22.eliminar(1);
    int i38 = listaSobreArreglos22.longitud();
    boolean b39 = listaSobreArreglos15.equals((java.lang.Object)i38);
    listaSobreArreglos15.vaciar();
    java.lang.String str41 = listaSobreArreglos15.toString();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    boolean b44 = listaSobreArreglos42.esVacia();
    boolean b46 = listaSobreArreglos42.equals((java.lang.Object)1);
    java.lang.Object obj47 = null;
    listaSobreArreglos42.insertar(obj47);
    listas.ListaSobreArreglos listaSobreArreglos49 = new listas.ListaSobreArreglos();
    java.lang.String str50 = listaSobreArreglos49.toString();
    boolean b51 = listaSobreArreglos49.esVacia();
    int i52 = listaSobreArreglos49.longitud();
    java.lang.String str53 = listaSobreArreglos49.toString();
    int i54 = listaSobreArreglos49.longitud();
    listaSobreArreglos42.insertar((java.lang.Object)listaSobreArreglos49);
    java.lang.Object obj56 = null;
    boolean b57 = listaSobreArreglos42.equals(obj56);
    int i58 = listaSobreArreglos42.longitud();
    int i59 = listaSobreArreglos42.longitud();
    java.lang.Object obj60 = null;
    boolean b61 = listaSobreArreglos42.equals(obj60);
    listaSobreArreglos42.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos64 = new listas.ListaSobreArreglos();
    int i65 = listaSobreArreglos64.longitud();
    boolean b66 = listaSobreArreglos64.esVacia();
    listaSobreArreglos64.insertar((java.lang.Object)10.0f);
    java.lang.Object obj69 = null;
    listaSobreArreglos64.insertar(obj69);
    listas.ListaSobreArreglos listaSobreArreglos71 = new listas.ListaSobreArreglos();
    java.lang.String str72 = listaSobreArreglos71.toString();
    boolean b73 = listaSobreArreglos71.esVacia();
    listaSobreArreglos71.insertar((java.lang.Object)(short)-1);
    boolean b76 = listaSobreArreglos64.equals((java.lang.Object)(short)-1);
    listaSobreArreglos64.vaciar();
    boolean b78 = listaSobreArreglos42.equals((java.lang.Object)listaSobreArreglos64);
    boolean b79 = listaSobreArreglos15.equals((java.lang.Object)b78);
    listaSobreArreglos3.insertar((java.lang.Object)b78);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos3.eliminar((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "]"+ "'", str50.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "]"+ "'", str53.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "]"+ "'", str72.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test389"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b11 = listaSobreArreglos0.esVacia();
    java.lang.String str12 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    boolean b18 = listaSobreArreglos14.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos14.insertar((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj25 = null;
    listaSobreArreglos14.insertar(obj25);
    int i27 = listaSobreArreglos14.longitud();
    java.lang.Object obj28 = null;
    listaSobreArreglos14.insertar(obj28);
    listaSobreArreglos0.insertar((int)(short)1, (java.lang.Object)listaSobreArreglos14);
    java.lang.String str31 = listaSobreArreglos0.toString();
    java.lang.Object obj33 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, obj33);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[[-]"+ "'", str12.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[[-][[-]null, null,]"+ "'", str31.equals("[[-][[-]null, null,]"));

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test390"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    boolean b5 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test391"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    java.lang.Object obj12 = null;
    listaSobreArreglos7.insertar(obj12);
    int i14 = listaSobreArreglos7.longitud();
    boolean b15 = listaSobreArreglos7.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)-1, (java.lang.Object)b15);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test392"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos11.vaciar();
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos11.equals(obj26);
    int i28 = listaSobreArreglos11.longitud();
    boolean b29 = listaSobreArreglos11.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test393"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    boolean b20 = listaSobreArreglos0.esVacia();
    int i21 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)(short)-1);
    boolean b27 = listaSobreArreglos22.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    int i29 = listaSobreArreglos28.longitud();
    listaSobreArreglos28.vaciar();
    java.lang.String str31 = listaSobreArreglos28.toString();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    int i33 = listaSobreArreglos32.longitud();
    listaSobreArreglos32.vaciar();
    java.lang.String str35 = listaSobreArreglos32.toString();
    boolean b36 = listaSobreArreglos28.equals((java.lang.Object)listaSobreArreglos32);
    boolean b37 = listaSobreArreglos28.esVacia();
    boolean b38 = listaSobreArreglos22.equals((java.lang.Object)listaSobreArreglos28);
    java.lang.String str39 = listaSobreArreglos28.toString();
    boolean b40 = listaSobreArreglos28.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b40);
    java.lang.Object obj42 = null;
    boolean b43 = listaSobreArreglos0.equals(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "]"+ "'", str39.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test394"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    boolean b14 = listaSobreArreglos0.equals(obj13);
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj17 = listaSobreArreglos0.obtener((int)'4');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test395"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    boolean b7 = listaSobreArreglos6.esVacia();
    boolean b8 = listaSobreArreglos6.esVacia();
    boolean b9 = listaSobreArreglos6.esVacia();
    java.lang.String str10 = listaSobreArreglos6.toString();
    listaSobreArreglos6.vaciar();
    boolean b13 = listaSobreArreglos6.equals((java.lang.Object)(short)100);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos6.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test396"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listaSobreArreglos15.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj24 = listaSobreArreglos15.obtener(0);
    boolean b25 = listaSobreArreglos15.esVacia();
    java.lang.Object obj27 = listaSobreArreglos15.obtener(0);
    int i28 = listaSobreArreglos15.longitud();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    int i30 = listaSobreArreglos29.longitud();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)10.0f);
    java.lang.Object obj34 = null;
    listaSobreArreglos29.insertar(obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    boolean b41 = listaSobreArreglos29.equals((java.lang.Object)(short)-1);
    listaSobreArreglos15.insertar((java.lang.Object)b41);
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    boolean b44 = listaSobreArreglos43.esVacia();
    boolean b45 = listaSobreArreglos43.esVacia();
    java.lang.Object obj46 = null;
    boolean b47 = listaSobreArreglos43.equals(obj46);
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos43);
    boolean b49 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos43);
    java.lang.String str50 = listaSobreArreglos43.toString();
    boolean b51 = listaSobreArreglos43.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj53 = listaSobreArreglos43.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0d+ "'", obj24.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0d+ "'", obj27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "]"+ "'", str50.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test397"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    java.lang.String str11 = listaSobreArreglos10.toString();
    java.lang.String str12 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)10.0f);
    java.lang.Object obj18 = null;
    listaSobreArreglos13.insertar(obj18);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos13);
    java.lang.Object obj21 = null;
    listaSobreArreglos13.insertar(obj21);
    listas.ListaSobreArreglos listaSobreArreglos23 = new listas.ListaSobreArreglos();
    boolean b24 = listaSobreArreglos23.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)b24);
    java.lang.Object obj27 = listaSobreArreglos13.obtener(0);
    java.lang.Object obj29 = listaSobreArreglos13.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    int i34 = listaSobreArreglos33.longitud();
    boolean b35 = listaSobreArreglos33.esVacia();
    int i36 = listaSobreArreglos33.longitud();
    listaSobreArreglos31.insertar((java.lang.Object)i36);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    java.lang.Object obj39 = null;
    listaSobreArreglos38.insertar(obj39);
    listaSobreArreglos31.insertar(obj39);
    listaSobreArreglos13.insertar(0, obj39);
    int i43 = listaSobreArreglos13.longitud();
    boolean b44 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos13);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    int i47 = listaSobreArreglos46.longitud();
    boolean b48 = listaSobreArreglos46.esVacia();
    boolean b50 = listaSobreArreglos46.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos51 = new listas.ListaSobreArreglos();
    java.lang.String str52 = listaSobreArreglos51.toString();
    boolean b53 = listaSobreArreglos51.esVacia();
    listaSobreArreglos51.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos46.insertar((java.lang.Object)listaSobreArreglos51);
    boolean b57 = listaSobreArreglos46.esVacia();
    int i58 = listaSobreArreglos46.longitud();
    listas.ListaSobreArreglos listaSobreArreglos59 = new listas.ListaSobreArreglos();
    java.lang.String str60 = listaSobreArreglos59.toString();
    boolean b61 = listaSobreArreglos59.esVacia();
    listaSobreArreglos59.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj64 = null;
    boolean b65 = listaSobreArreglos59.equals(obj64);
    boolean b66 = listaSobreArreglos59.esVacia();
    listaSobreArreglos59.eliminar(0);
    listaSobreArreglos46.insertar((java.lang.Object)listaSobreArreglos59);
    listas.ListaSobreArreglos listaSobreArreglos70 = new listas.ListaSobreArreglos();
    int i71 = listaSobreArreglos70.longitud();
    boolean b72 = listaSobreArreglos70.esVacia();
    boolean b74 = listaSobreArreglos70.equals((java.lang.Object)1);
    listaSobreArreglos70.insertar(0, (java.lang.Object)10.0d);
    boolean b78 = listaSobreArreglos46.equals((java.lang.Object)0);
    listaSobreArreglos13.insertar(0, (java.lang.Object)0);
    listaSobreArreglos13.vaciar();
    java.lang.Object obj82 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos13.insertar((int)(short)100, obj82);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0f+ "'", obj27.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 10.0f+ "'", obj29.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "]"+ "'", str52.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "]"+ "'", str60.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test398"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test399"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos5.insertar(0, obj9);
    boolean b11 = listaSobreArreglos0.equals(obj9);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test400"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    listaSobreArreglos10.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    int i13 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str15 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    int i18 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    java.lang.String str20 = listaSobreArreglos17.toString();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    listaSobreArreglos21.vaciar();
    java.lang.String str24 = listaSobreArreglos21.toString();
    boolean b25 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos17.vaciar();
    boolean b27 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos17);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = listaSobreArreglos17.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test401"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)10.0f);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.String str14 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    java.lang.Object obj20 = null;
    listaSobreArreglos15.insertar(obj20);
    boolean b22 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos15);
    java.lang.String str23 = listaSobreArreglos0.toString();
    java.lang.String str24 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]"+ "'", str23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[]"+ "'", str24.equals("[]"));

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test402"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    int i10 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)10.0f);
    java.lang.Object obj17 = null;
    listaSobreArreglos12.insertar(obj17);
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos12.equals((java.lang.Object)(short)-1);
    boolean b25 = listaSobreArreglos12.esVacia();
    boolean b26 = listaSobreArreglos12.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    listaSobreArreglos27.vaciar();
    java.lang.String str30 = listaSobreArreglos27.toString();
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    listaSobreArreglos31.vaciar();
    java.lang.String str34 = listaSobreArreglos31.toString();
    boolean b35 = listaSobreArreglos27.equals((java.lang.Object)listaSobreArreglos31);
    boolean b36 = listaSobreArreglos27.esVacia();
    java.lang.String str37 = listaSobreArreglos27.toString();
    java.lang.Object obj38 = null;
    boolean b39 = listaSobreArreglos27.equals(obj38);
    boolean b40 = listaSobreArreglos27.esVacia();
    int i41 = listaSobreArreglos27.longitud();
    boolean b42 = listaSobreArreglos27.esVacia();
    boolean b43 = listaSobreArreglos12.equals((java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos27.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)1, (java.lang.Object)listaSobreArreglos27);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test403"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    boolean b10 = listaSobreArreglos8.esVacia();
    boolean b12 = listaSobreArreglos8.equals((java.lang.Object)1);
    java.lang.Object obj13 = null;
    listaSobreArreglos8.insertar(obj13);
    listaSobreArreglos0.insertar(0, obj13);
    java.lang.String str16 = listaSobreArreglos0.toString();
    java.lang.String str17 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos0.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[null,]"+ "'", str16.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "[null,]"+ "'", str17.equals("[null,]"));

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test404"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str14 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test405"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b11 = listaSobreArreglos0.equals((java.lang.Object)(short)100);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(obj16);
    listaSobreArreglos12.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj24 = null;
    boolean b25 = listaSobreArreglos19.equals(obj24);
    listaSobreArreglos19.vaciar();
    int i27 = listaSobreArreglos19.longitud();
    boolean b28 = listaSobreArreglos12.equals((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj29 = null;
    listaSobreArreglos19.insertar(obj29);
    listaSobreArreglos19.vaciar();
    boolean b32 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos19);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos19.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test406"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    int i24 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    int i26 = listaSobreArreglos0.longitud();
    int i27 = listaSobreArreglos0.longitud();
    java.lang.Object obj28 = null;
    listaSobreArreglos0.insertar(obj28);
    int i30 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test407"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.eliminar(0);
    boolean b8 = listaSobreArreglos0.esVacia();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    listaSobreArreglos0.eliminar((int)(byte)0);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    boolean b19 = listaSobreArreglos14.esVacia();
    boolean b20 = listaSobreArreglos14.esVacia();
    int i21 = listaSobreArreglos14.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj27 = null;
    boolean b28 = listaSobreArreglos22.equals(obj27);
    listaSobreArreglos22.insertar((java.lang.Object)0);
    listaSobreArreglos22.vaciar();
    boolean b32 = listaSobreArreglos14.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj34 = null;
    listaSobreArreglos22.insertar(0, obj34);
    boolean b36 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj37 = null;
    boolean b38 = listaSobreArreglos0.equals(obj37);
    listaSobreArreglos0.vaciar();
    java.lang.String str40 = listaSobreArreglos0.toString();
    java.lang.Object obj42 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)10, obj42);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "[null,]"+ "'", str5.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "]"+ "'", str40.equals("]"));

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test408"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    boolean b6 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.vaciar();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos5.equals(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)b9);
    java.lang.Object obj11 = null;
    boolean b12 = listaSobreArreglos0.equals(obj11);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test409"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    java.lang.Object obj6 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    int i8 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test410"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    boolean b7 = listaSobreArreglos0.equals((java.lang.Object)(short)100);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test411"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    java.lang.String str2 = listaSobreArreglos0.toString();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(obj3);
    listaSobreArreglos0.eliminar(0);
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(1, (java.lang.Object)"[010.0null,]");
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test412"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b15 = listaSobreArreglos6.esVacia();
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos6.equals(obj16);
    int i18 = listaSobreArreglos6.longitud();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj24 = null;
    boolean b25 = listaSobreArreglos19.equals(obj24);
    boolean b26 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    int i29 = listaSobreArreglos19.longitud();
    boolean b30 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj32 = null;
    listaSobreArreglos6.insertar(0, obj32);
    int i34 = listaSobreArreglos6.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 3);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test413"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    boolean b7 = listaSobreArreglos6.esVacia();
    boolean b8 = listaSobreArreglos6.esVacia();
    boolean b9 = listaSobreArreglos6.esVacia();
    java.lang.String str10 = listaSobreArreglos6.toString();
    listaSobreArreglos6.vaciar();
    boolean b13 = listaSobreArreglos6.equals((java.lang.Object)(short)100);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b15 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test414"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test415"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    java.lang.String str8 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    java.lang.String str11 = listaSobreArreglos10.toString();
    java.lang.String str12 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    boolean b15 = listaSobreArreglos13.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)10.0f);
    java.lang.Object obj18 = null;
    listaSobreArreglos13.insertar(obj18);
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos13);
    java.lang.Object obj22 = listaSobreArreglos10.obtener(0);
    java.lang.String str23 = listaSobreArreglos10.toString();
    boolean b24 = listaSobreArreglos10.esVacia();
    java.lang.Object obj26 = null;
    listaSobreArreglos10.insertar((int)(short)1, obj26);
    boolean b28 = listaSobreArreglos10.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'#', (java.lang.Object)b28);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[10.0null,]"+ "'", str8.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[[10.0null,]"+ "'", str23.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test416"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj13 = listaSobreArreglos0.obtener((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test417"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.Object obj7 = null;
    listaSobreArreglos0.insertar(obj7);
    java.lang.String str9 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.Object obj13 = null;
    listaSobreArreglos10.insertar(obj13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    java.lang.String str21 = listaSobreArreglos20.toString();
    boolean b22 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj26 = null;
    listaSobreArreglos15.insertar(obj26);
    boolean b28 = listaSobreArreglos10.equals((java.lang.Object)listaSobreArreglos15);
    java.lang.Object obj30 = listaSobreArreglos15.obtener(0);
    boolean b31 = listaSobreArreglos0.equals(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[-1null,]"+ "'", str9.equals("[-1null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test418"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i11 = listaSobreArreglos5.longitud();
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos5.equals(obj12);
    java.lang.Object obj15 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.insertar(6, obj15);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test419"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)10.0f);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.String str14 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    java.lang.Object obj20 = null;
    listaSobreArreglos15.insertar(obj20);
    boolean b22 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos15);
    listaSobreArreglos0.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test420"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj12 = null;
    listaSobreArreglos0.insertar(0, obj12);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    int i20 = listaSobreArreglos17.longitud();
    java.lang.String str21 = listaSobreArreglos17.toString();
    int i22 = listaSobreArreglos17.longitud();
    int i23 = listaSobreArreglos17.longitud();
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    java.lang.String str28 = listaSobreArreglos24.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    java.lang.String str30 = listaSobreArreglos29.toString();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)(short)-1);
    boolean b34 = listaSobreArreglos29.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)listaSobreArreglos29);
    boolean b36 = listaSobreArreglos24.esVacia();
    java.lang.Object obj37 = null;
    listaSobreArreglos24.insertar(obj37);
    listaSobreArreglos24.vaciar();
    boolean b40 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    java.lang.String str43 = listaSobreArreglos17.toString();
    listaSobreArreglos17.vaciar();
    int i45 = listaSobreArreglos17.longitud();
    boolean b46 = listaSobreArreglos17.esVacia();
    java.lang.Object obj48 = null;
    listaSobreArreglos17.insertar(0, obj48);
    listaSobreArreglos17.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[-]"+ "'", str10.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "]"+ "'", str30.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "]"+ "'", str43.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test421"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj10 = null;
    listaSobreArreglos0.insertar(0, obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[-1null,]"+ "'", str7.equals("[-1null,]"));

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test422"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    java.lang.Object obj3 = null;
    listaSobreArreglos0.insertar(0, obj3);
    listaSobreArreglos0.eliminar(0);
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)'a');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test423"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    int i7 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    int i9 = listaSobreArreglos0.longitud();
    java.lang.Object obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'a', obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test424"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj18 = null;
    listaSobreArreglos0.insertar(obj18);
    boolean b20 = listaSobreArreglos0.esVacia();
    int i21 = listaSobreArreglos0.longitud();
    boolean b22 = listaSobreArreglos0.esVacia();
    java.lang.String str23 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[]null,]"+ "'", str23.equals("[]null,]"));

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test425"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    boolean b10 = listaSobreArreglos9.esVacia();
    boolean b11 = listaSobreArreglos9.esVacia();
    boolean b12 = listaSobreArreglos9.esVacia();
    java.lang.String str13 = listaSobreArreglos9.toString();
    java.lang.Object obj14 = null;
    listaSobreArreglos9.insertar(obj14);
    int i16 = listaSobreArreglos9.longitud();
    boolean b17 = listaSobreArreglos9.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos9);
    java.lang.Object obj20 = listaSobreArreglos9.obtener(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos9.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj20);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test426"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj17 = null;
    listaSobreArreglos7.insertar(obj17);
    java.lang.Object obj19 = null;
    boolean b20 = listaSobreArreglos7.equals(obj19);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj22 = listaSobreArreglos7.obtener((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test427"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    boolean b5 = listaSobreArreglos0.esVacia();
    java.lang.Object obj6 = null;
    listaSobreArreglos0.insertar(obj6);
    listaSobreArreglos0.vaciar();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    java.lang.String str13 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)10.0f);
    java.lang.Object obj19 = null;
    listaSobreArreglos14.insertar(obj19);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos14);
    java.lang.Object obj23 = listaSobreArreglos11.obtener(0);
    java.lang.String str24 = listaSobreArreglos11.toString();
    boolean b25 = listaSobreArreglos11.esVacia();
    java.lang.Object obj27 = null;
    listaSobreArreglos11.insertar((int)(short)1, obj27);
    listaSobreArreglos11.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(short)1, (java.lang.Object)listaSobreArreglos11);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "[[10.0null,]"+ "'", str24.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test428"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i12 = listaSobreArreglos5.longitud();
    java.lang.Object obj14 = listaSobreArreglos5.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    int i18 = listaSobreArreglos15.longitud();
    java.lang.String str19 = listaSobreArreglos15.toString();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    boolean b21 = listaSobreArreglos20.esVacia();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b23 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.vaciar();
    listaSobreArreglos20.vaciar();
    boolean b26 = listaSobreArreglos15.equals((java.lang.Object)listaSobreArreglos20);
    listas.ListaSobreArreglos listaSobreArreglos27 = new listas.ListaSobreArreglos();
    int i28 = listaSobreArreglos27.longitud();
    java.lang.Object obj30 = null;
    listaSobreArreglos27.insertar(0, obj30);
    java.lang.String str32 = listaSobreArreglos27.toString();
    listaSobreArreglos20.insertar((java.lang.Object)listaSobreArreglos27);
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos27);
    java.lang.String str35 = listaSobreArreglos27.toString();
    java.lang.Object obj36 = null;
    boolean b37 = listaSobreArreglos27.equals(obj36);
    boolean b38 = listaSobreArreglos27.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (short)-1+ "'", obj14.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[null,]"+ "'", str32.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "[null,]"+ "'", str35.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test429"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str8 = listaSobreArreglos0.toString();
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)10.0f);
    int i16 = listaSobreArreglos11.longitud();
    boolean b17 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.vaciar();
    boolean b19 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos11);
    boolean b20 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test430"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    boolean b5 = listaSobreArreglos0.esVacia();
    java.lang.Object obj6 = null;
    listaSobreArreglos0.insertar(obj6);
    listaSobreArreglos0.vaciar();
    int i9 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    int i14 = listaSobreArreglos11.longitud();
    java.lang.String str15 = listaSobreArreglos11.toString();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    boolean b21 = listaSobreArreglos16.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    java.lang.Object obj23 = null;
    boolean b24 = listaSobreArreglos16.equals(obj23);
    boolean b25 = listaSobreArreglos16.esVacia();
    boolean b26 = listaSobreArreglos16.esVacia();
    int i27 = listaSobreArreglos16.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 1);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test431"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    int i19 = listaSobreArreglos18.longitud();
    boolean b20 = listaSobreArreglos18.esVacia();
    boolean b22 = listaSobreArreglos18.equals((java.lang.Object)1);
    java.lang.Object obj23 = null;
    listaSobreArreglos18.insertar(obj23);
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    listaSobreArreglos25.vaciar();
    java.lang.String str28 = listaSobreArreglos25.toString();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    int i30 = listaSobreArreglos29.longitud();
    listaSobreArreglos29.vaciar();
    java.lang.String str32 = listaSobreArreglos29.toString();
    boolean b33 = listaSobreArreglos25.equals((java.lang.Object)listaSobreArreglos29);
    boolean b34 = listaSobreArreglos25.esVacia();
    java.lang.String str35 = listaSobreArreglos25.toString();
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    int i37 = listaSobreArreglos36.longitud();
    boolean b38 = listaSobreArreglos36.esVacia();
    boolean b40 = listaSobreArreglos36.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos41 = new listas.ListaSobreArreglos();
    java.lang.String str42 = listaSobreArreglos41.toString();
    boolean b43 = listaSobreArreglos41.esVacia();
    listaSobreArreglos41.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos36.insertar((java.lang.Object)listaSobreArreglos41);
    boolean b47 = listaSobreArreglos36.esVacia();
    int i48 = listaSobreArreglos36.longitud();
    listaSobreArreglos25.insertar((java.lang.Object)listaSobreArreglos36);
    boolean b50 = listaSobreArreglos25.esVacia();
    java.lang.Object obj51 = null;
    listaSobreArreglos25.insertar(obj51);
    boolean b53 = listaSobreArreglos18.equals((java.lang.Object)listaSobreArreglos25);
    listaSobreArreglos0.insertar((int)(short)1, (java.lang.Object)listaSobreArreglos18);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos57 = new listas.ListaSobreArreglos();
    boolean b58 = listaSobreArreglos57.esVacia();
    java.lang.Object obj59 = null;
    listaSobreArreglos57.insertar(obj59);
    java.lang.Object obj61 = null;
    boolean b62 = listaSobreArreglos57.equals(obj61);
    int i63 = listaSobreArreglos57.longitud();
    java.lang.Object obj64 = null;
    listaSobreArreglos57.insertar(obj64);
    listaSobreArreglos0.insertar(0, obj64);
    listas.ListaSobreArreglos listaSobreArreglos68 = new listas.ListaSobreArreglos();
    int i69 = listaSobreArreglos68.longitud();
    boolean b70 = listaSobreArreglos68.esVacia();
    boolean b72 = listaSobreArreglos68.equals((java.lang.Object)1);
    listaSobreArreglos68.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj77 = listaSobreArreglos68.obtener(0);
    boolean b78 = listaSobreArreglos68.esVacia();
    java.lang.Object obj80 = listaSobreArreglos68.obtener(0);
    int i81 = listaSobreArreglos68.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)' ', (java.lang.Object)listaSobreArreglos68);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "]"+ "'", str42.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 10.0d+ "'", obj77.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj80 + "' != '" + 10.0d+ "'", obj80.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i81 == 1);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test432"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    int i7 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    int i10 = listaSobreArreglos9.longitud();
    listaSobreArreglos9.vaciar();
    java.lang.String str12 = listaSobreArreglos9.toString();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    int i14 = listaSobreArreglos13.longitud();
    listaSobreArreglos13.vaciar();
    java.lang.String str16 = listaSobreArreglos13.toString();
    boolean b17 = listaSobreArreglos9.equals((java.lang.Object)listaSobreArreglos13);
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos13.equals(obj18);
    int i20 = listaSobreArreglos13.longitud();
    java.lang.String str21 = listaSobreArreglos13.toString();
    listaSobreArreglos13.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'4', (java.lang.Object)listaSobreArreglos13);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test433"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    java.lang.Object obj10 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(obj11);
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    java.lang.Object obj20 = null;
    listaSobreArreglos16.insertar(0, obj20);
    java.lang.Object obj23 = listaSobreArreglos16.obtener((int)(short)0);
    listaSobreArreglos0.insertar((java.lang.Object)(short)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.0null,]"+ "'", str7.equals("[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 10.0f+ "'", obj10.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj23);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test434"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar((int)(byte)1, obj26);
    java.lang.String str28 = listaSobreArreglos0.toString();
    int i29 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[[[-]null,]"+ "'", str28.equals("[[[-]null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 2);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test435"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    listaSobreArreglos8.vaciar();
    java.lang.String str11 = listaSobreArreglos8.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    listaSobreArreglos12.vaciar();
    java.lang.String str15 = listaSobreArreglos12.toString();
    boolean b16 = listaSobreArreglos8.equals((java.lang.Object)listaSobreArreglos12);
    boolean b17 = listaSobreArreglos8.esVacia();
    java.lang.String str18 = listaSobreArreglos8.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    boolean b21 = listaSobreArreglos19.esVacia();
    boolean b23 = listaSobreArreglos19.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    java.lang.String str25 = listaSobreArreglos24.toString();
    boolean b26 = listaSobreArreglos24.esVacia();
    listaSobreArreglos24.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos24);
    boolean b30 = listaSobreArreglos19.esVacia();
    int i31 = listaSobreArreglos19.longitud();
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos19);
    int i33 = listaSobreArreglos19.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)i33);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj37 = null;
    listaSobreArreglos0.insertar(0, obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test436"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    java.lang.String str8 = listaSobreArreglos0.toString();
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listaSobreArreglos11.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj20 = listaSobreArreglos11.obtener(0);
    boolean b21 = listaSobreArreglos11.esVacia();
    java.lang.String str22 = listaSobreArreglos11.toString();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos11.eliminar(0);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj27 = listaSobreArreglos11.obtener((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 10.0d+ "'", obj20.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "[10.]"+ "'", str22.equals("[10.]"));

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test437"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos5.equals(obj12);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    java.lang.Object obj20 = null;
    listaSobreArreglos15.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    int i25 = listaSobreArreglos22.longitud();
    java.lang.String str26 = listaSobreArreglos22.toString();
    int i27 = listaSobreArreglos22.longitud();
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos22);
    listaSobreArreglos15.eliminar(1);
    java.lang.Object obj32 = listaSobreArreglos15.obtener(0);
    java.lang.Object obj34 = null;
    listaSobreArreglos15.insertar(0, obj34);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos5.insertar((int)(byte)-1, (java.lang.Object)listaSobreArreglos15);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "]"+ "'", str26.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj32);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test438"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.Object obj7 = null;
    listaSobreArreglos0.insertar(obj7);
    java.lang.Object obj9 = new java.lang.Object();
    boolean b10 = listaSobreArreglos0.equals(obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    java.lang.String str16 = listaSobreArreglos11.toString();
    listaSobreArreglos11.insertar(0, (java.lang.Object)10.0d);
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    java.lang.String str21 = listaSobreArreglos20.toString();
    boolean b22 = listaSobreArreglos20.esVacia();
    int i23 = listaSobreArreglos20.longitud();
    java.lang.String str24 = listaSobreArreglos20.toString();
    int i25 = listaSobreArreglos20.longitud();
    boolean b26 = listaSobreArreglos20.esVacia();
    int i27 = listaSobreArreglos20.longitud();
    java.lang.Object obj28 = null;
    listaSobreArreglos20.insertar(obj28);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos20);
    listaSobreArreglos20.vaciar();
    boolean b32 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos20);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj34 = listaSobreArreglos20.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test439"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos11.equals(obj16);
    listaSobreArreglos11.insertar((java.lang.Object)0);
    listaSobreArreglos11.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    boolean b22 = listaSobreArreglos21.esVacia();
    boolean b23 = listaSobreArreglos21.esVacia();
    boolean b24 = listaSobreArreglos21.esVacia();
    java.lang.String str25 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    boolean b27 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.vaciar();
    java.lang.Object obj29 = null;
    boolean b30 = listaSobreArreglos26.equals(obj29);
    listaSobreArreglos21.insertar((java.lang.Object)b30);
    int i32 = listaSobreArreglos21.longitud();
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    int i34 = listaSobreArreglos33.longitud();
    listaSobreArreglos33.vaciar();
    listaSobreArreglos21.insertar((java.lang.Object)listaSobreArreglos33);
    boolean b37 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos4.insertar((java.lang.Object)listaSobreArreglos11);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test440"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    java.lang.Object obj8 = listaSobreArreglos0.obtener(0);
    listaSobreArreglos0.vaciar();
    int i10 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    listaSobreArreglos12.vaciar();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos12.equals(obj14);
    java.lang.String str16 = listaSobreArreglos12.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    java.lang.String str21 = listaSobreArreglos17.toString();
    java.lang.Object obj22 = null;
    listaSobreArreglos17.insertar(obj22);
    listas.ListaSobreArreglos listaSobreArreglos24 = new listas.ListaSobreArreglos();
    int i25 = listaSobreArreglos24.longitud();
    boolean b26 = listaSobreArreglos24.esVacia();
    int i27 = listaSobreArreglos24.longitud();
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos24);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos12);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    boolean b33 = listaSobreArreglos31.esVacia();
    boolean b35 = listaSobreArreglos31.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos31.insertar((java.lang.Object)listaSobreArreglos36);
    boolean b42 = listaSobreArreglos31.esVacia();
    boolean b43 = listaSobreArreglos31.esVacia();
    java.lang.Object obj45 = listaSobreArreglos31.obtener(0);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    int i47 = listaSobreArreglos46.longitud();
    java.lang.Object obj49 = null;
    listaSobreArreglos46.insertar(0, obj49);
    boolean b51 = listaSobreArreglos31.equals((java.lang.Object)listaSobreArreglos46);
    listas.ListaSobreArreglos listaSobreArreglos53 = new listas.ListaSobreArreglos();
    boolean b54 = listaSobreArreglos53.esVacia();
    boolean b55 = listaSobreArreglos53.esVacia();
    boolean b56 = listaSobreArreglos53.esVacia();
    java.lang.String str57 = listaSobreArreglos53.toString();
    listas.ListaSobreArreglos listaSobreArreglos58 = new listas.ListaSobreArreglos();
    int i59 = listaSobreArreglos58.longitud();
    listaSobreArreglos58.vaciar();
    java.lang.String str61 = listaSobreArreglos58.toString();
    listas.ListaSobreArreglos listaSobreArreglos62 = new listas.ListaSobreArreglos();
    int i63 = listaSobreArreglos62.longitud();
    listaSobreArreglos62.vaciar();
    java.lang.String str65 = listaSobreArreglos62.toString();
    boolean b66 = listaSobreArreglos58.equals((java.lang.Object)listaSobreArreglos62);
    boolean b67 = listaSobreArreglos58.esVacia();
    listaSobreArreglos58.vaciar();
    listaSobreArreglos53.insertar((java.lang.Object)listaSobreArreglos58);
    listaSobreArreglos46.insertar(0, (java.lang.Object)listaSobreArreglos58);
    boolean b71 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos46);
    int i72 = listaSobreArreglos46.longitud();
    java.lang.Object obj73 = null;
    boolean b74 = listaSobreArreglos46.equals(obj73);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj76 = listaSobreArreglos46.obtener(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 10.0f+ "'", obj8.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "]"+ "'", str21.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "]"+ "'", str57.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "]"+ "'", str61.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "]"+ "'", str65.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test441"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.String str6 = listaSobreArreglos0.toString();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(0, obj8);
    java.lang.Object obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)-1, obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test442"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    java.lang.String str7 = listaSobreArreglos0.toString();
    int i8 = listaSobreArreglos0.longitud();
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b16 = listaSobreArreglos12.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos12.insertar((java.lang.Object)listaSobreArreglos17);
    listaSobreArreglos17.insertar((int)(short)1, (java.lang.Object)(byte)100);
    listaSobreArreglos0.insertar((java.lang.Object)(byte)100);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[10.]"+ "'", str7.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test443"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    boolean b24 = listaSobreArreglos0.esVacia();
    int i25 = listaSobreArreglos0.longitud();
    java.lang.Object obj26 = null;
    boolean b27 = listaSobreArreglos0.equals(obj26);
    int i28 = listaSobreArreglos0.longitud();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar((int)(byte)-1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test444"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos17.equals(obj22);
    listaSobreArreglos17.insertar((java.lang.Object)0);
    boolean b26 = listaSobreArreglos17.esVacia();
    int i27 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    int i32 = listaSobreArreglos31.longitud();
    boolean b33 = listaSobreArreglos31.esVacia();
    boolean b35 = listaSobreArreglos31.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos31.insertar((java.lang.Object)listaSobreArreglos36);
    boolean b42 = listaSobreArreglos31.esVacia();
    java.lang.String str43 = listaSobreArreglos31.toString();
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    int i46 = listaSobreArreglos45.longitud();
    boolean b47 = listaSobreArreglos45.esVacia();
    boolean b49 = listaSobreArreglos45.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos50 = new listas.ListaSobreArreglos();
    java.lang.String str51 = listaSobreArreglos50.toString();
    boolean b52 = listaSobreArreglos50.esVacia();
    listaSobreArreglos50.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos45.insertar((java.lang.Object)listaSobreArreglos50);
    java.lang.Object obj56 = null;
    listaSobreArreglos45.insertar(obj56);
    int i58 = listaSobreArreglos45.longitud();
    java.lang.Object obj59 = null;
    listaSobreArreglos45.insertar(obj59);
    listaSobreArreglos31.insertar((int)(short)1, (java.lang.Object)listaSobreArreglos45);
    listaSobreArreglos17.insertar(0, (java.lang.Object)listaSobreArreglos31);
    listaSobreArreglos17.vaciar();
    java.lang.Object obj65 = null;
    listaSobreArreglos17.insertar(0, obj65);
    boolean b67 = listaSobreArreglos17.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[[-]"+ "'", str43.equals("[[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "]"+ "'", str51.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test445"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj18 = listaSobreArreglos7.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test446"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj14 = null;
    listaSobreArreglos0.insertar(0, obj14);
    listaSobreArreglos0.vaciar();
    java.lang.Object obj18 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'a', obj18);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[10.]"+ "'", str11.equals("[10.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test447"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)10.0f);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.String str14 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)(short)-1);
    boolean b20 = listaSobreArreglos15.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    listaSobreArreglos21.vaciar();
    java.lang.String str24 = listaSobreArreglos21.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    listaSobreArreglos25.vaciar();
    java.lang.String str28 = listaSobreArreglos25.toString();
    boolean b29 = listaSobreArreglos21.equals((java.lang.Object)listaSobreArreglos25);
    boolean b30 = listaSobreArreglos21.esVacia();
    boolean b31 = listaSobreArreglos15.equals((java.lang.Object)listaSobreArreglos21);
    boolean b32 = listaSobreArreglos15.esVacia();
    boolean b33 = listaSobreArreglos0.equals((java.lang.Object)b32);
    java.lang.Object obj35 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar(2, obj35);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[]"+ "'", str14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "]"+ "'", str28.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test448"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos0.eliminar(1);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    java.lang.String str19 = listaSobreArreglos17.toString();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)10.0f);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj29 = listaSobreArreglos17.obtener(0);
    java.lang.String str30 = listaSobreArreglos17.toString();
    boolean b31 = listaSobreArreglos17.esVacia();
    java.lang.Object obj33 = null;
    listaSobreArreglos17.insertar((int)(short)1, obj33);
    listaSobreArreglos17.eliminar(0);
    java.lang.String str37 = listaSobreArreglos17.toString();
    int i38 = listaSobreArreglos17.longitud();
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    boolean b40 = listaSobreArreglos39.esVacia();
    boolean b41 = listaSobreArreglos39.esVacia();
    java.lang.Object obj42 = null;
    boolean b43 = listaSobreArreglos39.equals(obj42);
    int i44 = listaSobreArreglos39.longitud();
    boolean b45 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos39);
    java.lang.Object obj46 = null;
    listaSobreArreglos17.insertar(obj46);
    listaSobreArreglos17.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)' ', (java.lang.Object)listaSobreArreglos17);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[[10.0null,]"+ "'", str30.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test449"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    boolean b5 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    listaSobreArreglos6.vaciar();
    java.lang.String str9 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    int i11 = listaSobreArreglos10.longitud();
    listaSobreArreglos10.vaciar();
    java.lang.String str13 = listaSobreArreglos10.toString();
    boolean b14 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos10);
    boolean b15 = listaSobreArreglos6.esVacia();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    boolean b17 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.String str20 = listaSobreArreglos19.toString();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)(short)-1);
    boolean b24 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.eliminar(0);
    java.lang.String str27 = listaSobreArreglos19.toString();
    boolean b28 = listaSobreArreglos19.esVacia();
    boolean b29 = listaSobreArreglos19.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    boolean b32 = listaSobreArreglos30.esVacia();
    int i33 = listaSobreArreglos30.longitud();
    listaSobreArreglos19.insertar((java.lang.Object)listaSobreArreglos30);
    listaSobreArreglos30.vaciar();
    boolean b36 = listaSobreArreglos6.equals((java.lang.Object)listaSobreArreglos30);
    listas.ListaSobreArreglos listaSobreArreglos37 = new listas.ListaSobreArreglos();
    int i38 = listaSobreArreglos37.longitud();
    boolean b39 = listaSobreArreglos37.esVacia();
    listaSobreArreglos37.insertar((java.lang.Object)10.0f);
    java.lang.Object obj42 = null;
    listaSobreArreglos37.insertar(obj42);
    listas.ListaSobreArreglos listaSobreArreglos44 = new listas.ListaSobreArreglos();
    java.lang.String str45 = listaSobreArreglos44.toString();
    boolean b46 = listaSobreArreglos44.esVacia();
    listaSobreArreglos44.insertar((java.lang.Object)(short)-1);
    boolean b49 = listaSobreArreglos37.equals((java.lang.Object)(short)-1);
    boolean b50 = listaSobreArreglos37.esVacia();
    boolean b51 = listaSobreArreglos37.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos52 = new listas.ListaSobreArreglos();
    int i53 = listaSobreArreglos52.longitud();
    listaSobreArreglos52.vaciar();
    java.lang.String str55 = listaSobreArreglos52.toString();
    listas.ListaSobreArreglos listaSobreArreglos56 = new listas.ListaSobreArreglos();
    int i57 = listaSobreArreglos56.longitud();
    listaSobreArreglos56.vaciar();
    java.lang.String str59 = listaSobreArreglos56.toString();
    boolean b60 = listaSobreArreglos52.equals((java.lang.Object)listaSobreArreglos56);
    boolean b61 = listaSobreArreglos52.esVacia();
    java.lang.String str62 = listaSobreArreglos52.toString();
    java.lang.Object obj63 = null;
    boolean b64 = listaSobreArreglos52.equals(obj63);
    boolean b65 = listaSobreArreglos52.esVacia();
    int i66 = listaSobreArreglos52.longitud();
    boolean b67 = listaSobreArreglos52.esVacia();
    boolean b68 = listaSobreArreglos37.equals((java.lang.Object)listaSobreArreglos52);
    listaSobreArreglos30.insertar((java.lang.Object)listaSobreArreglos37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "]"+ "'", str55.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "]"+ "'", str59.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "]"+ "'", str62.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test450"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    java.lang.Object obj2 = null;
    listaSobreArreglos0.insertar(obj2);
    boolean b4 = listaSobreArreglos0.esVacia();
    int i5 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    java.lang.String str7 = listaSobreArreglos6.toString();
    boolean b8 = listaSobreArreglos6.esVacia();
    int i9 = listaSobreArreglos6.longitud();
    java.lang.String str10 = listaSobreArreglos6.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    java.lang.String str12 = listaSobreArreglos11.toString();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos11.insertar((java.lang.Object)(short)-1);
    boolean b16 = listaSobreArreglos11.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)listaSobreArreglos11);
    boolean b18 = listaSobreArreglos11.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    java.lang.Object obj20 = null;
    listaSobreArreglos19.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    java.lang.String str24 = listaSobreArreglos22.toString();
    listas.ListaSobreArreglos listaSobreArreglos25 = new listas.ListaSobreArreglos();
    int i26 = listaSobreArreglos25.longitud();
    boolean b27 = listaSobreArreglos25.esVacia();
    listaSobreArreglos25.insertar((java.lang.Object)10.0f);
    java.lang.Object obj30 = null;
    listaSobreArreglos25.insertar(obj30);
    listaSobreArreglos22.insertar((java.lang.Object)listaSobreArreglos25);
    boolean b33 = listaSobreArreglos19.equals((java.lang.Object)listaSobreArreglos25);
    java.lang.String str34 = listaSobreArreglos19.toString();
    listaSobreArreglos19.vaciar();
    boolean b36 = listaSobreArreglos11.equals((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj37 = null;
    listaSobreArreglos19.insertar(obj37);
    listaSobreArreglos0.insertar(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[null,]"+ "'", str34.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test451"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    boolean b10 = listaSobreArreglos5.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test452"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    boolean b8 = listaSobreArreglos4.equals((java.lang.Object)1);
    java.lang.Object obj9 = null;
    listaSobreArreglos4.insertar(obj9);
    boolean b11 = listaSobreArreglos4.esVacia();
    java.lang.Object obj13 = listaSobreArreglos4.obtener(0);
    listaSobreArreglos0.insertar(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj13);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test453"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(obj4);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos7.equals(obj12);
    listaSobreArreglos7.vaciar();
    int i15 = listaSobreArreglos7.longitud();
    boolean b16 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    boolean b18 = listaSobreArreglos17.esVacia();
    boolean b19 = listaSobreArreglos17.esVacia();
    boolean b20 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos17);
    int i24 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    int i26 = listaSobreArreglos0.longitud();
    int i27 = listaSobreArreglos0.longitud();
    boolean b28 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj30 = listaSobreArreglos0.obtener(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test454"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj19 = listaSobreArreglos7.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test455"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    int i11 = listaSobreArreglos4.longitud();
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos4.equals(obj12);
    java.lang.Object obj15 = null;
    listaSobreArreglos4.insertar(0, obj15);
    listaSobreArreglos4.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test456"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    listaSobreArreglos10.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    int i13 = listaSobreArreglos0.longitud();
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos0.equals(obj14);
    boolean b16 = listaSobreArreglos0.esVacia();
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos0.equals(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test457"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    int i14 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    java.lang.String str18 = listaSobreArreglos16.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)10.0f);
    java.lang.Object obj24 = null;
    listaSobreArreglos19.insertar(obj24);
    listaSobreArreglos16.insertar((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj28 = listaSobreArreglos16.obtener(0);
    java.lang.String str29 = listaSobreArreglos16.toString();
    int i30 = listaSobreArreglos16.longitud();
    int i31 = listaSobreArreglos16.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i31);
    listas.ListaSobreArreglos listaSobreArreglos33 = new listas.ListaSobreArreglos();
    java.lang.String str34 = listaSobreArreglos33.toString();
    boolean b35 = listaSobreArreglos33.esVacia();
    listaSobreArreglos33.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj38 = null;
    listaSobreArreglos33.insertar(obj38);
    java.lang.String str40 = listaSobreArreglos33.toString();
    listaSobreArreglos33.vaciar();
    boolean b42 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos33);
    java.lang.Object obj43 = null;
    listaSobreArreglos33.insertar(obj43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[[10.0null,]"+ "'", str29.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[-1null,]"+ "'", str40.equals("[-1null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test458"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.Object obj7 = listaSobreArreglos0.obtener((int)(short)0);
    listaSobreArreglos0.vaciar();
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.String str11 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    boolean b13 = listaSobreArreglos12.esVacia();
    boolean b14 = listaSobreArreglos12.esVacia();
    boolean b15 = listaSobreArreglos12.esVacia();
    java.lang.Object obj16 = null;
    listaSobreArreglos12.insertar(obj16);
    listaSobreArreglos12.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    boolean b24 = listaSobreArreglos20.equals((java.lang.Object)1);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listaSobreArreglos12.insertar(0, obj25);
    java.lang.String str28 = listaSobreArreglos12.toString();
    boolean b29 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos12);
    int i30 = listaSobreArreglos0.longitud();
    boolean b31 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "[null,]"+ "'", str28.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test459"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.String str6 = listaSobreArreglos0.toString();
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.String str9 = listaSobreArreglos0.toString();
    java.lang.Object obj10 = null;
    boolean b11 = listaSobreArreglos0.equals(obj10);
    java.lang.Object obj12 = null;
    listaSobreArreglos0.insertar(obj12);
    int i14 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null,]"+ "'", str6.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test460"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    listaSobreArreglos0.vaciar();
    java.lang.String str11 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test461"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(0, obj5);
    java.lang.Object obj7 = null;
    boolean b8 = listaSobreArreglos0.equals(obj7);
    java.lang.String str9 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "[null,]"+ "'", str9.equals("[null,]"));

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test462"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    listaSobreArreglos0.insertar((java.lang.Object)0.0f);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj8 = null;
    boolean b9 = listaSobreArreglos0.equals(obj8);
    boolean b10 = listaSobreArreglos0.esVacia();
    java.lang.String str11 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    boolean b15 = listaSobreArreglos13.esVacia();
    boolean b16 = listaSobreArreglos13.esVacia();
    java.lang.String str17 = listaSobreArreglos13.toString();
    listaSobreArreglos13.vaciar();
    boolean b20 = listaSobreArreglos13.equals((java.lang.Object)(short)100);
    java.lang.Object obj21 = null;
    boolean b22 = listaSobreArreglos13.equals(obj21);
    java.lang.String str23 = listaSobreArreglos13.toString();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos13);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(5);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "[0.]"+ "'", str11.equals("[0.]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test463"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    int i4 = listaSobreArreglos0.longitud();
    int i5 = listaSobreArreglos0.longitud();
    java.lang.Object obj6 = null;
    boolean b7 = listaSobreArreglos0.equals(obj6);
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    java.lang.String str9 = listaSobreArreglos8.toString();
    boolean b10 = listaSobreArreglos8.esVacia();
    int i11 = listaSobreArreglos8.longitud();
    boolean b12 = listaSobreArreglos8.esVacia();
    int i13 = listaSobreArreglos8.longitud();
    java.lang.String str14 = listaSobreArreglos8.toString();
    listaSobreArreglos8.vaciar();
    java.lang.Object obj16 = null;
    boolean b17 = listaSobreArreglos8.equals(obj16);
    listaSobreArreglos8.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos8);
    int i20 = listaSobreArreglos0.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "]"+ "'", str9.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test464"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    java.lang.String str14 = listaSobreArreglos13.toString();
    boolean b15 = listaSobreArreglos13.esVacia();
    int i16 = listaSobreArreglos13.longitud();
    java.lang.String str17 = listaSobreArreglos13.toString();
    listas.ListaSobreArreglos listaSobreArreglos18 = new listas.ListaSobreArreglos();
    java.lang.String str19 = listaSobreArreglos18.toString();
    boolean b20 = listaSobreArreglos18.esVacia();
    listaSobreArreglos18.insertar((java.lang.Object)(short)-1);
    boolean b23 = listaSobreArreglos18.esVacia();
    listaSobreArreglos13.insertar((java.lang.Object)listaSobreArreglos18);
    int i25 = listaSobreArreglos18.longitud();
    boolean b26 = listaSobreArreglos18.esVacia();
    listaSobreArreglos18.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos18);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos18.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test465"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    boolean b6 = listaSobreArreglos4.esVacia();
    listaSobreArreglos4.insertar((java.lang.Object)10.0f);
    int i9 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.eliminar(0);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos4);
    boolean b13 = listaSobreArreglos4.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    java.lang.String str15 = listaSobreArreglos14.toString();
    boolean b16 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj19 = null;
    boolean b20 = listaSobreArreglos14.equals(obj19);
    listaSobreArreglos14.vaciar();
    int i22 = listaSobreArreglos14.longitud();
    listaSobreArreglos14.vaciar();
    listaSobreArreglos14.vaciar();
    boolean b25 = listaSobreArreglos4.equals((java.lang.Object)listaSobreArreglos14);
    int i26 = listaSobreArreglos4.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test466"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    listaSobreArreglos15.vaciar();
    java.lang.String str18 = listaSobreArreglos15.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    listaSobreArreglos19.vaciar();
    java.lang.String str22 = listaSobreArreglos19.toString();
    boolean b23 = listaSobreArreglos15.equals((java.lang.Object)listaSobreArreglos19);
    boolean b24 = listaSobreArreglos15.esVacia();
    java.lang.String str25 = listaSobreArreglos15.toString();
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    int i27 = listaSobreArreglos26.longitud();
    boolean b28 = listaSobreArreglos26.esVacia();
    boolean b30 = listaSobreArreglos26.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos31 = new listas.ListaSobreArreglos();
    java.lang.String str32 = listaSobreArreglos31.toString();
    boolean b33 = listaSobreArreglos31.esVacia();
    listaSobreArreglos31.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos26.insertar((java.lang.Object)listaSobreArreglos31);
    boolean b37 = listaSobreArreglos26.esVacia();
    int i38 = listaSobreArreglos26.longitud();
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos26);
    int i40 = listaSobreArreglos26.longitud();
    java.lang.Object obj42 = listaSobreArreglos26.obtener(0);
    java.lang.Object obj44 = null;
    listaSobreArreglos26.insertar(0, obj44);
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    int i47 = listaSobreArreglos46.longitud();
    java.lang.Object obj49 = null;
    listaSobreArreglos46.insertar(0, obj49);
    java.lang.Object obj52 = listaSobreArreglos46.obtener(0);
    java.lang.Object obj54 = listaSobreArreglos46.obtener(0);
    boolean b55 = listaSobreArreglos46.esVacia();
    boolean b56 = listaSobreArreglos26.equals((java.lang.Object)listaSobreArreglos46);
    java.lang.String str57 = listaSobreArreglos26.toString();
    listaSobreArreglos26.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos26);
    boolean b60 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj62 = listaSobreArreglos0.obtener((int)(byte)1);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "]"+ "'", str22.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "]"+ "'", str25.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "]"+ "'", str32.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[null, [-]"+ "'", str57.equals("[null, [-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test467"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    java.lang.Object obj9 = null;
    boolean b10 = listaSobreArreglos4.equals(obj9);
    int i11 = listaSobreArreglos4.longitud();
    java.lang.String str12 = listaSobreArreglos4.toString();
    listaSobreArreglos4.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj15 = listaSobreArreglos4.obtener(3);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test468"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj4 = null;
    listaSobreArreglos0.insertar(0, obj4);
    java.lang.String str6 = listaSobreArreglos0.toString();
    int i7 = listaSobreArreglos0.longitud();
    boolean b8 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj10 = listaSobreArreglos0.obtener((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "[null,]"+ "'", str6.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test469"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    int i14 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    java.lang.String str18 = listaSobreArreglos16.toString();
    listas.ListaSobreArreglos listaSobreArreglos19 = new listas.ListaSobreArreglos();
    int i20 = listaSobreArreglos19.longitud();
    boolean b21 = listaSobreArreglos19.esVacia();
    listaSobreArreglos19.insertar((java.lang.Object)10.0f);
    java.lang.Object obj24 = null;
    listaSobreArreglos19.insertar(obj24);
    listaSobreArreglos16.insertar((java.lang.Object)listaSobreArreglos19);
    java.lang.Object obj28 = listaSobreArreglos16.obtener(0);
    java.lang.String str29 = listaSobreArreglos16.toString();
    int i30 = listaSobreArreglos16.longitud();
    int i31 = listaSobreArreglos16.longitud();
    listaSobreArreglos0.insertar(0, (java.lang.Object)i31);
    boolean b33 = listaSobreArreglos0.esVacia();
    java.lang.String str34 = listaSobreArreglos0.toString();
    boolean b35 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "[[10.0null,]"+ "'", str29.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "[1[10.0null,]"+ "'", str34.equals("[1[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test470"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    boolean b10 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    listaSobreArreglos0.vaciar();
    boolean b14 = listaSobreArreglos0.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 10.0d+ "'", obj9.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test471"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    listaSobreArreglos0.insertar((java.lang.Object)0);
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    boolean b11 = listaSobreArreglos10.esVacia();
    boolean b12 = listaSobreArreglos10.esVacia();
    boolean b13 = listaSobreArreglos10.esVacia();
    java.lang.String str14 = listaSobreArreglos10.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    boolean b16 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.vaciar();
    java.lang.Object obj18 = null;
    boolean b19 = listaSobreArreglos15.equals(obj18);
    listaSobreArreglos10.insertar((java.lang.Object)b19);
    int i21 = listaSobreArreglos10.longitud();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    listaSobreArreglos22.vaciar();
    listaSobreArreglos10.insertar((java.lang.Object)listaSobreArreglos22);
    boolean b26 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos10);
    java.lang.String str27 = listaSobreArreglos0.toString();
    boolean b28 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test472"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    boolean b6 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj8 = null;
    listaSobreArreglos0.insertar(obj8);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    listaSobreArreglos11.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos11);
    java.lang.String str14 = listaSobreArreglos11.toString();
    java.lang.Object obj15 = null;
    boolean b16 = listaSobreArreglos11.equals(obj15);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos11.eliminar(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "]"+ "'", str14.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test473"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos3.vaciar();
    java.lang.Object obj13 = null;
    listaSobreArreglos3.insertar(0, obj13);
    int i15 = listaSobreArreglos3.longitud();
    int i16 = listaSobreArreglos3.longitud();
    listaSobreArreglos3.eliminar(0);
    java.lang.String str19 = listaSobreArreglos3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test474"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    listaSobreArreglos11.eliminar(0);
    java.lang.Object obj28 = null;
    listaSobreArreglos11.insertar(0, obj28);
    int i30 = listaSobreArreglos11.longitud();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    java.lang.String str33 = listaSobreArreglos32.toString();
    java.lang.String str34 = listaSobreArreglos32.toString();
    listas.ListaSobreArreglos listaSobreArreglos35 = new listas.ListaSobreArreglos();
    int i36 = listaSobreArreglos35.longitud();
    boolean b37 = listaSobreArreglos35.esVacia();
    listaSobreArreglos35.insertar((java.lang.Object)10.0f);
    java.lang.Object obj40 = null;
    listaSobreArreglos35.insertar(obj40);
    listaSobreArreglos32.insertar((java.lang.Object)listaSobreArreglos35);
    java.lang.Object obj44 = listaSobreArreglos32.obtener(0);
    java.lang.String str45 = listaSobreArreglos32.toString();
    boolean b46 = listaSobreArreglos32.esVacia();
    java.lang.Object obj48 = null;
    listaSobreArreglos32.insertar((int)(short)1, obj48);
    java.lang.Object obj50 = null;
    listaSobreArreglos32.insertar(obj50);
    listaSobreArreglos11.insertar(0, (java.lang.Object)listaSobreArreglos32);
    boolean b53 = listaSobreArreglos11.esVacia();
    java.lang.Object obj55 = listaSobreArreglos11.obtener((int)(short)1);
    java.lang.String str56 = listaSobreArreglos11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[[10.0null,]"+ "'", str45.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "[[[10.0null,]null, null,]null,]"+ "'", str56.equals("[[[10.0null,]null, null,]null,]"));

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test475"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    listaSobreArreglos0.vaciar();
    int i2 = listaSobreArreglos0.longitud();
    java.lang.String str3 = listaSobreArreglos0.toString();
    java.lang.String str4 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test476"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos5 = new listas.ListaSobreArreglos();
    java.lang.String str6 = listaSobreArreglos5.toString();
    boolean b7 = listaSobreArreglos5.esVacia();
    listaSobreArreglos5.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos5);
    int i11 = listaSobreArreglos5.longitud();
    listaSobreArreglos5.insertar(0, (java.lang.Object)4);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)(short)-1);
    boolean b20 = listaSobreArreglos15.esVacia();
    java.lang.Object obj21 = null;
    boolean b22 = listaSobreArreglos15.equals(obj21);
    listaSobreArreglos5.insertar((java.lang.Object)listaSobreArreglos15);
    listaSobreArreglos15.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos15.eliminar((int)' ');
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "]"+ "'", str6.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test477"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    int i5 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    boolean b10 = listaSobreArreglos6.equals((java.lang.Object)1);
    listaSobreArreglos6.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj15 = listaSobreArreglos6.obtener(0);
    boolean b16 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.eliminar(0);
    boolean b19 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(100);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj15 + "' != '" + 10.0d+ "'", obj15.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test478"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = null;
    listaSobreArreglos0.insertar(0, obj9);
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)b13);
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    boolean b19 = listaSobreArreglos15.equals((java.lang.Object)1);
    listaSobreArreglos15.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj24 = listaSobreArreglos15.obtener(0);
    boolean b25 = listaSobreArreglos15.esVacia();
    java.lang.Object obj27 = listaSobreArreglos15.obtener(0);
    int i28 = listaSobreArreglos15.longitud();
    listas.ListaSobreArreglos listaSobreArreglos29 = new listas.ListaSobreArreglos();
    int i30 = listaSobreArreglos29.longitud();
    boolean b31 = listaSobreArreglos29.esVacia();
    listaSobreArreglos29.insertar((java.lang.Object)10.0f);
    java.lang.Object obj34 = null;
    listaSobreArreglos29.insertar(obj34);
    listas.ListaSobreArreglos listaSobreArreglos36 = new listas.ListaSobreArreglos();
    java.lang.String str37 = listaSobreArreglos36.toString();
    boolean b38 = listaSobreArreglos36.esVacia();
    listaSobreArreglos36.insertar((java.lang.Object)(short)-1);
    boolean b41 = listaSobreArreglos29.equals((java.lang.Object)(short)-1);
    listaSobreArreglos15.insertar((java.lang.Object)b41);
    listas.ListaSobreArreglos listaSobreArreglos43 = new listas.ListaSobreArreglos();
    boolean b44 = listaSobreArreglos43.esVacia();
    boolean b45 = listaSobreArreglos43.esVacia();
    java.lang.Object obj46 = null;
    boolean b47 = listaSobreArreglos43.equals(obj46);
    listaSobreArreglos15.insertar((java.lang.Object)listaSobreArreglos43);
    boolean b49 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos43);
    listaSobreArreglos43.vaciar();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj52 = listaSobreArreglos43.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj24 + "' != '" + 10.0d+ "'", obj24.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 10.0d+ "'", obj27.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test479"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    java.lang.String str15 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    boolean b19 = listaSobreArreglos17.esVacia();
    listaSobreArreglos17.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos17.equals(obj22);
    listaSobreArreglos17.insertar((java.lang.Object)0);
    boolean b26 = listaSobreArreglos17.esVacia();
    int i27 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos17);
    listas.ListaSobreArreglos listaSobreArreglos30 = new listas.ListaSobreArreglos();
    int i31 = listaSobreArreglos30.longitud();
    listaSobreArreglos30.vaciar();
    java.lang.String str33 = listaSobreArreglos30.toString();
    listas.ListaSobreArreglos listaSobreArreglos34 = new listas.ListaSobreArreglos();
    int i35 = listaSobreArreglos34.longitud();
    boolean b36 = listaSobreArreglos34.esVacia();
    listaSobreArreglos34.insertar((java.lang.Object)10.0f);
    int i39 = listaSobreArreglos34.longitud();
    listaSobreArreglos34.eliminar(0);
    listaSobreArreglos30.insertar((java.lang.Object)listaSobreArreglos34);
    int i43 = listaSobreArreglos30.longitud();
    java.lang.String str44 = listaSobreArreglos30.toString();
    listas.ListaSobreArreglos listaSobreArreglos45 = new listas.ListaSobreArreglos();
    java.lang.String str46 = listaSobreArreglos45.toString();
    boolean b47 = listaSobreArreglos45.esVacia();
    listaSobreArreglos45.insertar((java.lang.Object)(short)-1);
    boolean b50 = listaSobreArreglos45.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos51 = new listas.ListaSobreArreglos();
    int i52 = listaSobreArreglos51.longitud();
    listaSobreArreglos51.vaciar();
    java.lang.String str54 = listaSobreArreglos51.toString();
    listas.ListaSobreArreglos listaSobreArreglos55 = new listas.ListaSobreArreglos();
    int i56 = listaSobreArreglos55.longitud();
    listaSobreArreglos55.vaciar();
    java.lang.String str58 = listaSobreArreglos55.toString();
    boolean b59 = listaSobreArreglos51.equals((java.lang.Object)listaSobreArreglos55);
    boolean b60 = listaSobreArreglos51.esVacia();
    boolean b61 = listaSobreArreglos45.equals((java.lang.Object)listaSobreArreglos51);
    boolean b62 = listaSobreArreglos45.esVacia();
    boolean b63 = listaSobreArreglos30.equals((java.lang.Object)b62);
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos30);
    boolean b65 = listaSobreArreglos17.esVacia();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[10.0null, null,]"+ "'", str15.equals("[10.0null, null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "]"+ "'", str33.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[]"+ "'", str44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "]"+ "'", str46.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "]"+ "'", str54.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "]"+ "'", str58.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test480"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    int i7 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar((int)(byte)0);
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.String str11 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test481"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos11 = new listas.ListaSobreArreglos();
    int i12 = listaSobreArreglos11.longitud();
    boolean b13 = listaSobreArreglos11.esVacia();
    boolean b15 = listaSobreArreglos11.equals((java.lang.Object)1);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    java.lang.String str17 = listaSobreArreglos16.toString();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)(short)-1);
    listaSobreArreglos11.insertar((java.lang.Object)listaSobreArreglos16);
    boolean b22 = listaSobreArreglos11.esVacia();
    int i23 = listaSobreArreglos11.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos11);
    java.lang.Object obj26 = null;
    listaSobreArreglos0.insertar((int)(byte)1, obj26);
    listas.ListaSobreArreglos listaSobreArreglos28 = new listas.ListaSobreArreglos();
    int i29 = listaSobreArreglos28.longitud();
    listaSobreArreglos28.vaciar();
    java.lang.String str31 = listaSobreArreglos28.toString();
    listas.ListaSobreArreglos listaSobreArreglos32 = new listas.ListaSobreArreglos();
    int i33 = listaSobreArreglos32.longitud();
    listaSobreArreglos32.vaciar();
    java.lang.String str35 = listaSobreArreglos32.toString();
    boolean b36 = listaSobreArreglos28.equals((java.lang.Object)listaSobreArreglos32);
    boolean b37 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos28);
    listas.ListaSobreArreglos listaSobreArreglos38 = new listas.ListaSobreArreglos();
    int i39 = listaSobreArreglos38.longitud();
    listaSobreArreglos38.vaciar();
    java.lang.String str41 = listaSobreArreglos38.toString();
    listas.ListaSobreArreglos listaSobreArreglos42 = new listas.ListaSobreArreglos();
    int i43 = listaSobreArreglos42.longitud();
    listaSobreArreglos42.vaciar();
    java.lang.String str45 = listaSobreArreglos42.toString();
    boolean b46 = listaSobreArreglos38.equals((java.lang.Object)listaSobreArreglos42);
    boolean b47 = listaSobreArreglos38.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos48 = new listas.ListaSobreArreglos();
    listaSobreArreglos48.vaciar();
    listaSobreArreglos38.insertar((java.lang.Object)listaSobreArreglos48);
    int i51 = listaSobreArreglos38.longitud();
    listaSobreArreglos38.vaciar();
    listaSobreArreglos28.insertar((java.lang.Object)listaSobreArreglos38);
    boolean b54 = listaSobreArreglos38.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos38.eliminar((int)(byte)10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "]"+ "'", str17.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "]"+ "'", str31.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "]"+ "'", str35.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "]"+ "'", str41.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test482"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj12 = null;
    boolean b13 = listaSobreArreglos0.equals(obj12);
    listas.ListaSobreArreglos listaSobreArreglos14 = new listas.ListaSobreArreglos();
    int i15 = listaSobreArreglos14.longitud();
    boolean b16 = listaSobreArreglos14.esVacia();
    int i17 = listaSobreArreglos14.longitud();
    int i18 = listaSobreArreglos14.longitud();
    listaSobreArreglos14.vaciar();
    boolean b20 = listaSobreArreglos14.esVacia();
    listaSobreArreglos14.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos14);
    java.lang.Object obj23 = null;
    boolean b24 = listaSobreArreglos0.equals(obj23);
    java.lang.String str25 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[null, ]]"+ "'", str25.equals("[null, ]]"));

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test483"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.Object obj1 = null;
    listaSobreArreglos0.insertar(obj1);
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    java.lang.String str4 = listaSobreArreglos3.toString();
    java.lang.String str5 = listaSobreArreglos3.toString();
    listas.ListaSobreArreglos listaSobreArreglos6 = new listas.ListaSobreArreglos();
    int i7 = listaSobreArreglos6.longitud();
    boolean b8 = listaSobreArreglos6.esVacia();
    listaSobreArreglos6.insertar((java.lang.Object)10.0f);
    java.lang.Object obj11 = null;
    listaSobreArreglos6.insertar(obj11);
    listaSobreArreglos3.insertar((java.lang.Object)listaSobreArreglos6);
    boolean b14 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos6);
    java.lang.String str15 = listaSobreArreglos0.toString();
    int i16 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    java.lang.String str18 = listaSobreArreglos17.toString();
    java.lang.String str19 = listaSobreArreglos17.toString();
    listas.ListaSobreArreglos listaSobreArreglos20 = new listas.ListaSobreArreglos();
    int i21 = listaSobreArreglos20.longitud();
    boolean b22 = listaSobreArreglos20.esVacia();
    listaSobreArreglos20.insertar((java.lang.Object)10.0f);
    java.lang.Object obj25 = null;
    listaSobreArreglos20.insertar(obj25);
    listaSobreArreglos17.insertar((java.lang.Object)listaSobreArreglos20);
    java.lang.Object obj29 = listaSobreArreglos17.obtener(0);
    java.lang.String str30 = listaSobreArreglos17.toString();
    boolean b31 = listaSobreArreglos17.esVacia();
    java.lang.Object obj33 = null;
    listaSobreArreglos17.insertar((int)(short)1, obj33);
    listaSobreArreglos17.eliminar(0);
    java.lang.String str37 = listaSobreArreglos17.toString();
    int i38 = listaSobreArreglos17.longitud();
    listas.ListaSobreArreglos listaSobreArreglos39 = new listas.ListaSobreArreglos();
    boolean b40 = listaSobreArreglos39.esVacia();
    boolean b41 = listaSobreArreglos39.esVacia();
    java.lang.Object obj42 = null;
    boolean b43 = listaSobreArreglos39.equals(obj42);
    int i44 = listaSobreArreglos39.longitud();
    boolean b45 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos39);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos39);
    java.lang.Object obj47 = null;
    boolean b48 = listaSobreArreglos39.equals(obj47);
    listaSobreArreglos39.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "[null,]"+ "'", str15.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "]"+ "'", str18.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "]"+ "'", str19.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "[[10.0null,]"+ "'", str30.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "]"+ "'", str37.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test484"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.String str8 = listaSobreArreglos0.toString();
    boolean b9 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    boolean b12 = listaSobreArreglos0.esVacia();
    boolean b13 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[-]"+ "'", str8.equals("[-]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test485"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b3 = listaSobreArreglos0.esVacia();
    java.lang.String str4 = listaSobreArreglos0.toString();
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    listaSobreArreglos7.vaciar();
    java.lang.Object obj13 = null;
    listaSobreArreglos7.insertar(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test486"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.String str5 = listaSobreArreglos0.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)10.0d);
    boolean b9 = listaSobreArreglos0.esVacia();
    java.lang.String str10 = listaSobreArreglos0.toString();
    java.lang.Object obj12 = null;
    listaSobreArreglos0.insertar(0, obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "[10.]"+ "'", str10.equals("[10.]"));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test487"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.eliminar(0);
    int i10 = listaSobreArreglos0.longitud();
    boolean b11 = listaSobreArreglos0.esVacia();
    java.lang.String str12 = listaSobreArreglos0.toString();
    java.lang.String str13 = listaSobreArreglos0.toString();
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "]"+ "'", str12.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test488"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)(short)-1);
    boolean b12 = listaSobreArreglos0.equals((java.lang.Object)(short)-1);
    boolean b13 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    int i16 = listaSobreArreglos15.longitud();
    boolean b17 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.insertar((java.lang.Object)10.0f);
    java.lang.Object obj20 = null;
    listaSobreArreglos15.insertar(obj20);
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    java.lang.String str23 = listaSobreArreglos22.toString();
    boolean b24 = listaSobreArreglos22.esVacia();
    listaSobreArreglos22.insertar((java.lang.Object)(short)-1);
    boolean b27 = listaSobreArreglos15.equals((java.lang.Object)(short)-1);
    boolean b28 = listaSobreArreglos15.esVacia();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos15);
    int i30 = listaSobreArreglos15.longitud();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "]"+ "'", str23.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 2);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test489"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str3 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos4 = new listas.ListaSobreArreglos();
    int i5 = listaSobreArreglos4.longitud();
    listaSobreArreglos4.vaciar();
    java.lang.String str7 = listaSobreArreglos4.toString();
    boolean b8 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos4);
    boolean b9 = listaSobreArreglos0.esVacia();
    listas.ListaSobreArreglos listaSobreArreglos10 = new listas.ListaSobreArreglos();
    listaSobreArreglos10.vaciar();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos10);
    int i13 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.vaciar();
    java.lang.String str15 = listaSobreArreglos0.toString();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos17 = new listas.ListaSobreArreglos();
    int i18 = listaSobreArreglos17.longitud();
    listaSobreArreglos17.vaciar();
    java.lang.String str20 = listaSobreArreglos17.toString();
    listas.ListaSobreArreglos listaSobreArreglos21 = new listas.ListaSobreArreglos();
    int i22 = listaSobreArreglos21.longitud();
    listaSobreArreglos21.vaciar();
    java.lang.String str24 = listaSobreArreglos21.toString();
    boolean b25 = listaSobreArreglos17.equals((java.lang.Object)listaSobreArreglos21);
    listaSobreArreglos17.vaciar();
    boolean b27 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos17);
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj29 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "]"+ "'", str3.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "]"+ "'", str7.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "]"+ "'", str15.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "]"+ "'", str20.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "]"+ "'", str24.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test490"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    listaSobreArreglos0.vaciar();
    boolean b12 = listaSobreArreglos0.esVacia();
    java.lang.Object obj13 = null;
    listaSobreArreglos0.insertar(obj13);
    int i15 = listaSobreArreglos0.longitud();
    java.lang.Object obj17 = null;
    listaSobreArreglos0.insertar(0, obj17);
    java.lang.Object obj19 = null;
    listaSobreArreglos0.insertar(obj19);
    java.lang.Object obj21 = null;
    listaSobreArreglos0.insertar(obj21);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.eliminar(10);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test491"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj5 = null;
    boolean b6 = listaSobreArreglos0.equals(obj5);
    boolean b7 = listaSobreArreglos0.esVacia();
    java.lang.Object obj9 = listaSobreArreglos0.obtener(0);
    java.lang.Object obj11 = null;
    listaSobreArreglos0.insertar(0, obj11);
    java.lang.String str13 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos15 = new listas.ListaSobreArreglos();
    java.lang.String str16 = listaSobreArreglos15.toString();
    boolean b17 = listaSobreArreglos15.esVacia();
    int i18 = listaSobreArreglos15.longitud();
    boolean b19 = listaSobreArreglos15.esVacia();
    listaSobreArreglos15.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos22 = new listas.ListaSobreArreglos();
    int i23 = listaSobreArreglos22.longitud();
    boolean b24 = listaSobreArreglos22.esVacia();
    boolean b26 = listaSobreArreglos22.equals((java.lang.Object)1);
    listaSobreArreglos22.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos22.vaciar();
    listaSobreArreglos22.vaciar();
    listaSobreArreglos15.insertar(0, (java.lang.Object)listaSobreArreglos22);
    java.lang.Object obj33 = null;
    listaSobreArreglos15.insertar(obj33);
    int i35 = listaSobreArreglos15.longitud();
    java.lang.String str36 = listaSobreArreglos15.toString();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos15);
    java.lang.String str38 = listaSobreArreglos0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (short)-1+ "'", obj9.equals((short)-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[null, -]"+ "'", str13.equals("[null, -]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "]"+ "'", str16.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[]null,]"+ "'", str36.equals("[]null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "[[]null,]null, -]"+ "'", str38.equals("[[]null,]null, -]"));

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test492"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.insertar((java.lang.Object)10.0f);
    int i5 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos9 = new listas.ListaSobreArreglos();
    java.lang.String str10 = listaSobreArreglos9.toString();
    boolean b11 = listaSobreArreglos9.esVacia();
    listaSobreArreglos9.insertar((java.lang.Object)(short)-1);
    java.lang.Object obj14 = null;
    boolean b15 = listaSobreArreglos9.equals(obj14);
    boolean b16 = listaSobreArreglos9.esVacia();
    java.lang.Object obj17 = null;
    boolean b18 = listaSobreArreglos9.equals(obj17);
    boolean b20 = listaSobreArreglos9.equals((java.lang.Object)(short)100);
    listaSobreArreglos9.vaciar();
    boolean b22 = listaSobreArreglos9.esVacia();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos9);
    java.lang.Object obj25 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)'4', obj25);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "]"+ "'", str10.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test493"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj12 = listaSobreArreglos0.obtener(0);
    java.lang.String str13 = listaSobreArreglos0.toString();
    int i14 = listaSobreArreglos0.longitud();
    int i15 = listaSobreArreglos0.longitud();
    listaSobreArreglos0.eliminar(0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(obj12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[[10.0null,]"+ "'", str13.equals("[[10.0null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test494"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    boolean b4 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listaSobreArreglos0.insertar(0, (java.lang.Object)listaSobreArreglos7);
    boolean b18 = listaSobreArreglos7.esVacia();
    listaSobreArreglos7.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test495"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b3 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.String str5 = listaSobreArreglos0.toString();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos8 = new listas.ListaSobreArreglos();
    int i9 = listaSobreArreglos8.longitud();
    listaSobreArreglos8.vaciar();
    java.lang.String str11 = listaSobreArreglos8.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    int i13 = listaSobreArreglos12.longitud();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)10.0f);
    int i17 = listaSobreArreglos12.longitud();
    listaSobreArreglos12.eliminar(0);
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos12);
    listaSobreArreglos8.insertar((java.lang.Object)10);
    java.lang.Object obj24 = null;
    listaSobreArreglos8.insertar(0, obj24);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    int i29 = listaSobreArreglos26.longitud();
    boolean b30 = listaSobreArreglos26.esVacia();
    java.lang.Object obj31 = null;
    listaSobreArreglos26.insertar(obj31);
    listaSobreArreglos8.insertar((java.lang.Object)listaSobreArreglos26);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)' ', (java.lang.Object)listaSobreArreglos8);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test496"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.Object obj3 = null;
    boolean b4 = listaSobreArreglos0.equals(obj3);
    boolean b5 = listaSobreArreglos0.esVacia();
    // The following exception was thrown during execution in test generation
    try {
    java.lang.Object obj7 = listaSobreArreglos0.obtener(0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test497"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    java.lang.String str2 = listaSobreArreglos0.toString();
    listas.ListaSobreArreglos listaSobreArreglos3 = new listas.ListaSobreArreglos();
    int i4 = listaSobreArreglos3.longitud();
    boolean b5 = listaSobreArreglos3.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)10.0f);
    java.lang.Object obj8 = null;
    listaSobreArreglos3.insertar(obj8);
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos3);
    java.lang.Object obj11 = null;
    listaSobreArreglos3.insertar(obj11);
    listas.ListaSobreArreglos listaSobreArreglos13 = new listas.ListaSobreArreglos();
    boolean b14 = listaSobreArreglos13.esVacia();
    listaSobreArreglos3.insertar((java.lang.Object)b14);
    listaSobreArreglos3.vaciar();
    java.lang.Object obj18 = null;
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos3.insertar((int)(short)1, obj18);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "]"+ "'", str2.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test498"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    boolean b1 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    boolean b3 = listaSobreArreglos0.esVacia();
    listaSobreArreglos0.vaciar();
    java.lang.String str5 = listaSobreArreglos0.toString();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    int i8 = listaSobreArreglos7.longitud();
    boolean b9 = listaSobreArreglos7.esVacia();
    boolean b11 = listaSobreArreglos7.equals((java.lang.Object)1);
    listaSobreArreglos7.insertar(0, (java.lang.Object)10.0d);
    java.lang.Object obj16 = listaSobreArreglos7.obtener(0);
    boolean b17 = listaSobreArreglos7.esVacia();
    java.lang.Object obj19 = listaSobreArreglos7.obtener(0);
    java.lang.Object obj20 = null;
    boolean b21 = listaSobreArreglos7.equals(obj20);
    java.lang.Object obj22 = null;
    boolean b23 = listaSobreArreglos7.equals(obj22);
    boolean b24 = listaSobreArreglos0.equals((java.lang.Object)b23);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    int i27 = listaSobreArreglos26.longitud();
    java.lang.Object obj29 = null;
    listaSobreArreglos26.insertar(0, obj29);
    java.lang.String str31 = listaSobreArreglos26.toString();
    listaSobreArreglos26.eliminar(0);
    listas.ListaSobreArreglos listaSobreArreglos35 = new listas.ListaSobreArreglos();
    int i36 = listaSobreArreglos35.longitud();
    java.lang.Object obj38 = null;
    listaSobreArreglos35.insertar(0, obj38);
    java.lang.Object obj41 = listaSobreArreglos35.obtener(0);
    java.lang.String str42 = listaSobreArreglos35.toString();
    listaSobreArreglos26.insertar(0, (java.lang.Object)str42);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos0.insertar((int)(byte)1, (java.lang.Object)0);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "]"+ "'", str5.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 10.0d+ "'", obj16.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 10.0d+ "'", obj19.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "[null,]"+ "'", str31.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "[null,]"+ "'", str42.equals("[null,]"));

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test499"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    int i1 = listaSobreArreglos0.longitud();
    boolean b2 = listaSobreArreglos0.esVacia();
    boolean b4 = listaSobreArreglos0.equals((java.lang.Object)1);
    java.lang.Object obj5 = null;
    listaSobreArreglos0.insertar(obj5);
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    int i12 = listaSobreArreglos7.longitud();
    listaSobreArreglos0.insertar((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj14 = null;
    listaSobreArreglos7.insertar(obj14);
    listas.ListaSobreArreglos listaSobreArreglos16 = new listas.ListaSobreArreglos();
    int i17 = listaSobreArreglos16.longitud();
    boolean b18 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)10.0f);
    int i21 = listaSobreArreglos16.longitud();
    boolean b22 = listaSobreArreglos16.esVacia();
    listaSobreArreglos16.vaciar();
    java.lang.Object obj24 = null;
    listaSobreArreglos16.insertar(obj24);
    listas.ListaSobreArreglos listaSobreArreglos26 = new listas.ListaSobreArreglos();
    java.lang.String str27 = listaSobreArreglos26.toString();
    boolean b28 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.insertar((java.lang.Object)(short)-1);
    boolean b31 = listaSobreArreglos26.esVacia();
    listaSobreArreglos26.eliminar(0);
    java.lang.String str34 = listaSobreArreglos26.toString();
    boolean b35 = listaSobreArreglos26.esVacia();
    boolean b36 = listaSobreArreglos26.esVacia();
    listaSobreArreglos16.insertar((java.lang.Object)b36);
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos16);
    listaSobreArreglos7.vaciar();
    listaSobreArreglos7.vaciar();
    listas.ListaSobreArreglos listaSobreArreglos41 = new listas.ListaSobreArreglos();
    java.lang.String str42 = listaSobreArreglos41.toString();
    boolean b43 = listaSobreArreglos41.esVacia();
    int i44 = listaSobreArreglos41.longitud();
    java.lang.String str45 = listaSobreArreglos41.toString();
    listas.ListaSobreArreglos listaSobreArreglos46 = new listas.ListaSobreArreglos();
    java.lang.String str47 = listaSobreArreglos46.toString();
    boolean b48 = listaSobreArreglos46.esVacia();
    listaSobreArreglos46.insertar((java.lang.Object)(short)-1);
    boolean b51 = listaSobreArreglos46.esVacia();
    listaSobreArreglos41.insertar((java.lang.Object)listaSobreArreglos46);
    int i53 = listaSobreArreglos41.longitud();
    boolean b54 = listaSobreArreglos7.equals((java.lang.Object)i53);
    // The following exception was thrown during execution in test generation
    try {
    listaSobreArreglos7.eliminar(4);
      org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "]"+ "'", str27.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "]"+ "'", str34.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "]"+ "'", str42.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "]"+ "'", str45.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "]"+ "'", str47.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest1.test500"); }

    listas.ListaSobreArreglos listaSobreArreglos0 = new listas.ListaSobreArreglos();
    java.lang.String str1 = listaSobreArreglos0.toString();
    boolean b2 = listaSobreArreglos0.esVacia();
    int i3 = listaSobreArreglos0.longitud();
    java.lang.String str4 = listaSobreArreglos0.toString();
    int i5 = listaSobreArreglos0.longitud();
    int i6 = listaSobreArreglos0.longitud();
    listas.ListaSobreArreglos listaSobreArreglos7 = new listas.ListaSobreArreglos();
    java.lang.String str8 = listaSobreArreglos7.toString();
    boolean b9 = listaSobreArreglos7.esVacia();
    int i10 = listaSobreArreglos7.longitud();
    java.lang.String str11 = listaSobreArreglos7.toString();
    listas.ListaSobreArreglos listaSobreArreglos12 = new listas.ListaSobreArreglos();
    java.lang.String str13 = listaSobreArreglos12.toString();
    boolean b14 = listaSobreArreglos12.esVacia();
    listaSobreArreglos12.insertar((java.lang.Object)(short)-1);
    boolean b17 = listaSobreArreglos12.esVacia();
    listaSobreArreglos7.insertar((java.lang.Object)listaSobreArreglos12);
    boolean b19 = listaSobreArreglos7.esVacia();
    java.lang.Object obj20 = null;
    listaSobreArreglos7.insertar(obj20);
    listaSobreArreglos7.vaciar();
    boolean b23 = listaSobreArreglos0.equals((java.lang.Object)listaSobreArreglos7);
    java.lang.Object obj25 = null;
    listaSobreArreglos7.insertar(0, obj25);
    java.lang.String str27 = listaSobreArreglos7.toString();
    java.lang.Object obj29 = listaSobreArreglos7.obtener(0);
    java.lang.Object obj31 = listaSobreArreglos7.obtener(0);
    java.lang.Object obj33 = listaSobreArreglos7.obtener(0);
    listaSobreArreglos7.vaciar();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str1 + "' != '" + "]"+ "'", str1.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "]"+ "'", str4.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "]"+ "'", str8.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "]"+ "'", str11.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "]"+ "'", str13.equals("]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "[null,]"+ "'", str27.equals("[null,]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(obj33);

  }

}
