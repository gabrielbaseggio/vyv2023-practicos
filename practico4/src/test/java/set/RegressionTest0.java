package set;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }

    java.util.Collection<java.lang.Integer> collection_i0 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set1 = new set.Set(collection_i0);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set17 = set15.intersect(set16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    set.Set set12 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set13 = set0.intersect(set12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    set.Set set12 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set13 = set0.union(set12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    int i4 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set29 = set0.intersect(set28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    set.Set set26 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set27 = set15.union(set26);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    int i20 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    set.Set set3 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set4 = set0.intersect(set3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set14 = set12.intersect(set13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    java.lang.Object obj4 = null;
    boolean b5 = set0.equals(obj4);
    boolean b7 = set0.remove((java.lang.Integer)1);
    boolean b9 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set6.union(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set.Set set45 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set46 = set44.intersect(set45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set.Set set45 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set46 = set43.union(set45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    set.Set set11 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set12 = set0.union(set11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    boolean b11 = set0.remove((java.lang.Integer)100);
    set.Set set12 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set13 = set0.union(set12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set.Set set9 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set10 = set0.intersect(set9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set.Set set27 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set28 = set1.union(set27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set0.intersect(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set.Set set45 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set46 = set27.intersect(set45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    boolean b16 = set8.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    set15.clear();
    boolean b29 = set15.add((java.lang.Integer)0);
    set.Set set30 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set31 = set15.union(set30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    set.Set set9 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set10 = set6.union(set9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    boolean b16 = set2.remove((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    int i26 = set0.size();
    set.Set set27 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set28 = set0.union(set27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    set.Set set14 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set15 = set0.union(set14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    int i9 = set6.size();
    boolean b11 = set6.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    boolean b12 = set1.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    boolean b21 = set7.remove((java.lang.Integer)0);
    boolean b23 = set7.remove((java.lang.Integer)0);
    boolean b24 = set6.equals((java.lang.Object)set7);
    boolean b26 = set6.equals((java.lang.Object)(short)100);
    boolean b27 = set6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }

    java.lang.Integer[] i_array5 = new java.lang.Integer[] { 0, 1, (-1), 0, (-1) };
    java.util.ArrayList<java.lang.Integer> arraylist_i6 = new java.util.ArrayList<java.lang.Integer>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i6, i_array5);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    int i9 = set8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 3);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    int i21 = set20.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set0.union(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = set8.intersect(set17);
    set.Set set24 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set25 = set8.intersect(set24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    boolean b18 = set0.belongs((java.lang.Integer)100);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    java.lang.Object obj26 = null;
    boolean b27 = set20.equals(obj26);
    boolean b29 = set20.add((java.lang.Integer)0);
    boolean b30 = set0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    boolean b11 = set0.remove((java.lang.Integer)100);
    boolean b13 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array17 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i18 = new java.util.ArrayList<java.lang.Integer>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i18, i_array17);
    set.Set set20 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i18);
    set.Set set21 = set0.union(set20);
    set.Set set22 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set23 = set0.union(set22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set8.isEmpty();
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set8.union(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    int i21 = set7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 3);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    boolean b15 = set8.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    boolean b21 = set7.remove((java.lang.Integer)0);
    boolean b23 = set7.remove((java.lang.Integer)0);
    boolean b24 = set6.equals((java.lang.Object)set7);
    boolean b26 = set6.equals((java.lang.Object)(short)100);
    set.Set set27 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set28 = set6.intersect(set27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    set.Set set29 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set30 = set28.union(set29);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set10.belongs((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set3 = set0.union(set2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b46 = set27.add((java.lang.Integer)0);
    set.Set set47 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set48 = set27.intersect(set47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.add((java.lang.Integer)100);
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    set11.clear();
    boolean b19 = set11.belongs((java.lang.Integer)100);
    boolean b21 = set11.belongs((java.lang.Integer)0);
    boolean b22 = set7.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    boolean b16 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set6.clear();
    boolean b9 = set6.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b8 = set0.isEmpty();
    int i9 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    set.Set set27 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set28 = set0.union(set27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set6 = set0.intersect(set5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    java.lang.Object obj15 = null;
    boolean b16 = set14.equals(obj15);
    set.Set set17 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set18 = set14.intersect(set17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    boolean b5 = set1.remove((java.lang.Integer)0);
    int i6 = set1.size();
    set.Set set7 = set0.intersect(set1);
    boolean b9 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set8 = set6.intersect(set7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    java.lang.Integer[] i_array14 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i15 = new java.util.ArrayList<java.lang.Integer>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i15, i_array14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set18 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b26 = set19.isEmpty();
    java.lang.Object obj27 = null;
    boolean b28 = set19.equals(obj27);
    set.Set set29 = set18.union(set19);
    set.Set set30 = set6.intersect(set18);
    set.Set set31 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set32 = set30.union(set31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set0.union(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    set.Set set9 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set10 = set1.intersect(set9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    set.Set set11 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set12 = set2.intersect(set11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set28.belongs((java.lang.Integer)(-1));
    boolean b32 = set28.add((java.lang.Integer)0);
    boolean b33 = set28.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    boolean b12 = set0.belongs((java.lang.Integer)0);
    boolean b14 = set0.add((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)10);
    set.Set set9 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set10 = set1.union(set9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    int i3 = set0.size();
    boolean b5 = set0.add((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    boolean b24 = set7.equals((java.lang.Object)(short)-1);
    java.lang.Object obj25 = null;
    boolean b26 = set7.equals(obj25);
    set.Set set27 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set28 = set7.intersect(set27);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b46 = set44.add((java.lang.Integer)0);
    set.Set set47 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set48 = set44.union(set47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b8 = set6.remove((java.lang.Integer)0);
    int i9 = set6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 2);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }

    java.lang.Integer[] i_array4 = new java.lang.Integer[] { 0, 10, (-1), 10 };
    java.util.ArrayList<java.lang.Integer> arraylist_i5 = new java.util.ArrayList<java.lang.Integer>();
    boolean b6 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i5, i_array4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i5);
    set.Set set8 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set9 = set7.intersect(set8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    boolean b41 = set13.isEmpty();
    set.Set set42 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set43 = set13.intersect(set42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set24 = set16.union(set23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    java.lang.Object obj18 = null;
    boolean b19 = set12.equals(obj18);
    boolean b21 = set12.add((java.lang.Integer)0);
    set.Set set22 = set1.union(set12);
    set.Set set23 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set24 = set22.intersect(set23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    boolean b11 = set0.remove((java.lang.Integer)100);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    boolean b17 = set0.add((java.lang.Integer)(-1));
    boolean b19 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set14 = set2.intersect(set13);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    java.lang.Object obj18 = null;
    boolean b19 = set12.equals(obj18);
    boolean b21 = set12.add((java.lang.Integer)0);
    set.Set set22 = set1.union(set12);
    set.Set set23 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set24 = set22.union(set23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    java.lang.Object obj41 = null;
    boolean b42 = set2.equals(obj41);
    set.Set set43 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set44 = set2.union(set43);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    set7.clear();
    boolean b22 = set7.isEmpty();
    set7.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    boolean b10 = set6.remove((java.lang.Integer)0);
    int i11 = set6.size();
    boolean b13 = set6.remove((java.lang.Integer)0);
    set.Set set14 = set0.intersect(set6);
    boolean b16 = set14.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    set16.clear();
    set.Set set18 = set6.union(set16);
    set.Set set19 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set20 = set6.intersect(set19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    java.lang.Object obj4 = null;
    boolean b5 = set0.equals(obj4);
    boolean b7 = set0.remove((java.lang.Integer)1);
    int i8 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    boolean b41 = set40.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    int i10 = set0.size();
    set.Set set11 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set12 = set0.intersect(set11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    boolean b28 = set26.add((java.lang.Integer)1);
    boolean b30 = set26.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)0);
    boolean b30 = set15.belongs((java.lang.Integer)0);
    int i31 = set15.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set9 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    boolean b19 = set11.belongs((java.lang.Integer)10);
    set11.clear();
    set.Set set21 = new set.Set();
    set.Set set22 = new set.Set();
    boolean b24 = set22.remove((java.lang.Integer)0);
    java.lang.Object obj25 = null;
    boolean b26 = set22.equals(obj25);
    set.Set set27 = set21.intersect(set22);
    boolean b29 = set27.add((java.lang.Integer)(-1));
    set.Set set30 = set11.union(set27);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set31.clear();
    set.Set set39 = set27.intersect(set31);
    set.Set set40 = set0.union(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    boolean b21 = set7.remove((java.lang.Integer)0);
    boolean b23 = set7.remove((java.lang.Integer)0);
    boolean b24 = set6.equals((java.lang.Object)set7);
    set7.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set43.clear();
    set.Set set46 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set47 = set43.intersect(set46);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set32.clear();
    set.Set set39 = set30.union(set32);
    boolean b41 = set30.add((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    int i9 = set0.size();
    boolean b11 = set0.belongs((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    int i21 = set7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 2);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    java.lang.Object obj19 = null;
    boolean b20 = set18.equals(obj19);
    set.Set set21 = new set.Set();
    set21.clear();
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b31 = set23.belongs((java.lang.Integer)10);
    int i32 = set23.size();
    set.Set set33 = set21.intersect(set23);
    boolean b35 = set21.remove((java.lang.Integer)0);
    boolean b37 = set21.remove((java.lang.Integer)0);
    boolean b38 = set18.equals((java.lang.Object)0);
    set18.clear();
    int i40 = set18.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 10, 10, 0 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set8 = set6.union(set7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    set.Set set24 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set25 = set23.union(set24);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    set16.clear();
    set.Set set18 = set6.union(set16);
    int i19 = set18.size();
    boolean b21 = set18.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    int i29 = set20.size();
    boolean b30 = set20.isEmpty();
    java.lang.Integer[] i_array34 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i35 = new java.util.ArrayList<java.lang.Integer>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i35, i_array34);
    set.Set set37 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i35);
    set.Set set38 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i35);
    set.Set set39 = new set.Set();
    set.Set set40 = new set.Set();
    boolean b42 = set40.remove((java.lang.Integer)0);
    java.lang.Object obj43 = null;
    boolean b44 = set40.equals(obj43);
    set.Set set45 = set39.intersect(set40);
    boolean b46 = set39.isEmpty();
    java.lang.Object obj47 = null;
    boolean b48 = set39.equals(obj47);
    set.Set set49 = set38.union(set39);
    boolean b51 = set38.remove((java.lang.Integer)0);
    set38.clear();
    set.Set set53 = new set.Set();
    set53.clear();
    set.Set set55 = new set.Set();
    boolean b57 = set55.remove((java.lang.Integer)0);
    boolean b59 = set55.remove((java.lang.Integer)0);
    int i60 = set55.size();
    boolean b62 = set55.remove((java.lang.Integer)0);
    set.Set set63 = set53.union(set55);
    boolean b65 = set63.add((java.lang.Integer)0);
    set.Set set66 = set38.union(set63);
    set.Set set67 = new set.Set();
    set.Set set68 = new set.Set();
    boolean b70 = set68.remove((java.lang.Integer)0);
    java.lang.Object obj71 = null;
    boolean b72 = set68.equals(obj71);
    set.Set set73 = set67.intersect(set68);
    set.Set set74 = new set.Set();
    set.Set set75 = new set.Set();
    boolean b77 = set75.remove((java.lang.Integer)0);
    java.lang.Object obj78 = null;
    boolean b79 = set75.equals(obj78);
    set.Set set80 = set74.intersect(set75);
    boolean b81 = set67.equals((java.lang.Object)set75);
    set.Set set82 = new set.Set();
    set.Set set83 = new set.Set();
    boolean b85 = set83.remove((java.lang.Integer)0);
    java.lang.Object obj86 = null;
    boolean b87 = set83.equals(obj86);
    set.Set set88 = set82.intersect(set83);
    boolean b89 = set82.isEmpty();
    boolean b91 = set82.remove((java.lang.Integer)0);
    set.Set set92 = set67.intersect(set82);
    boolean b93 = set82.isEmpty();
    boolean b95 = set82.add((java.lang.Integer)0);
    java.lang.Object obj96 = null;
    boolean b97 = set82.equals(obj96);
    boolean b98 = set38.equals((java.lang.Object)b97);
    boolean b99 = set20.equals((java.lang.Object)b97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    java.lang.Object obj29 = null;
    boolean b30 = set1.equals(obj29);
    set.Set set31 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set32 = set1.intersect(set31);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.remove((java.lang.Integer)0);
    boolean b11 = set7.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.add((java.lang.Integer)0);
    boolean b11 = set7.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set32.clear();
    set.Set set39 = set30.union(set32);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b62 = set55.isEmpty();
    boolean b64 = set55.remove((java.lang.Integer)0);
    set.Set set65 = set40.intersect(set55);
    int i66 = set40.size();
    set.Set set67 = set32.union(set40);
    boolean b69 = set32.belongs((java.lang.Integer)0);
    set.Set set70 = new set.Set();
    boolean b72 = set70.remove((java.lang.Integer)0);
    boolean b74 = set70.remove((java.lang.Integer)0);
    int i75 = set70.size();
    boolean b77 = set70.remove((java.lang.Integer)0);
    set.Set set78 = new set.Set();
    set.Set set79 = new set.Set();
    boolean b81 = set79.remove((java.lang.Integer)0);
    java.lang.Object obj82 = null;
    boolean b83 = set79.equals(obj82);
    set.Set set84 = set78.intersect(set79);
    set.Set set85 = set70.intersect(set84);
    set.Set set86 = new set.Set();
    set.Set set87 = new set.Set();
    boolean b89 = set87.remove((java.lang.Integer)0);
    java.lang.Object obj90 = null;
    boolean b91 = set87.equals(obj90);
    set.Set set92 = set86.intersect(set87);
    boolean b93 = set86.isEmpty();
    boolean b95 = set86.remove((java.lang.Integer)0);
    set86.clear();
    set.Set set97 = set70.union(set86);
    boolean b98 = set86.isEmpty();
    boolean b99 = set32.equals((java.lang.Object)b98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    boolean b11 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set15.add((java.lang.Integer)(-1));
    boolean b19 = set15.belongs((java.lang.Integer)0);
    boolean b21 = set15.add((java.lang.Integer)(-1));
    set.Set set22 = set1.intersect(set15);
    set.Set set23 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set24 = set1.intersect(set23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    boolean b18 = set11.isEmpty();
    boolean b20 = set11.remove((java.lang.Integer)0);
    boolean b22 = set11.belongs((java.lang.Integer)0);
    boolean b24 = set11.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array28 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i29 = new java.util.ArrayList<java.lang.Integer>();
    boolean b30 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i29, i_array28);
    set.Set set31 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i29);
    set.Set set32 = set11.union(set31);
    boolean b33 = set31.isEmpty();
    boolean b34 = set6.equals((java.lang.Object)set31);
    set.Set set35 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set36 = set31.intersect(set35);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set8.equals((java.lang.Object)set16);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set23.isEmpty();
    boolean b32 = set23.remove((java.lang.Integer)0);
    set.Set set33 = set8.intersect(set23);
    boolean b34 = set23.isEmpty();
    set23.clear();
    boolean b36 = set23.isEmpty();
    set.Set set37 = set0.intersect(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    int i17 = set0.size();
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    boolean b28 = set26.add((java.lang.Integer)1);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.add((java.lang.Integer)0);
    boolean b39 = set29.isEmpty();
    int i40 = set29.size();
    boolean b42 = set29.belongs((java.lang.Integer)1);
    boolean b43 = set26.equals((java.lang.Object)b42);
    boolean b44 = set26.isEmpty();
    boolean b46 = set26.remove((java.lang.Integer)0);
    boolean b48 = set26.remove((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    int i10 = set0.size();
    boolean b12 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set1.union(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set32.clear();
    set.Set set39 = set30.union(set32);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b62 = set55.isEmpty();
    boolean b64 = set55.remove((java.lang.Integer)0);
    set.Set set65 = set40.intersect(set55);
    int i66 = set40.size();
    set.Set set67 = set32.union(set40);
    set.Set set68 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set69 = set32.union(set68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set29.belongs((java.lang.Integer)10);
    set29.clear();
    int i39 = set29.size();
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = set29.union(set48);
    set.Set set56 = set28.intersect(set48);
    boolean b58 = set28.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    boolean b24 = set7.add((java.lang.Integer)0);
    set.Set set25 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set26 = set7.intersect(set25);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set18.belongs((java.lang.Integer)10);
    set.Set set21 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set22 = set18.union(set21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    int i57 = set41.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set29.belongs((java.lang.Integer)10);
    set29.clear();
    int i39 = set29.size();
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = set29.union(set48);
    set.Set set56 = set28.intersect(set48);
    java.lang.Object obj57 = null;
    boolean b58 = set56.equals(obj57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    java.lang.Object obj3 = null;
    boolean b4 = set0.equals(obj3);
    boolean b6 = set0.remove((java.lang.Integer)0);
    boolean b8 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = new set.Set();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    java.lang.Object obj9 = null;
    boolean b10 = set6.equals(obj9);
    set.Set set11 = set5.intersect(set6);
    boolean b13 = set5.belongs((java.lang.Integer)10);
    set5.clear();
    int i15 = set5.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set16.equals((java.lang.Object)set24);
    set.Set set31 = set5.union(set24);
    set.Set set32 = set0.union(set31);
    boolean b34 = set31.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    boolean b12 = set0.add((java.lang.Integer)0);
    boolean b13 = set0.isEmpty();
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    int i57 = set56.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i57 == 1);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    int i9 = set6.size();
    boolean b11 = set6.belongs((java.lang.Integer)1);
    java.lang.Object obj12 = null;
    boolean b13 = set6.equals(obj12);
    boolean b15 = set6.remove((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    boolean b12 = set1.belongs((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b10 = set0.isEmpty();
    int i11 = set0.size();
    java.lang.Integer[] i_array15 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i16 = new java.util.ArrayList<java.lang.Integer>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i16, i_array15);
    set.Set set18 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i16);
    set.Set set19 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i16);
    boolean b21 = set19.add((java.lang.Integer)100);
    set.Set set22 = set0.intersect(set19);
    boolean b24 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set1.clear();
    boolean b9 = set1.belongs((java.lang.Integer)100);
    set.Set set10 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set11 = set1.union(set10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    java.lang.Object obj4 = null;
    boolean b5 = set0.equals(obj4);
    set.Set set6 = new set.Set();
    set6.clear();
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b16 = set8.belongs((java.lang.Integer)10);
    int i17 = set8.size();
    set.Set set18 = set6.intersect(set8);
    set.Set set19 = set0.intersect(set18);
    boolean b20 = set0.isEmpty();
    set.Set set21 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set22 = set0.union(set21);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    set.Set set57 = new set.Set();
    set57.clear();
    set.Set set59 = new set.Set();
    set.Set set60 = new set.Set();
    boolean b62 = set60.remove((java.lang.Integer)0);
    java.lang.Object obj63 = null;
    boolean b64 = set60.equals(obj63);
    set.Set set65 = set59.intersect(set60);
    boolean b67 = set59.belongs((java.lang.Integer)10);
    int i68 = set59.size();
    set.Set set69 = set57.intersect(set59);
    boolean b71 = set57.remove((java.lang.Integer)0);
    boolean b72 = set57.isEmpty();
    boolean b73 = set57.isEmpty();
    set.Set set74 = set56.union(set57);
    int i75 = set56.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 1);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    set15.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set31.add((java.lang.Integer)(-1));
    set.Set set34 = set15.union(set31);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    set35.clear();
    set.Set set43 = set31.intersect(set35);
    boolean b44 = set43.isEmpty();
    boolean b46 = set43.belongs((java.lang.Integer)100);
    set.Set set47 = set2.union(set43);
    boolean b49 = set43.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    boolean b18 = set0.belongs((java.lang.Integer)100);
    java.lang.Object obj19 = null;
    boolean b20 = set0.equals(obj19);
    boolean b22 = set0.add((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set8.clear();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    int i25 = set16.size();
    set.Set set26 = set8.intersect(set16);
    int i27 = set26.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = new set.Set();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    java.lang.Object obj9 = null;
    boolean b10 = set6.equals(obj9);
    set.Set set11 = set5.intersect(set6);
    boolean b13 = set5.belongs((java.lang.Integer)10);
    set5.clear();
    int i15 = set5.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set16.equals((java.lang.Object)set24);
    set.Set set31 = set5.union(set24);
    set.Set set32 = set0.union(set31);
    set.Set set33 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set34 = set0.union(set33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    boolean b33 = set26.isEmpty();
    boolean b35 = set26.remove((java.lang.Integer)0);
    set.Set set36 = set11.intersect(set26);
    boolean b37 = set26.isEmpty();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    boolean b48 = set44.belongs((java.lang.Integer)0);
    boolean b50 = set44.add((java.lang.Integer)0);
    boolean b51 = set26.equals((java.lang.Object)0);
    boolean b53 = set26.belongs((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set26);
    boolean b56 = set26.add((java.lang.Integer)2);
    boolean b58 = set26.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    boolean b22 = set7.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    int i27 = set19.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    int i9 = set6.size();
    boolean b11 = set6.belongs((java.lang.Integer)1);
    boolean b13 = set6.remove((java.lang.Integer)100);
    set6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    set.Set set13 = new set.Set();
    set13.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    int i24 = set15.size();
    set.Set set25 = set13.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b48 = set41.isEmpty();
    boolean b50 = set41.remove((java.lang.Integer)0);
    set.Set set51 = set26.intersect(set41);
    int i52 = set26.size();
    set.Set set53 = set15.union(set26);
    boolean b54 = set26.isEmpty();
    boolean b55 = set26.isEmpty();
    set.Set set56 = set6.union(set26);
    boolean b57 = set26.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    boolean b28 = set16.isEmpty();
    boolean b30 = set16.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    boolean b16 = set10.remove((java.lang.Integer)(-1));
    set.Set set17 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set18 = set10.intersect(set17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    set.Set set3 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set4 = set0.union(set3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    boolean b18 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set28.belongs((java.lang.Integer)(-1));
    boolean b32 = set28.add((java.lang.Integer)1);
    boolean b33 = set28.isEmpty();
    set28.clear();
    boolean b36 = set28.remove((java.lang.Integer)0);
    boolean b38 = set28.remove((java.lang.Integer)100);
    set.Set set39 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set40 = set28.union(set39);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    int i15 = set2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set8.clear();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    int i25 = set16.size();
    set.Set set26 = set8.intersect(set16);
    boolean b28 = set26.belongs((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b10 = set0.isEmpty();
    boolean b12 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set8.clear();
    set.Set set16 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set17 = set8.union(set16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.remove((java.lang.Integer)0);
    boolean b40 = set29.belongs((java.lang.Integer)0);
    boolean b42 = set29.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array46 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i47 = new java.util.ArrayList<java.lang.Integer>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i47, i_array46);
    set.Set set49 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i47);
    set.Set set50 = set29.union(set49);
    boolean b51 = set49.isEmpty();
    boolean b53 = set49.remove((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set49);
    set49.clear();
    set49.clear();
    boolean b57 = set49.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    boolean b16 = set10.remove((java.lang.Integer)(-1));
    int i17 = set10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    boolean b12 = set0.belongs((java.lang.Integer)0);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set6.clear();
    set.Set set8 = new set.Set();
    set8.clear();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = set8.union(set10);
    set10.clear();
    set.Set set20 = set6.union(set10);
    boolean b22 = set10.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    set.Set set10 = new set.Set();
    set10.clear();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    int i21 = set12.size();
    set.Set set22 = set10.intersect(set12);
    boolean b23 = set12.isEmpty();
    set.Set set24 = set0.union(set12);
    boolean b26 = set24.add((java.lang.Integer)0);
    set24.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)10);
    set.Set set9 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set10 = set1.intersect(set9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.add((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    int i16 = set0.size();
    boolean b18 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set44.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    set6.clear();
    int i10 = set6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    boolean b12 = set0.add((java.lang.Integer)0);
    boolean b14 = set0.belongs((java.lang.Integer)1);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b29 = set15.equals((java.lang.Object)set23);
    set.Set set30 = new set.Set();
    set.Set set31 = new set.Set();
    boolean b33 = set31.remove((java.lang.Integer)0);
    java.lang.Object obj34 = null;
    boolean b35 = set31.equals(obj34);
    set.Set set36 = set30.intersect(set31);
    boolean b37 = set30.isEmpty();
    boolean b39 = set30.remove((java.lang.Integer)0);
    set.Set set40 = set15.intersect(set30);
    boolean b41 = set30.isEmpty();
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    boolean b50 = set48.add((java.lang.Integer)(-1));
    boolean b52 = set48.belongs((java.lang.Integer)0);
    boolean b54 = set48.add((java.lang.Integer)0);
    boolean b55 = set30.equals((java.lang.Object)0);
    boolean b56 = set0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    boolean b4 = set0.isEmpty();
    boolean b6 = set0.belongs((java.lang.Integer)100);
    set0.clear();
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    java.lang.Object obj15 = null;
    boolean b16 = set9.equals(obj15);
    boolean b18 = set9.add((java.lang.Integer)0);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    java.lang.Object obj26 = null;
    boolean b27 = set20.equals(obj26);
    boolean b29 = set20.add((java.lang.Integer)0);
    set.Set set30 = set9.union(set20);
    boolean b31 = set0.equals((java.lang.Object)set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    boolean b46 = set6.remove((java.lang.Integer)0);
    boolean b48 = set6.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b27 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    set0.clear();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    int i18 = set17.size();
    boolean b20 = set17.add((java.lang.Integer)0);
    set17.clear();
    boolean b22 = set17.isEmpty();
    java.lang.Object obj23 = null;
    boolean b24 = set17.equals(obj23);
    set.Set set25 = set0.union(set17);
    java.lang.Object obj26 = null;
    boolean b27 = set0.equals(obj26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set15.add((java.lang.Integer)(-1));
    boolean b19 = set15.belongs((java.lang.Integer)0);
    boolean b21 = set15.add((java.lang.Integer)(-1));
    set.Set set22 = set1.intersect(set15);
    boolean b24 = set1.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    boolean b16 = set10.remove((java.lang.Integer)(-1));
    boolean b18 = set10.add((java.lang.Integer)0);
    boolean b20 = set10.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    set16.clear();
    set.Set set18 = set6.union(set16);
    boolean b20 = set16.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    int i9 = set6.size();
    boolean b11 = set6.belongs((java.lang.Integer)1);
    int i12 = set6.size();
    boolean b14 = set6.remove((java.lang.Integer)0);
    boolean b16 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    int i24 = set23.size();
    boolean b26 = set23.belongs((java.lang.Integer)(-1));
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set33.clear();
    set.Set set35 = set23.union(set33);
    boolean b36 = set15.equals((java.lang.Object)set33);
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    boolean b41 = set37.remove((java.lang.Integer)0);
    int i42 = set37.size();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    boolean b47 = set43.remove((java.lang.Integer)0);
    int i48 = set43.size();
    boolean b50 = set43.remove((java.lang.Integer)0);
    set.Set set51 = set37.intersect(set43);
    boolean b53 = set51.remove((java.lang.Integer)3);
    boolean b54 = set15.equals((java.lang.Object)set51);
    set.Set set55 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set56 = set15.intersect(set55);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    boolean b11 = set6.belongs((java.lang.Integer)1);
    boolean b13 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set20.add((java.lang.Integer)0);
    set20.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    set.Set set39 = new set.Set();
    set39.clear();
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.belongs((java.lang.Integer)10);
    int i50 = set41.size();
    set.Set set51 = set39.intersect(set41);
    boolean b53 = set39.remove((java.lang.Integer)0);
    boolean b55 = set39.remove((java.lang.Integer)0);
    boolean b56 = set38.equals((java.lang.Object)set39);
    boolean b58 = set38.equals((java.lang.Object)(short)100);
    set.Set set59 = set20.union(set38);
    boolean b61 = set59.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    boolean b16 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.remove((java.lang.Integer)1);
    boolean b23 = set16.isEmpty();
    set.Set set24 = new set.Set();
    set24.clear();
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    boolean b34 = set26.belongs((java.lang.Integer)10);
    int i35 = set26.size();
    set.Set set36 = set24.intersect(set26);
    boolean b38 = set24.remove((java.lang.Integer)0);
    boolean b39 = set24.isEmpty();
    boolean b40 = set24.isEmpty();
    boolean b42 = set24.remove((java.lang.Integer)0);
    set.Set set43 = new set.Set();
    set.Set set44 = new set.Set();
    boolean b46 = set44.remove((java.lang.Integer)0);
    boolean b48 = set44.remove((java.lang.Integer)0);
    int i49 = set44.size();
    set.Set set50 = set43.intersect(set44);
    set.Set set51 = set24.union(set44);
    boolean b52 = set16.equals((java.lang.Object)set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    java.lang.Integer[] i_array14 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i15 = new java.util.ArrayList<java.lang.Integer>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i15, i_array14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set17.clear();
    set.Set set19 = set1.intersect(set17);
    set.Set set20 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set21 = set19.intersect(set20);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    int i15 = set10.size();
    boolean b17 = set10.belongs((java.lang.Integer)100);
    int i18 = set10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set20.add((java.lang.Integer)0);
    set20.clear();
    boolean b33 = set20.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.remove((java.lang.Integer)0);
    boolean b40 = set29.belongs((java.lang.Integer)0);
    boolean b42 = set29.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array46 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i47 = new java.util.ArrayList<java.lang.Integer>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i47, i_array46);
    set.Set set49 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i47);
    set.Set set50 = set29.union(set49);
    boolean b51 = set49.isEmpty();
    boolean b53 = set49.remove((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set49);
    set.Set set55 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set56 = set54.union(set55);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set15.equals(obj29);
    int i31 = set15.size();
    boolean b33 = set15.remove((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)0);
    boolean b10 = set1.remove((java.lang.Integer)3);
    boolean b12 = set1.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b61 = set53.belongs((java.lang.Integer)10);
    set53.clear();
    int i63 = set53.size();
    set.Set set64 = new set.Set();
    set.Set set65 = new set.Set();
    boolean b67 = set65.remove((java.lang.Integer)0);
    java.lang.Object obj68 = null;
    boolean b69 = set65.equals(obj68);
    set.Set set70 = set64.intersect(set65);
    set.Set set71 = new set.Set();
    set.Set set72 = new set.Set();
    boolean b74 = set72.remove((java.lang.Integer)0);
    java.lang.Object obj75 = null;
    boolean b76 = set72.equals(obj75);
    set.Set set77 = set71.intersect(set72);
    boolean b78 = set64.equals((java.lang.Object)set72);
    set.Set set79 = set53.union(set72);
    boolean b81 = set79.add((java.lang.Integer)1);
    set.Set set82 = new set.Set();
    set.Set set83 = new set.Set();
    boolean b85 = set83.remove((java.lang.Integer)0);
    java.lang.Object obj86 = null;
    boolean b87 = set83.equals(obj86);
    set.Set set88 = set82.intersect(set83);
    boolean b89 = set82.isEmpty();
    boolean b91 = set82.add((java.lang.Integer)0);
    boolean b92 = set82.isEmpty();
    int i93 = set82.size();
    boolean b95 = set82.belongs((java.lang.Integer)1);
    boolean b96 = set79.equals((java.lang.Object)b95);
    set.Set set97 = set23.intersect(set79);
    set.Set set98 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set99 = set79.intersect(set98);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set97);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set10.remove((java.lang.Integer)(-1));
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    boolean b11 = set6.isEmpty();
    boolean b12 = set6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    boolean b10 = set0.remove((java.lang.Integer)0);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    java.lang.Object obj4 = null;
    boolean b5 = set0.equals(obj4);
    boolean b7 = set0.remove((java.lang.Integer)1);
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b11 = set0.remove((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.remove((java.lang.Integer)0);
    set7.clear();
    boolean b12 = set7.remove((java.lang.Integer)3);
    boolean b14 = set7.add((java.lang.Integer)0);
    boolean b15 = set7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set6.clear();
    boolean b8 = set6.isEmpty();
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.belongs((java.lang.Integer)0);
    boolean b14 = set6.add((java.lang.Integer)0);
    int i15 = set6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 1);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set28.belongs((java.lang.Integer)(-1));
    boolean b32 = set28.add((java.lang.Integer)1);
    boolean b33 = set28.isEmpty();
    set28.clear();
    int i35 = set28.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i35 == 0);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b53 = set45.belongs((java.lang.Integer)10);
    set45.clear();
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b63 = set61.add((java.lang.Integer)(-1));
    set.Set set64 = set45.union(set61);
    int i65 = set61.size();
    boolean b66 = set61.isEmpty();
    set.Set set67 = set6.intersect(set61);
    set.Set set68 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set69 = set6.intersect(set68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)0);
    boolean b29 = set15.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b11 = set6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b10 = set0.isEmpty();
    set.Set set11 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set12 = set0.intersect(set11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    int i24 = set22.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 2);

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    boolean b21 = set7.remove((java.lang.Integer)0);
    boolean b23 = set7.remove((java.lang.Integer)0);
    boolean b24 = set6.equals((java.lang.Object)set7);
    boolean b25 = set6.isEmpty();
    java.lang.Integer[] i_array29 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i30 = new java.util.ArrayList<java.lang.Integer>();
    boolean b31 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i30, i_array29);
    set.Set set32 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i30);
    set.Set set33 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i30);
    boolean b35 = set33.remove((java.lang.Integer)0);
    boolean b37 = set33.remove((java.lang.Integer)0);
    boolean b38 = set6.equals((java.lang.Object)set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.remove((java.lang.Integer)0);
    boolean b40 = set29.belongs((java.lang.Integer)0);
    boolean b42 = set29.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array46 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i47 = new java.util.ArrayList<java.lang.Integer>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i47, i_array46);
    set.Set set49 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i47);
    set.Set set50 = set29.union(set49);
    boolean b51 = set49.isEmpty();
    boolean b53 = set49.remove((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set49);
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    set61.clear();
    boolean b63 = set61.isEmpty();
    boolean b65 = set61.belongs((java.lang.Integer)0);
    boolean b67 = set61.belongs((java.lang.Integer)0);
    int i68 = set61.size();
    boolean b69 = set49.equals((java.lang.Object)set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)(-1));
    boolean b13 = set0.remove((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)0);
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.add((java.lang.Integer)100);
    boolean b19 = set9.remove((java.lang.Integer)10);
    java.lang.Object obj20 = null;
    boolean b21 = set9.equals(obj20);
    set.Set set22 = set1.intersect(set9);
    java.lang.Object obj23 = null;
    boolean b24 = set22.equals(obj23);
    boolean b26 = set22.remove((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    boolean b28 = set10.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set27.clear();
    boolean b30 = set27.belongs((java.lang.Integer)0);
    boolean b32 = set27.remove((java.lang.Integer)1);
    java.lang.Object obj33 = null;
    boolean b34 = set27.equals(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set8.isEmpty();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    int i17 = set11.size();
    set.Set set18 = set8.union(set11);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b27 = set19.belongs((java.lang.Integer)10);
    set19.clear();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set35.add((java.lang.Integer)(-1));
    set.Set set38 = set19.union(set35);
    set35.clear();
    boolean b41 = set35.add((java.lang.Integer)10);
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    boolean b46 = set42.remove((java.lang.Integer)0);
    int i47 = set42.size();
    boolean b49 = set42.remove((java.lang.Integer)0);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    set.Set set57 = set42.intersect(set56);
    boolean b59 = set56.belongs((java.lang.Integer)0);
    set.Set set60 = set35.union(set56);
    boolean b62 = set56.remove((java.lang.Integer)0);
    int i63 = set56.size();
    set.Set set64 = set8.union(set56);
    set56.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    java.lang.Object obj3 = null;
    boolean b4 = set0.equals(obj3);
    boolean b6 = set0.remove((java.lang.Integer)0);
    int i7 = set0.size();
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    int i15 = set9.size();
    java.lang.Object obj16 = null;
    boolean b17 = set9.equals(obj16);
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    boolean b22 = set18.remove((java.lang.Integer)0);
    int i23 = set18.size();
    boolean b25 = set18.remove((java.lang.Integer)0);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = set18.intersect(set32);
    boolean b34 = set9.equals((java.lang.Object)set18);
    set9.clear();
    int i36 = set9.size();
    set.Set set37 = new set.Set();
    set.Set set38 = new set.Set();
    boolean b40 = set38.remove((java.lang.Integer)0);
    java.lang.Object obj41 = null;
    boolean b42 = set38.equals(obj41);
    set.Set set43 = set37.intersect(set38);
    boolean b44 = set37.isEmpty();
    boolean b46 = set37.remove((java.lang.Integer)0);
    boolean b48 = set37.belongs((java.lang.Integer)0);
    boolean b50 = set37.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array54 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i55 = new java.util.ArrayList<java.lang.Integer>();
    boolean b56 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i55, i_array54);
    set.Set set57 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i55);
    set.Set set58 = set37.union(set57);
    boolean b59 = set57.isEmpty();
    boolean b61 = set57.remove((java.lang.Integer)0);
    set.Set set62 = set9.intersect(set57);
    boolean b63 = set0.equals((java.lang.Object)set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    set.Set set8 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set9 = set6.intersect(set8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b53 = set45.belongs((java.lang.Integer)10);
    set45.clear();
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b63 = set61.add((java.lang.Integer)(-1));
    set.Set set64 = set45.union(set61);
    int i65 = set61.size();
    boolean b66 = set61.isEmpty();
    set.Set set67 = set6.intersect(set61);
    boolean b69 = set67.add((java.lang.Integer)10);
    boolean b71 = set67.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    set.Set set3 = new set.Set();
    set3.clear();
    set.Set set5 = new set.Set();
    boolean b7 = set5.remove((java.lang.Integer)0);
    boolean b9 = set5.remove((java.lang.Integer)0);
    int i10 = set5.size();
    boolean b12 = set5.remove((java.lang.Integer)0);
    set.Set set13 = set3.union(set5);
    boolean b15 = set5.belongs((java.lang.Integer)1);
    int i16 = set5.size();
    set5.clear();
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b26 = set18.belongs((java.lang.Integer)10);
    set18.clear();
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set34.add((java.lang.Integer)(-1));
    set.Set set37 = set18.union(set34);
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    set38.clear();
    set.Set set46 = set34.intersect(set38);
    boolean b47 = set46.isEmpty();
    boolean b49 = set46.belongs((java.lang.Integer)100);
    set.Set set50 = set5.union(set46);
    set50.clear();
    boolean b52 = set0.equals((java.lang.Object)set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    boolean b16 = set0.isEmpty();
    boolean b18 = set0.remove((java.lang.Integer)0);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    boolean b24 = set20.remove((java.lang.Integer)0);
    int i25 = set20.size();
    set.Set set26 = set19.intersect(set20);
    set.Set set27 = set0.union(set20);
    boolean b29 = set27.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    set.Set set13 = new set.Set();
    set13.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    int i24 = set15.size();
    set.Set set25 = set13.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b48 = set41.isEmpty();
    boolean b50 = set41.remove((java.lang.Integer)0);
    set.Set set51 = set26.intersect(set41);
    int i52 = set26.size();
    set.Set set53 = set15.union(set26);
    boolean b54 = set26.isEmpty();
    boolean b55 = set26.isEmpty();
    set.Set set56 = set6.union(set26);
    boolean b58 = set6.remove((java.lang.Integer)0);
    int i59 = set6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 1);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    int i53 = set7.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 3);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set8.clear();
    boolean b17 = set8.add((java.lang.Integer)0);
    java.lang.Integer[] i_array21 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i22 = new java.util.ArrayList<java.lang.Integer>();
    boolean b23 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i22, i_array21);
    set.Set set24 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i22);
    set24.clear();
    set.Set set26 = new set.Set();
    set26.clear();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = set26.union(set28);
    set28.clear();
    set.Set set38 = set24.union(set28);
    boolean b40 = set38.remove((java.lang.Integer)3);
    boolean b41 = set8.equals((java.lang.Object)b40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    java.lang.Integer[] i_array14 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i15 = new java.util.ArrayList<java.lang.Integer>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i15, i_array14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set17.clear();
    set.Set set19 = set1.intersect(set17);
    boolean b20 = set19.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    boolean b5 = set1.remove((java.lang.Integer)0);
    int i6 = set1.size();
    set.Set set7 = set0.intersect(set1);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    java.lang.Object obj15 = null;
    boolean b16 = set9.equals(obj15);
    boolean b18 = set9.add((java.lang.Integer)0);
    boolean b20 = set9.remove((java.lang.Integer)0);
    set9.clear();
    boolean b22 = set1.equals((java.lang.Object)set9);
    int i23 = set9.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b61 = set53.belongs((java.lang.Integer)10);
    set53.clear();
    int i63 = set53.size();
    set.Set set64 = new set.Set();
    set.Set set65 = new set.Set();
    boolean b67 = set65.remove((java.lang.Integer)0);
    java.lang.Object obj68 = null;
    boolean b69 = set65.equals(obj68);
    set.Set set70 = set64.intersect(set65);
    set.Set set71 = new set.Set();
    set.Set set72 = new set.Set();
    boolean b74 = set72.remove((java.lang.Integer)0);
    java.lang.Object obj75 = null;
    boolean b76 = set72.equals(obj75);
    set.Set set77 = set71.intersect(set72);
    boolean b78 = set64.equals((java.lang.Object)set72);
    set.Set set79 = set53.union(set72);
    boolean b81 = set79.add((java.lang.Integer)1);
    set.Set set82 = new set.Set();
    set.Set set83 = new set.Set();
    boolean b85 = set83.remove((java.lang.Integer)0);
    java.lang.Object obj86 = null;
    boolean b87 = set83.equals(obj86);
    set.Set set88 = set82.intersect(set83);
    boolean b89 = set82.isEmpty();
    boolean b91 = set82.add((java.lang.Integer)0);
    boolean b92 = set82.isEmpty();
    int i93 = set82.size();
    boolean b95 = set82.belongs((java.lang.Integer)1);
    boolean b96 = set79.equals((java.lang.Object)b95);
    set.Set set97 = set23.intersect(set79);
    int i98 = set79.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i98 == 1);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)(-1));
    int i12 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }

    java.lang.Integer[] i_array6 = new java.lang.Integer[] { 1, 2, (-1), 0, 0, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i7 = new java.util.ArrayList<java.lang.Integer>();
    boolean b8 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i7, i_array6);
    set.Set set9 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i7);
    boolean b10 = set9.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    java.lang.Object obj20 = null;
    boolean b21 = set19.equals(obj20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)1);
    int i9 = set6.size();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b17 = set10.isEmpty();
    java.lang.Object obj18 = null;
    boolean b19 = set10.equals(obj18);
    set.Set set20 = new set.Set();
    set20.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set22.belongs((java.lang.Integer)10);
    int i31 = set22.size();
    set.Set set32 = set20.intersect(set22);
    boolean b34 = set20.remove((java.lang.Integer)0);
    boolean b35 = set20.isEmpty();
    java.lang.Integer[] i_array39 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i40 = new java.util.ArrayList<java.lang.Integer>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i40, i_array39);
    set.Set set42 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i40);
    set.Set set43 = set20.union(set42);
    set.Set set44 = set10.intersect(set20);
    set.Set set45 = set6.union(set44);
    boolean b46 = set0.equals((java.lang.Object)set44);
    set.Set set47 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set48 = set0.union(set47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    boolean b46 = set11.belongs((java.lang.Integer)10);
    set11.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    java.lang.Object obj11 = null;
    boolean b12 = set0.equals(obj11);
    boolean b14 = set0.belongs((java.lang.Integer)1);
    java.lang.Integer[] i_array18 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i19 = new java.util.ArrayList<java.lang.Integer>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i19, i_array18);
    set.Set set21 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i19);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set23.isEmpty();
    java.lang.Object obj31 = null;
    boolean b32 = set23.equals(obj31);
    set.Set set33 = set22.union(set23);
    boolean b35 = set22.add((java.lang.Integer)0);
    boolean b37 = set22.add((java.lang.Integer)0);
    boolean b39 = set22.add((java.lang.Integer)0);
    set.Set set40 = set0.intersect(set22);
    java.lang.Object obj41 = null;
    boolean b42 = set0.equals(obj41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    java.lang.Object obj15 = null;
    boolean b16 = set14.equals(obj15);
    boolean b18 = set14.remove((java.lang.Integer)1);
    boolean b20 = set14.add((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set20.add((java.lang.Integer)0);
    set20.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    set.Set set39 = new set.Set();
    set39.clear();
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.belongs((java.lang.Integer)10);
    int i50 = set41.size();
    set.Set set51 = set39.intersect(set41);
    boolean b53 = set39.remove((java.lang.Integer)0);
    boolean b55 = set39.remove((java.lang.Integer)0);
    boolean b56 = set38.equals((java.lang.Object)set39);
    boolean b58 = set38.equals((java.lang.Object)(short)100);
    set.Set set59 = set20.union(set38);
    boolean b60 = set20.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.remove((java.lang.Integer)0);
    boolean b40 = set29.belongs((java.lang.Integer)0);
    boolean b42 = set29.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array46 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i47 = new java.util.ArrayList<java.lang.Integer>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i47, i_array46);
    set.Set set49 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i47);
    set.Set set50 = set29.union(set49);
    boolean b51 = set49.isEmpty();
    boolean b53 = set49.remove((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set49);
    boolean b56 = set1.belongs((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    set7.clear();
    int i22 = set7.size();
    boolean b23 = set7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    boolean b18 = set0.belongs((java.lang.Integer)100);
    int i19 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set.Set set9 = new set.Set();
    set9.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    boolean b15 = set11.remove((java.lang.Integer)0);
    int i16 = set11.size();
    boolean b18 = set11.remove((java.lang.Integer)0);
    set.Set set19 = set9.union(set11);
    boolean b20 = set19.isEmpty();
    set.Set set21 = new set.Set();
    set.Set set22 = new set.Set();
    boolean b24 = set22.remove((java.lang.Integer)0);
    java.lang.Object obj25 = null;
    boolean b26 = set22.equals(obj25);
    set.Set set27 = set21.intersect(set22);
    boolean b29 = set21.belongs((java.lang.Integer)10);
    set21.clear();
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    boolean b39 = set37.add((java.lang.Integer)(-1));
    set.Set set40 = set21.union(set37);
    set.Set set41 = set19.intersect(set37);
    boolean b43 = set19.belongs((java.lang.Integer)0);
    boolean b44 = set0.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    boolean b33 = set26.isEmpty();
    boolean b35 = set26.remove((java.lang.Integer)0);
    set.Set set36 = set11.intersect(set26);
    boolean b37 = set26.isEmpty();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    boolean b48 = set44.belongs((java.lang.Integer)0);
    boolean b50 = set44.add((java.lang.Integer)0);
    boolean b51 = set26.equals((java.lang.Object)0);
    boolean b53 = set26.belongs((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set26);
    boolean b55 = set54.isEmpty();
    set.Set set56 = new set.Set();
    set.Set set57 = new set.Set();
    boolean b59 = set57.remove((java.lang.Integer)0);
    java.lang.Object obj60 = null;
    boolean b61 = set57.equals(obj60);
    set.Set set62 = set56.intersect(set57);
    set.Set set63 = new set.Set();
    set.Set set64 = new set.Set();
    boolean b66 = set64.remove((java.lang.Integer)0);
    java.lang.Object obj67 = null;
    boolean b68 = set64.equals(obj67);
    set.Set set69 = set63.intersect(set64);
    boolean b70 = set56.equals((java.lang.Object)set64);
    set.Set set71 = new set.Set();
    set71.clear();
    set.Set set73 = new set.Set();
    set.Set set74 = new set.Set();
    boolean b76 = set74.remove((java.lang.Integer)0);
    java.lang.Object obj77 = null;
    boolean b78 = set74.equals(obj77);
    set.Set set79 = set73.intersect(set74);
    boolean b81 = set73.belongs((java.lang.Integer)10);
    int i82 = set73.size();
    set.Set set83 = set71.intersect(set73);
    boolean b85 = set71.remove((java.lang.Integer)0);
    set.Set set86 = set56.union(set71);
    boolean b87 = set54.equals((java.lang.Object)set86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.add((java.lang.Integer)0);
    set.Set set15 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set16 = set0.union(set15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    set0.clear();
    java.lang.Object obj5 = null;
    boolean b6 = set0.equals(obj5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = new set.Set();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    java.lang.Object obj9 = null;
    boolean b10 = set6.equals(obj9);
    set.Set set11 = set5.intersect(set6);
    boolean b13 = set5.belongs((java.lang.Integer)10);
    set5.clear();
    int i15 = set5.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set16.equals((java.lang.Object)set24);
    set.Set set31 = set5.union(set24);
    set.Set set32 = set0.union(set31);
    int i33 = set32.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 1);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = new set.Set();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    java.lang.Object obj9 = null;
    boolean b10 = set6.equals(obj9);
    set.Set set11 = set5.intersect(set6);
    boolean b13 = set5.belongs((java.lang.Integer)10);
    set5.clear();
    int i15 = set5.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set16.equals((java.lang.Object)set24);
    set.Set set31 = set5.union(set24);
    set.Set set32 = set0.union(set31);
    set32.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    boolean b17 = set14.belongs((java.lang.Integer)0);
    boolean b19 = set14.belongs((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    set0.clear();
    int i4 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)10);
    set1.clear();
    set1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    boolean b16 = set2.belongs((java.lang.Integer)100);
    boolean b18 = set2.add((java.lang.Integer)0);
    boolean b20 = set2.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    boolean b10 = set6.remove((java.lang.Integer)0);
    int i11 = set6.size();
    boolean b13 = set6.remove((java.lang.Integer)0);
    set.Set set14 = set0.intersect(set6);
    boolean b16 = set14.remove((java.lang.Integer)3);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set23.add((java.lang.Integer)(-1));
    boolean b27 = set23.belongs((java.lang.Integer)0);
    boolean b29 = set23.add((java.lang.Integer)(-1));
    set.Set set30 = new set.Set();
    set30.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    boolean b40 = set32.belongs((java.lang.Integer)10);
    int i41 = set32.size();
    set.Set set42 = set30.intersect(set32);
    set.Set set43 = new set.Set();
    set.Set set44 = new set.Set();
    boolean b46 = set44.remove((java.lang.Integer)0);
    java.lang.Object obj47 = null;
    boolean b48 = set44.equals(obj47);
    set.Set set49 = set43.intersect(set44);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    boolean b57 = set43.equals((java.lang.Object)set51);
    set.Set set58 = new set.Set();
    set.Set set59 = new set.Set();
    boolean b61 = set59.remove((java.lang.Integer)0);
    java.lang.Object obj62 = null;
    boolean b63 = set59.equals(obj62);
    set.Set set64 = set58.intersect(set59);
    boolean b65 = set58.isEmpty();
    boolean b67 = set58.remove((java.lang.Integer)0);
    set.Set set68 = set43.intersect(set58);
    int i69 = set43.size();
    set.Set set70 = set32.union(set43);
    boolean b71 = set43.isEmpty();
    boolean b72 = set43.isEmpty();
    set.Set set73 = set23.union(set43);
    set.Set set74 = set14.intersect(set23);
    java.lang.Object obj75 = null;
    boolean b76 = set14.equals(obj75);
    boolean b78 = set14.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    java.lang.Object obj18 = null;
    boolean b19 = set12.equals(obj18);
    boolean b21 = set12.add((java.lang.Integer)0);
    set.Set set22 = set1.union(set12);
    int i23 = set1.size();
    boolean b25 = set1.add((java.lang.Integer)1);
    set1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    int i10 = set0.size();
    set0.clear();
    boolean b13 = set0.belongs((java.lang.Integer)0);
    boolean b14 = set0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    boolean b24 = set23.isEmpty();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b32 = set25.isEmpty();
    boolean b34 = set25.remove((java.lang.Integer)0);
    boolean b36 = set25.belongs((java.lang.Integer)0);
    boolean b38 = set25.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array42 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i43 = new java.util.ArrayList<java.lang.Integer>();
    boolean b44 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i43, i_array42);
    set.Set set45 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i43);
    set.Set set46 = set25.union(set45);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    set.Set set54 = new set.Set();
    set.Set set55 = new set.Set();
    boolean b57 = set55.remove((java.lang.Integer)0);
    java.lang.Object obj58 = null;
    boolean b59 = set55.equals(obj58);
    set.Set set60 = set54.intersect(set55);
    boolean b61 = set47.equals((java.lang.Object)set55);
    set.Set set62 = new set.Set();
    set.Set set63 = new set.Set();
    boolean b65 = set63.remove((java.lang.Integer)0);
    java.lang.Object obj66 = null;
    boolean b67 = set63.equals(obj66);
    set.Set set68 = set62.intersect(set63);
    boolean b69 = set62.isEmpty();
    boolean b71 = set62.remove((java.lang.Integer)0);
    set.Set set72 = set47.intersect(set62);
    set62.clear();
    int i74 = set62.size();
    boolean b75 = set62.isEmpty();
    boolean b76 = set46.equals((java.lang.Object)b75);
    boolean b77 = set23.equals((java.lang.Object)b76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    java.lang.Object obj11 = null;
    boolean b12 = set0.equals(obj11);
    boolean b14 = set0.belongs((java.lang.Integer)1);
    java.lang.Integer[] i_array18 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i19 = new java.util.ArrayList<java.lang.Integer>();
    boolean b20 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i19, i_array18);
    set.Set set21 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i19);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b30 = set23.isEmpty();
    java.lang.Object obj31 = null;
    boolean b32 = set23.equals(obj31);
    set.Set set33 = set22.union(set23);
    boolean b35 = set22.add((java.lang.Integer)0);
    boolean b37 = set22.add((java.lang.Integer)0);
    boolean b39 = set22.add((java.lang.Integer)0);
    set.Set set40 = set0.intersect(set22);
    set.Set set41 = new set.Set();
    set41.clear();
    boolean b44 = set41.remove((java.lang.Integer)(-1));
    java.lang.Object obj45 = null;
    boolean b46 = set41.equals(obj45);
    set.Set set47 = new set.Set();
    set47.clear();
    set.Set set49 = new set.Set();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)0);
    java.lang.Object obj53 = null;
    boolean b54 = set50.equals(obj53);
    set.Set set55 = set49.intersect(set50);
    boolean b57 = set49.belongs((java.lang.Integer)10);
    int i58 = set49.size();
    set.Set set59 = set47.intersect(set49);
    set.Set set60 = set41.intersect(set59);
    set.Set set61 = new set.Set();
    set61.clear();
    set.Set set63 = new set.Set();
    set.Set set64 = new set.Set();
    boolean b66 = set64.remove((java.lang.Integer)0);
    java.lang.Object obj67 = null;
    boolean b68 = set64.equals(obj67);
    set.Set set69 = set63.intersect(set64);
    boolean b71 = set63.belongs((java.lang.Integer)10);
    int i72 = set63.size();
    set.Set set73 = set61.intersect(set63);
    boolean b75 = set61.remove((java.lang.Integer)0);
    boolean b77 = set61.remove((java.lang.Integer)0);
    set.Set set78 = new set.Set();
    set.Set set79 = new set.Set();
    boolean b81 = set79.remove((java.lang.Integer)0);
    java.lang.Object obj82 = null;
    boolean b83 = set79.equals(obj82);
    set.Set set84 = set78.intersect(set79);
    boolean b86 = set78.belongs((java.lang.Integer)10);
    set78.clear();
    int i88 = set78.size();
    boolean b89 = set61.equals((java.lang.Object)set78);
    boolean b91 = set61.add((java.lang.Integer)10);
    set.Set set92 = set41.intersect(set61);
    boolean b93 = set0.equals((java.lang.Object)set92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    java.lang.Integer[] i_array14 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i15 = new java.util.ArrayList<java.lang.Integer>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i15, i_array14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set18 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b26 = set19.isEmpty();
    java.lang.Object obj27 = null;
    boolean b28 = set19.equals(obj27);
    set.Set set29 = set18.union(set19);
    set.Set set30 = set6.intersect(set18);
    set18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    set.Set set57 = new set.Set();
    set.Set set58 = new set.Set();
    boolean b60 = set58.remove((java.lang.Integer)0);
    java.lang.Object obj61 = null;
    boolean b62 = set58.equals(obj61);
    set.Set set63 = set57.intersect(set58);
    boolean b65 = set57.belongs((java.lang.Integer)10);
    set57.clear();
    int i67 = set57.size();
    boolean b69 = set57.add((java.lang.Integer)0);
    boolean b70 = set57.isEmpty();
    set.Set set71 = set41.intersect(set57);
    set.Set set72 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set73 = set57.union(set72);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set71);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set6.clear();
    boolean b8 = set6.isEmpty();
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.belongs((java.lang.Integer)0);
    set.Set set13 = new set.Set();
    set13.clear();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    boolean b19 = set15.remove((java.lang.Integer)0);
    int i20 = set15.size();
    boolean b22 = set15.remove((java.lang.Integer)0);
    set.Set set23 = set13.union(set15);
    boolean b25 = set15.belongs((java.lang.Integer)1);
    int i26 = set15.size();
    boolean b27 = set6.equals((java.lang.Object)set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    boolean b18 = set0.add((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b11 = set10.isEmpty();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    set12.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set28.add((java.lang.Integer)(-1));
    set.Set set31 = set12.union(set28);
    set.Set set32 = set10.intersect(set28);
    boolean b34 = set10.remove((java.lang.Integer)2);
    boolean b36 = set10.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b61 = set53.belongs((java.lang.Integer)10);
    set53.clear();
    int i63 = set53.size();
    set.Set set64 = new set.Set();
    set.Set set65 = new set.Set();
    boolean b67 = set65.remove((java.lang.Integer)0);
    java.lang.Object obj68 = null;
    boolean b69 = set65.equals(obj68);
    set.Set set70 = set64.intersect(set65);
    set.Set set71 = new set.Set();
    set.Set set72 = new set.Set();
    boolean b74 = set72.remove((java.lang.Integer)0);
    java.lang.Object obj75 = null;
    boolean b76 = set72.equals(obj75);
    set.Set set77 = set71.intersect(set72);
    boolean b78 = set64.equals((java.lang.Object)set72);
    set.Set set79 = set53.union(set72);
    boolean b81 = set79.add((java.lang.Integer)1);
    set.Set set82 = new set.Set();
    set.Set set83 = new set.Set();
    boolean b85 = set83.remove((java.lang.Integer)0);
    java.lang.Object obj86 = null;
    boolean b87 = set83.equals(obj86);
    set.Set set88 = set82.intersect(set83);
    boolean b89 = set82.isEmpty();
    boolean b91 = set82.add((java.lang.Integer)0);
    boolean b92 = set82.isEmpty();
    int i93 = set82.size();
    boolean b95 = set82.belongs((java.lang.Integer)1);
    boolean b96 = set79.equals((java.lang.Object)b95);
    set.Set set97 = set23.intersect(set79);
    set23.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set97);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set29.belongs((java.lang.Integer)10);
    set29.clear();
    int i39 = set29.size();
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = set29.union(set48);
    set.Set set56 = set28.intersect(set48);
    java.lang.Object obj57 = null;
    boolean b58 = set28.equals(obj57);
    boolean b60 = set28.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set27.clear();
    boolean b30 = set27.belongs((java.lang.Integer)0);
    boolean b32 = set27.remove((java.lang.Integer)1);
    boolean b34 = set27.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    boolean b35 = set33.add((java.lang.Integer)(-1));
    boolean b37 = set33.belongs((java.lang.Integer)0);
    boolean b39 = set33.add((java.lang.Integer)0);
    boolean b40 = set15.equals((java.lang.Object)0);
    boolean b42 = set15.remove((java.lang.Integer)0);
    boolean b43 = set15.isEmpty();
    boolean b45 = set15.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    boolean b58 = set56.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.remove((java.lang.Integer)0);
    boolean b40 = set29.belongs((java.lang.Integer)0);
    boolean b42 = set29.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array46 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i47 = new java.util.ArrayList<java.lang.Integer>();
    boolean b48 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i47, i_array46);
    set.Set set49 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i47);
    set.Set set50 = set29.union(set49);
    boolean b51 = set49.isEmpty();
    boolean b53 = set49.remove((java.lang.Integer)0);
    set.Set set54 = set1.intersect(set49);
    boolean b55 = set49.isEmpty();
    set.Set set56 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set57 = set49.union(set56);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    java.lang.Integer[] i_array14 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i15 = new java.util.ArrayList<java.lang.Integer>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i15, i_array14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set18 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b26 = set19.isEmpty();
    java.lang.Object obj27 = null;
    boolean b28 = set19.equals(obj27);
    set.Set set29 = set18.union(set19);
    set.Set set30 = set6.intersect(set18);
    boolean b32 = set30.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    int i16 = set14.size();
    set14.clear();
    set14.clear();
    boolean b19 = set14.isEmpty();
    boolean b21 = set14.belongs((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set6.clear();
    set6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    set15.clear();
    boolean b29 = set15.remove((java.lang.Integer)10);
    boolean b31 = set15.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b53 = set45.belongs((java.lang.Integer)10);
    set45.clear();
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b63 = set61.add((java.lang.Integer)(-1));
    set.Set set64 = set45.union(set61);
    set61.clear();
    boolean b67 = set61.remove((java.lang.Integer)1);
    boolean b68 = set27.equals((java.lang.Object)set61);
    set.Set set69 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set70 = set27.intersect(set69);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    set19.clear();
    java.lang.Object obj28 = null;
    boolean b29 = set19.equals(obj28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set27.clear();
    boolean b30 = set27.add((java.lang.Integer)(-1));
    boolean b31 = set27.isEmpty();
    int i32 = set27.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    int i45 = set6.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = new set.Set();
    boolean b7 = set5.remove((java.lang.Integer)0);
    boolean b9 = set5.remove((java.lang.Integer)0);
    int i10 = set5.size();
    boolean b12 = set5.remove((java.lang.Integer)0);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = set5.intersect(set19);
    set.Set set21 = new set.Set();
    set.Set set22 = new set.Set();
    boolean b24 = set22.remove((java.lang.Integer)0);
    java.lang.Object obj25 = null;
    boolean b26 = set22.equals(obj25);
    set.Set set27 = set21.intersect(set22);
    boolean b28 = set21.isEmpty();
    boolean b30 = set21.remove((java.lang.Integer)0);
    set21.clear();
    set.Set set32 = set5.union(set21);
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    boolean b37 = set33.remove((java.lang.Integer)0);
    int i38 = set33.size();
    boolean b40 = set33.remove((java.lang.Integer)0);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    set.Set set48 = set33.intersect(set47);
    set.Set set49 = set32.intersect(set48);
    boolean b50 = set48.isEmpty();
    boolean b52 = set48.belongs((java.lang.Integer)1);
    set.Set set53 = new set.Set();
    set53.clear();
    set.Set set55 = new set.Set();
    boolean b57 = set55.remove((java.lang.Integer)0);
    boolean b59 = set55.remove((java.lang.Integer)0);
    int i60 = set55.size();
    boolean b62 = set55.remove((java.lang.Integer)0);
    set.Set set63 = set53.union(set55);
    int i64 = set63.size();
    set.Set set65 = set48.intersect(set63);
    set.Set set66 = set0.union(set48);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    set0.clear();
    set.Set set5 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set6 = set0.union(set5);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set8.isEmpty();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    int i17 = set11.size();
    set.Set set18 = set8.union(set11);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b27 = set19.belongs((java.lang.Integer)10);
    set19.clear();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set35.add((java.lang.Integer)(-1));
    set.Set set38 = set19.union(set35);
    set35.clear();
    boolean b41 = set35.add((java.lang.Integer)10);
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    boolean b46 = set42.remove((java.lang.Integer)0);
    int i47 = set42.size();
    boolean b49 = set42.remove((java.lang.Integer)0);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    set.Set set57 = set42.intersect(set56);
    boolean b59 = set56.belongs((java.lang.Integer)0);
    set.Set set60 = set35.union(set56);
    boolean b62 = set56.remove((java.lang.Integer)0);
    int i63 = set56.size();
    set.Set set64 = set8.union(set56);
    boolean b66 = set56.belongs((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 10, 10, 0 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set9 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set10 = set8.intersect(set9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    set.Set set11 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set12 = set6.union(set11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.remove((java.lang.Integer)0);
    int i10 = set7.size();
    set.Set set11 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set12 = set7.union(set11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 2);

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    int i6 = set0.size();
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    set15.clear();
    boolean b33 = set15.belongs((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    set0.clear();
    boolean b12 = set0.isEmpty();
    int i13 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b53 = set45.belongs((java.lang.Integer)10);
    set45.clear();
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b63 = set61.add((java.lang.Integer)(-1));
    set.Set set64 = set45.union(set61);
    int i65 = set61.size();
    boolean b66 = set61.isEmpty();
    set.Set set67 = set6.intersect(set61);
    set.Set set68 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set69 = set61.intersect(set68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    int i41 = set34.size();
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    set.Set set49 = set34.intersect(set43);
    set.Set set50 = set0.union(set34);
    int i51 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    set.Set set10 = new set.Set();
    set10.clear();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    int i21 = set12.size();
    set.Set set22 = set10.intersect(set12);
    boolean b23 = set12.isEmpty();
    set.Set set24 = set0.union(set12);
    set.Set set25 = new set.Set();
    set25.clear();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    boolean b31 = set27.remove((java.lang.Integer)0);
    int i32 = set27.size();
    boolean b34 = set27.remove((java.lang.Integer)0);
    set.Set set35 = set25.union(set27);
    boolean b37 = set27.belongs((java.lang.Integer)1);
    int i38 = set27.size();
    set27.clear();
    boolean b41 = set27.belongs((java.lang.Integer)100);
    boolean b43 = set27.add((java.lang.Integer)0);
    set.Set set44 = set24.union(set27);
    boolean b45 = set44.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set28.belongs((java.lang.Integer)10);
    set28.clear();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    set.Set set47 = set28.union(set44);
    set.Set set48 = new set.Set();
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    java.lang.Object obj52 = null;
    boolean b53 = set49.equals(obj52);
    set.Set set54 = set48.intersect(set49);
    set48.clear();
    set.Set set56 = set44.intersect(set48);
    boolean b58 = set56.belongs((java.lang.Integer)(-1));
    boolean b60 = set56.add((java.lang.Integer)1);
    set.Set set61 = set22.intersect(set56);
    java.lang.Object obj62 = null;
    boolean b63 = set56.equals(obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b10 = set0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b8 = set0.isEmpty();
    boolean b10 = set0.remove((java.lang.Integer)3);
    int i11 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set32.clear();
    set.Set set39 = set30.union(set32);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b62 = set55.isEmpty();
    boolean b64 = set55.remove((java.lang.Integer)0);
    set.Set set65 = set40.intersect(set55);
    int i66 = set40.size();
    set.Set set67 = set32.union(set40);
    set.Set set68 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set69 = set40.intersect(set68);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set20.add((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    int i41 = set34.size();
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    set.Set set49 = set34.intersect(set43);
    set.Set set50 = set0.union(set34);
    int i51 = set50.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i51 == 0);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    boolean b5 = set1.remove((java.lang.Integer)0);
    int i6 = set1.size();
    set.Set set7 = set0.intersect(set1);
    int i8 = set1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i8 == 0);

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    boolean b10 = set6.remove((java.lang.Integer)0);
    int i11 = set6.size();
    boolean b13 = set6.remove((java.lang.Integer)0);
    set.Set set14 = set0.intersect(set6);
    boolean b16 = set14.remove((java.lang.Integer)3);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set23.add((java.lang.Integer)(-1));
    boolean b27 = set23.belongs((java.lang.Integer)0);
    boolean b29 = set23.add((java.lang.Integer)(-1));
    set.Set set30 = new set.Set();
    set30.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    boolean b40 = set32.belongs((java.lang.Integer)10);
    int i41 = set32.size();
    set.Set set42 = set30.intersect(set32);
    set.Set set43 = new set.Set();
    set.Set set44 = new set.Set();
    boolean b46 = set44.remove((java.lang.Integer)0);
    java.lang.Object obj47 = null;
    boolean b48 = set44.equals(obj47);
    set.Set set49 = set43.intersect(set44);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    boolean b57 = set43.equals((java.lang.Object)set51);
    set.Set set58 = new set.Set();
    set.Set set59 = new set.Set();
    boolean b61 = set59.remove((java.lang.Integer)0);
    java.lang.Object obj62 = null;
    boolean b63 = set59.equals(obj62);
    set.Set set64 = set58.intersect(set59);
    boolean b65 = set58.isEmpty();
    boolean b67 = set58.remove((java.lang.Integer)0);
    set.Set set68 = set43.intersect(set58);
    int i69 = set43.size();
    set.Set set70 = set32.union(set43);
    boolean b71 = set43.isEmpty();
    boolean b72 = set43.isEmpty();
    set.Set set73 = set23.union(set43);
    set.Set set74 = set14.intersect(set23);
    java.lang.Object obj75 = null;
    boolean b76 = set14.equals(obj75);
    java.lang.Object obj77 = null;
    boolean b78 = set14.equals(obj77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    int i29 = set20.size();
    set.Set set30 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set31 = set20.union(set30);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b40 = set37.belongs((java.lang.Integer)0);
    set.Set set41 = set16.union(set37);
    set41.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    java.lang.Object obj19 = null;
    boolean b20 = set18.equals(obj19);
    boolean b21 = set18.isEmpty();
    set18.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set1.clear();
    boolean b9 = set1.belongs((java.lang.Integer)100);
    boolean b11 = set1.remove((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    boolean b28 = set26.add((java.lang.Integer)1);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.add((java.lang.Integer)0);
    boolean b39 = set29.isEmpty();
    int i40 = set29.size();
    boolean b42 = set29.belongs((java.lang.Integer)1);
    boolean b43 = set26.equals((java.lang.Object)b42);
    boolean b44 = set26.isEmpty();
    boolean b46 = set26.remove((java.lang.Integer)0);
    boolean b48 = set26.belongs((java.lang.Integer)0);
    int i49 = set26.size();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)1);
    int i53 = set50.size();
    boolean b54 = set50.isEmpty();
    int i55 = set50.size();
    boolean b56 = set26.equals((java.lang.Object)set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set28.belongs((java.lang.Integer)10);
    set28.clear();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    set.Set set47 = set28.union(set44);
    set.Set set48 = new set.Set();
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    java.lang.Object obj52 = null;
    boolean b53 = set49.equals(obj52);
    set.Set set54 = set48.intersect(set49);
    set48.clear();
    set.Set set56 = set44.intersect(set48);
    boolean b58 = set56.belongs((java.lang.Integer)(-1));
    boolean b60 = set56.add((java.lang.Integer)1);
    set.Set set61 = set22.intersect(set56);
    set22.clear();
    java.lang.Object obj63 = null;
    boolean b64 = set22.equals(obj63);
    boolean b65 = set22.isEmpty();
    boolean b67 = set22.belongs((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    boolean b28 = set26.add((java.lang.Integer)1);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set29.isEmpty();
    boolean b38 = set29.add((java.lang.Integer)0);
    boolean b39 = set29.isEmpty();
    int i40 = set29.size();
    boolean b42 = set29.belongs((java.lang.Integer)1);
    boolean b43 = set26.equals((java.lang.Object)b42);
    boolean b44 = set26.isEmpty();
    boolean b46 = set26.remove((java.lang.Integer)0);
    int i47 = set26.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 1);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b46 = set27.add((java.lang.Integer)0);
    boolean b47 = set27.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set6.clear();
    boolean b8 = set6.isEmpty();
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.belongs((java.lang.Integer)0);
    boolean b14 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b27 = set25.add((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = new set.Set();
    set.Set set31 = new set.Set();
    boolean b33 = set31.remove((java.lang.Integer)0);
    java.lang.Object obj34 = null;
    boolean b35 = set31.equals(obj34);
    set.Set set36 = set30.intersect(set31);
    java.lang.Object obj37 = null;
    boolean b38 = set31.equals(obj37);
    boolean b39 = set25.equals(obj37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    int i3 = set0.size();
    boolean b4 = set0.isEmpty();
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b40 = set37.belongs((java.lang.Integer)0);
    set.Set set41 = set16.union(set37);
    boolean b43 = set16.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array17 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i18 = new java.util.ArrayList<java.lang.Integer>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i18, i_array17);
    set.Set set20 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i18);
    set.Set set21 = set0.union(set20);
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set22.equals((java.lang.Object)set30);
    set.Set set37 = new set.Set();
    set.Set set38 = new set.Set();
    boolean b40 = set38.remove((java.lang.Integer)0);
    java.lang.Object obj41 = null;
    boolean b42 = set38.equals(obj41);
    set.Set set43 = set37.intersect(set38);
    boolean b44 = set37.isEmpty();
    boolean b46 = set37.remove((java.lang.Integer)0);
    set.Set set47 = set22.intersect(set37);
    set37.clear();
    int i49 = set37.size();
    boolean b50 = set37.isEmpty();
    boolean b51 = set21.equals((java.lang.Object)b50);
    set.Set set52 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set53 = set21.intersect(set52);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set16.clear();
    boolean b25 = set16.belongs((java.lang.Integer)100);
    int i26 = set16.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set6.clear();
    set.Set set8 = new set.Set();
    set8.clear();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = set8.union(set10);
    set10.clear();
    set.Set set20 = set6.union(set10);
    set6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    set15.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set31.add((java.lang.Integer)(-1));
    set.Set set34 = set15.union(set31);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    set35.clear();
    set.Set set43 = set31.intersect(set35);
    boolean b44 = set43.isEmpty();
    boolean b46 = set43.belongs((java.lang.Integer)100);
    set.Set set47 = set2.union(set43);
    boolean b48 = set2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set1.clear();
    boolean b9 = set1.remove((java.lang.Integer)0);
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b17 = set1.equals((java.lang.Object)set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    int i3 = set0.size();
    set.Set set4 = new set.Set();
    set.Set set5 = new set.Set();
    boolean b7 = set5.remove((java.lang.Integer)0);
    java.lang.Object obj8 = null;
    boolean b9 = set5.equals(obj8);
    set.Set set10 = set4.intersect(set5);
    java.lang.Object obj11 = null;
    boolean b12 = set5.equals(obj11);
    boolean b14 = set5.add((java.lang.Integer)0);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    java.lang.Object obj22 = null;
    boolean b23 = set16.equals(obj22);
    boolean b25 = set16.add((java.lang.Integer)0);
    set.Set set26 = set5.union(set16);
    set.Set set27 = set0.intersect(set5);
    boolean b28 = set0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    boolean b15 = set2.isEmpty();
    set2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    java.lang.Object obj41 = null;
    boolean b42 = set2.equals(obj41);
    int i43 = set2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set28.belongs((java.lang.Integer)10);
    set28.clear();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    set.Set set47 = set28.union(set44);
    set.Set set48 = new set.Set();
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    java.lang.Object obj52 = null;
    boolean b53 = set49.equals(obj52);
    set.Set set54 = set48.intersect(set49);
    set48.clear();
    set.Set set56 = set44.intersect(set48);
    boolean b58 = set56.belongs((java.lang.Integer)(-1));
    boolean b60 = set56.add((java.lang.Integer)1);
    set.Set set61 = set22.intersect(set56);
    set22.clear();
    java.lang.Object obj63 = null;
    boolean b64 = set22.equals(obj63);
    boolean b65 = set22.isEmpty();
    boolean b67 = set22.add((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set43.clear();
    boolean b47 = set43.add((java.lang.Integer)1);
    boolean b49 = set43.remove((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    boolean b17 = set0.add((java.lang.Integer)(-1));
    boolean b18 = set0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    boolean b46 = set6.remove((java.lang.Integer)0);
    boolean b48 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    set7.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set22.belongs((java.lang.Integer)10);
    set22.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    boolean b40 = set38.add((java.lang.Integer)(-1));
    set.Set set41 = set22.union(set38);
    int i42 = set41.size();
    set.Set set43 = set7.union(set41);
    boolean b44 = set7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    boolean b5 = set0.equals((java.lang.Object)(byte)10);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    boolean b22 = set1.remove((java.lang.Integer)0);
    boolean b24 = set1.remove((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    boolean b54 = set7.belongs((java.lang.Integer)0);
    boolean b55 = set7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    boolean b17 = set0.add((java.lang.Integer)(-1));
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set18.isEmpty();
    boolean b27 = set18.add((java.lang.Integer)0);
    boolean b28 = set18.isEmpty();
    int i29 = set18.size();
    boolean b31 = set18.belongs((java.lang.Integer)1);
    boolean b32 = set0.equals((java.lang.Object)set18);
    boolean b34 = set18.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    set2.clear();
    int i12 = set2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    java.lang.Integer[] i_array14 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i15 = new java.util.ArrayList<java.lang.Integer>();
    boolean b16 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i15, i_array14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set18 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i15);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b26 = set19.isEmpty();
    java.lang.Object obj27 = null;
    boolean b28 = set19.equals(obj27);
    set.Set set29 = set18.union(set19);
    set.Set set30 = set6.intersect(set18);
    int i31 = set18.size();
    java.lang.Integer[] i_array35 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i36 = new java.util.ArrayList<java.lang.Integer>();
    boolean b37 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i36, i_array35);
    set.Set set38 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i36);
    set38.clear();
    set.Set set40 = new set.Set();
    set40.clear();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    boolean b46 = set42.remove((java.lang.Integer)0);
    int i47 = set42.size();
    boolean b49 = set42.remove((java.lang.Integer)0);
    set.Set set50 = set40.union(set42);
    set42.clear();
    set.Set set52 = set38.union(set42);
    boolean b54 = set52.remove((java.lang.Integer)3);
    boolean b55 = set18.equals((java.lang.Object)b54);
    boolean b56 = set18.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)0);
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.add((java.lang.Integer)100);
    boolean b19 = set9.remove((java.lang.Integer)10);
    java.lang.Object obj20 = null;
    boolean b21 = set9.equals(obj20);
    set.Set set22 = set1.intersect(set9);
    int i23 = set9.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    java.lang.Object obj11 = null;
    boolean b12 = set0.equals(obj11);
    java.lang.Object obj13 = null;
    boolean b14 = set0.equals(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    int i24 = set23.size();
    boolean b26 = set23.belongs((java.lang.Integer)(-1));
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set33.clear();
    set.Set set35 = set23.union(set33);
    set.Set set36 = set0.intersect(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b9 = set6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b45 = set43.isEmpty();
    boolean b47 = set43.belongs((java.lang.Integer)1);
    set.Set set48 = new set.Set();
    set48.clear();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)0);
    boolean b54 = set50.remove((java.lang.Integer)0);
    int i55 = set50.size();
    boolean b57 = set50.remove((java.lang.Integer)0);
    set.Set set58 = set48.union(set50);
    int i59 = set58.size();
    set.Set set60 = set43.intersect(set58);
    set58.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }

    java.lang.Integer[] i_array5 = new java.lang.Integer[] { 0, 1, (-1), 0, (-1) };
    java.util.ArrayList<java.lang.Integer> arraylist_i6 = new java.util.ArrayList<java.lang.Integer>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i6, i_array5);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    boolean b10 = set8.add((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    boolean b17 = set14.belongs((java.lang.Integer)0);
    boolean b18 = set14.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set20.add((java.lang.Integer)0);
    set20.clear();
    set.Set set32 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set33 = set20.intersect(set32);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    java.lang.Object obj15 = null;
    boolean b16 = set14.equals(obj15);
    java.lang.Integer[] i_array20 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i21 = new java.util.ArrayList<java.lang.Integer>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i21, i_array20);
    set.Set set23 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i21);
    set.Set set24 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i21);
    set.Set set25 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i21);
    boolean b26 = set25.isEmpty();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    int i34 = set28.size();
    set.Set set35 = set25.union(set28);
    set.Set set36 = set14.union(set25);
    boolean b38 = set25.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    int i20 = set16.size();
    boolean b21 = set16.isEmpty();
    boolean b23 = set16.belongs((java.lang.Integer)0);
    set16.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    boolean b4 = set0.add((java.lang.Integer)0);
    set.Set set5 = new set.Set();
    boolean b7 = set5.remove((java.lang.Integer)0);
    boolean b9 = set5.remove((java.lang.Integer)0);
    int i10 = set5.size();
    boolean b12 = set5.remove((java.lang.Integer)0);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = set5.intersect(set19);
    set.Set set21 = new set.Set();
    set.Set set22 = new set.Set();
    boolean b24 = set22.remove((java.lang.Integer)0);
    java.lang.Object obj25 = null;
    boolean b26 = set22.equals(obj25);
    set.Set set27 = set21.intersect(set22);
    boolean b28 = set21.isEmpty();
    boolean b30 = set21.remove((java.lang.Integer)0);
    set21.clear();
    set.Set set32 = set5.union(set21);
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    boolean b37 = set33.remove((java.lang.Integer)0);
    int i38 = set33.size();
    boolean b40 = set33.remove((java.lang.Integer)0);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    set.Set set48 = set33.intersect(set47);
    set.Set set49 = set32.intersect(set48);
    boolean b50 = set48.isEmpty();
    boolean b52 = set48.belongs((java.lang.Integer)1);
    set.Set set53 = new set.Set();
    set53.clear();
    set.Set set55 = new set.Set();
    boolean b57 = set55.remove((java.lang.Integer)0);
    boolean b59 = set55.remove((java.lang.Integer)0);
    int i60 = set55.size();
    boolean b62 = set55.remove((java.lang.Integer)0);
    set.Set set63 = set53.union(set55);
    int i64 = set63.size();
    set.Set set65 = set48.intersect(set63);
    set.Set set66 = set0.union(set48);
    java.lang.Object obj67 = null;
    boolean b68 = set48.equals(obj67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set.Set set14 = new set.Set();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    java.lang.Object obj18 = null;
    boolean b19 = set15.equals(obj18);
    set.Set set20 = set14.intersect(set15);
    boolean b22 = set14.add((java.lang.Integer)100);
    boolean b24 = set14.remove((java.lang.Integer)10);
    java.lang.Object obj25 = null;
    boolean b26 = set14.equals(obj25);
    boolean b28 = set14.belongs((java.lang.Integer)1);
    java.lang.Integer[] i_array32 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i33 = new java.util.ArrayList<java.lang.Integer>();
    boolean b34 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i33, i_array32);
    set.Set set35 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i33);
    set.Set set36 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i33);
    set.Set set37 = new set.Set();
    set.Set set38 = new set.Set();
    boolean b40 = set38.remove((java.lang.Integer)0);
    java.lang.Object obj41 = null;
    boolean b42 = set38.equals(obj41);
    set.Set set43 = set37.intersect(set38);
    boolean b44 = set37.isEmpty();
    java.lang.Object obj45 = null;
    boolean b46 = set37.equals(obj45);
    set.Set set47 = set36.union(set37);
    boolean b49 = set36.add((java.lang.Integer)0);
    boolean b51 = set36.add((java.lang.Integer)0);
    boolean b53 = set36.add((java.lang.Integer)0);
    set.Set set54 = set14.intersect(set36);
    boolean b55 = set2.equals((java.lang.Object)set54);
    set54.clear();
    boolean b58 = set54.add((java.lang.Integer)0);
    set54.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    set15.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set31.add((java.lang.Integer)(-1));
    set.Set set34 = set15.union(set31);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    set35.clear();
    set.Set set43 = set31.intersect(set35);
    boolean b44 = set43.isEmpty();
    boolean b46 = set43.belongs((java.lang.Integer)100);
    set.Set set47 = set2.union(set43);
    set.Set set48 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set49 = set43.intersect(set48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array13 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i14 = new java.util.ArrayList<java.lang.Integer>();
    boolean b15 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i14, i_array13);
    set.Set set16 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i14);
    set.Set set17 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i14);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set18.isEmpty();
    java.lang.Object obj26 = null;
    boolean b27 = set18.equals(obj26);
    set.Set set28 = set17.union(set18);
    boolean b30 = set17.add((java.lang.Integer)0);
    boolean b32 = set17.add((java.lang.Integer)0);
    set.Set set33 = new set.Set();
    set33.clear();
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    boolean b43 = set35.belongs((java.lang.Integer)10);
    int i44 = set35.size();
    set.Set set45 = set33.intersect(set35);
    boolean b47 = set33.remove((java.lang.Integer)0);
    boolean b49 = set33.remove((java.lang.Integer)0);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    boolean b58 = set50.belongs((java.lang.Integer)10);
    set50.clear();
    int i60 = set50.size();
    boolean b61 = set33.equals((java.lang.Object)set50);
    set.Set set62 = set17.union(set33);
    boolean b64 = set17.belongs((java.lang.Integer)0);
    set.Set set65 = set7.union(set17);
    boolean b66 = set17.isEmpty();
    set.Set set67 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set68 = set17.intersect(set67);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b53 = set45.belongs((java.lang.Integer)10);
    set45.clear();
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    boolean b63 = set61.add((java.lang.Integer)(-1));
    set.Set set64 = set45.union(set61);
    int i65 = set61.size();
    boolean b66 = set61.isEmpty();
    set.Set set67 = set6.intersect(set61);
    set.Set set68 = new set.Set();
    set68.clear();
    set.Set set70 = new set.Set();
    set.Set set71 = new set.Set();
    boolean b73 = set71.remove((java.lang.Integer)0);
    java.lang.Object obj74 = null;
    boolean b75 = set71.equals(obj74);
    set.Set set76 = set70.intersect(set71);
    boolean b78 = set70.belongs((java.lang.Integer)10);
    int i79 = set70.size();
    set.Set set80 = set68.intersect(set70);
    boolean b81 = set70.isEmpty();
    boolean b82 = set67.equals((java.lang.Object)set70);
    java.lang.Object obj83 = null;
    boolean b84 = set67.equals(obj83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 10, 10, 0 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    boolean b22 = set1.remove((java.lang.Integer)0);
    int i23 = set1.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 0);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b46 = set43.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array17 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i18 = new java.util.ArrayList<java.lang.Integer>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i18, i_array17);
    set.Set set20 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i18);
    set.Set set21 = set0.union(set20);
    int i22 = set20.size();
    int i23 = set20.size();
    set20.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 2);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)10);
    set1.clear();
    boolean b11 = set1.belongs((java.lang.Integer)3);
    set.Set set12 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set13 = set1.union(set12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set15.equals(obj29);
    boolean b32 = set15.remove((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    boolean b11 = set6.belongs((java.lang.Integer)1);
    boolean b12 = set6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    java.lang.Object obj9 = null;
    boolean b10 = set8.equals(obj9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    set0.clear();
    boolean b12 = set0.isEmpty();
    boolean b13 = set0.isEmpty();
    boolean b14 = set0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    java.lang.Object obj3 = null;
    boolean b4 = set0.equals(obj3);
    boolean b6 = set0.remove((java.lang.Integer)2);
    set.Set set7 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set8 = set0.union(set7);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    boolean b18 = set0.add((java.lang.Integer)(-1));
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    int i26 = set25.size();
    boolean b28 = set25.add((java.lang.Integer)0);
    set25.clear();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)1);
    boolean b34 = set30.add((java.lang.Integer)0);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    boolean b43 = set35.belongs((java.lang.Integer)10);
    set35.clear();
    int i45 = set35.size();
    set.Set set46 = new set.Set();
    set.Set set47 = new set.Set();
    boolean b49 = set47.remove((java.lang.Integer)0);
    java.lang.Object obj50 = null;
    boolean b51 = set47.equals(obj50);
    set.Set set52 = set46.intersect(set47);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b60 = set46.equals((java.lang.Object)set54);
    set.Set set61 = set35.union(set54);
    set.Set set62 = set30.union(set61);
    set.Set set63 = set25.intersect(set30);
    boolean b64 = set0.equals((java.lang.Object)set25);
    set.Set set65 = new set.Set();
    set.Set set66 = new set.Set();
    boolean b68 = set66.remove((java.lang.Integer)0);
    java.lang.Object obj69 = null;
    boolean b70 = set66.equals(obj69);
    set.Set set71 = set65.intersect(set66);
    boolean b73 = set71.add((java.lang.Integer)(-1));
    int i74 = set71.size();
    boolean b76 = set71.belongs((java.lang.Integer)1);
    int i77 = set71.size();
    set.Set set78 = set25.union(set71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set78);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)0);
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.add((java.lang.Integer)100);
    boolean b19 = set9.remove((java.lang.Integer)10);
    java.lang.Object obj20 = null;
    boolean b21 = set9.equals(obj20);
    set.Set set22 = set1.intersect(set9);
    set9.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    set17.clear();
    int i27 = set17.size();
    boolean b28 = set0.equals((java.lang.Object)set17);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set29.belongs((java.lang.Integer)10);
    set29.clear();
    int i39 = set29.size();
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = set29.union(set48);
    boolean b57 = set55.add((java.lang.Integer)1);
    set.Set set58 = new set.Set();
    set.Set set59 = new set.Set();
    boolean b61 = set59.remove((java.lang.Integer)0);
    java.lang.Object obj62 = null;
    boolean b63 = set59.equals(obj62);
    set.Set set64 = set58.intersect(set59);
    boolean b65 = set58.isEmpty();
    boolean b67 = set58.add((java.lang.Integer)0);
    boolean b68 = set58.isEmpty();
    int i69 = set58.size();
    boolean b71 = set58.belongs((java.lang.Integer)1);
    boolean b72 = set55.equals((java.lang.Object)b71);
    boolean b73 = set17.equals((java.lang.Object)set55);
    boolean b75 = set17.remove((java.lang.Integer)3);
    boolean b77 = set17.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    boolean b28 = set26.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    set6.clear();
    boolean b10 = set6.isEmpty();
    boolean b12 = set6.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b40 = set37.belongs((java.lang.Integer)0);
    set.Set set41 = set16.union(set37);
    boolean b43 = set37.remove((java.lang.Integer)0);
    int i44 = set37.size();
    boolean b46 = set37.equals((java.lang.Object)1.0f);
    int i47 = set37.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)0);
    boolean b30 = set15.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 10, 10, 0 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set9 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b11 = set9.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    int i41 = set34.size();
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    set.Set set49 = set34.intersect(set43);
    set.Set set50 = set0.union(set34);
    set.Set set51 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set52 = set0.intersect(set51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    boolean b10 = set1.isEmpty();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    boolean b15 = set11.remove((java.lang.Integer)0);
    int i16 = set11.size();
    boolean b18 = set11.remove((java.lang.Integer)0);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    set.Set set26 = set11.intersect(set25);
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    boolean b34 = set27.isEmpty();
    boolean b36 = set27.remove((java.lang.Integer)0);
    set27.clear();
    set.Set set38 = set11.union(set27);
    set.Set set39 = set1.intersect(set11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    int i9 = set6.size();
    boolean b11 = set6.belongs((java.lang.Integer)1);
    int i12 = set6.size();
    boolean b14 = set6.remove((java.lang.Integer)0);
    set.Set set15 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set16 = set6.intersect(set15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set29 = set22.union(set28);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    set1.clear();
    int i28 = set1.size();
    boolean b30 = set1.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b24 = set17.isEmpty();
    boolean b26 = set17.remove((java.lang.Integer)0);
    boolean b28 = set17.belongs((java.lang.Integer)0);
    boolean b30 = set17.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array34 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i35 = new java.util.ArrayList<java.lang.Integer>();
    boolean b36 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i35, i_array34);
    set.Set set37 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i35);
    set.Set set38 = set17.union(set37);
    boolean b39 = set37.isEmpty();
    boolean b41 = set37.remove((java.lang.Integer)0);
    boolean b42 = set37.isEmpty();
    boolean b43 = set0.equals((java.lang.Object)set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b61 = set53.belongs((java.lang.Integer)10);
    set53.clear();
    int i63 = set53.size();
    set.Set set64 = new set.Set();
    set.Set set65 = new set.Set();
    boolean b67 = set65.remove((java.lang.Integer)0);
    java.lang.Object obj68 = null;
    boolean b69 = set65.equals(obj68);
    set.Set set70 = set64.intersect(set65);
    set.Set set71 = new set.Set();
    set.Set set72 = new set.Set();
    boolean b74 = set72.remove((java.lang.Integer)0);
    java.lang.Object obj75 = null;
    boolean b76 = set72.equals(obj75);
    set.Set set77 = set71.intersect(set72);
    boolean b78 = set64.equals((java.lang.Object)set72);
    set.Set set79 = set53.union(set72);
    boolean b81 = set79.add((java.lang.Integer)1);
    set.Set set82 = new set.Set();
    set.Set set83 = new set.Set();
    boolean b85 = set83.remove((java.lang.Integer)0);
    java.lang.Object obj86 = null;
    boolean b87 = set83.equals(obj86);
    set.Set set88 = set82.intersect(set83);
    boolean b89 = set82.isEmpty();
    boolean b91 = set82.add((java.lang.Integer)0);
    boolean b92 = set82.isEmpty();
    int i93 = set82.size();
    boolean b95 = set82.belongs((java.lang.Integer)1);
    boolean b96 = set79.equals((java.lang.Object)b95);
    set.Set set97 = set23.intersect(set79);
    boolean b99 = set79.remove((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    set0.clear();
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    set6.clear();
    boolean b12 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    set17.clear();
    int i27 = set17.size();
    boolean b28 = set0.equals((java.lang.Object)set17);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set29.belongs((java.lang.Integer)10);
    set29.clear();
    int i39 = set29.size();
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    set.Set set47 = new set.Set();
    set.Set set48 = new set.Set();
    boolean b50 = set48.remove((java.lang.Integer)0);
    java.lang.Object obj51 = null;
    boolean b52 = set48.equals(obj51);
    set.Set set53 = set47.intersect(set48);
    boolean b54 = set40.equals((java.lang.Object)set48);
    set.Set set55 = set29.union(set48);
    boolean b57 = set55.add((java.lang.Integer)1);
    set.Set set58 = new set.Set();
    set.Set set59 = new set.Set();
    boolean b61 = set59.remove((java.lang.Integer)0);
    java.lang.Object obj62 = null;
    boolean b63 = set59.equals(obj62);
    set.Set set64 = set58.intersect(set59);
    boolean b65 = set58.isEmpty();
    boolean b67 = set58.add((java.lang.Integer)0);
    boolean b68 = set58.isEmpty();
    int i69 = set58.size();
    boolean b71 = set58.belongs((java.lang.Integer)1);
    boolean b72 = set55.equals((java.lang.Object)b71);
    boolean b73 = set17.equals((java.lang.Object)set55);
    set.Set set74 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set75 = set17.union(set74);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    set.Set set13 = new set.Set();
    set13.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    int i24 = set15.size();
    set.Set set25 = set13.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b48 = set41.isEmpty();
    boolean b50 = set41.remove((java.lang.Integer)0);
    set.Set set51 = set26.intersect(set41);
    int i52 = set26.size();
    set.Set set53 = set15.union(set26);
    boolean b54 = set26.isEmpty();
    boolean b55 = set26.isEmpty();
    set.Set set56 = set6.union(set26);
    boolean b58 = set6.remove((java.lang.Integer)0);
    boolean b59 = set6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    java.lang.Object obj4 = null;
    boolean b5 = set0.equals(obj4);
    boolean b7 = set0.remove((java.lang.Integer)1);
    boolean b8 = set0.isEmpty();
    boolean b10 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    boolean b28 = set0.isEmpty();
    int i29 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array24 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i25 = new java.util.ArrayList<java.lang.Integer>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i25, i_array24);
    set.Set set27 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i25);
    set.Set set28 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i25);
    set.Set set29 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i25);
    boolean b30 = set7.equals((java.lang.Object)set29);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    boolean b38 = set31.isEmpty();
    boolean b40 = set31.remove((java.lang.Integer)0);
    boolean b42 = set31.belongs((java.lang.Integer)0);
    boolean b44 = set31.remove((java.lang.Integer)(-1));
    set.Set set45 = set7.intersect(set31);
    boolean b47 = set31.belongs((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    java.lang.Object obj3 = null;
    boolean b4 = set0.equals(obj3);
    boolean b6 = set0.remove((java.lang.Integer)0);
    int i7 = set0.size();
    set.Set set8 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set9 = set0.intersect(set8);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    set.Set set14 = new set.Set();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    java.lang.Object obj18 = null;
    boolean b19 = set15.equals(obj18);
    set.Set set20 = set14.intersect(set15);
    boolean b21 = set7.equals((java.lang.Object)set15);
    set.Set set22 = new set.Set();
    set22.clear();
    set.Set set24 = new set.Set();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = set24.intersect(set25);
    boolean b32 = set24.belongs((java.lang.Integer)10);
    int i33 = set24.size();
    set.Set set34 = set22.intersect(set24);
    boolean b36 = set22.remove((java.lang.Integer)0);
    set.Set set37 = set7.union(set22);
    set.Set set38 = set1.intersect(set37);
    java.lang.Object obj39 = null;
    boolean b40 = set38.equals(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.belongs((java.lang.Integer)0);
    boolean b11 = set7.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    boolean b35 = set33.add((java.lang.Integer)(-1));
    boolean b37 = set33.belongs((java.lang.Integer)0);
    boolean b39 = set33.add((java.lang.Integer)0);
    boolean b40 = set15.equals((java.lang.Object)0);
    boolean b42 = set15.belongs((java.lang.Integer)0);
    set15.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    boolean b11 = set0.remove((java.lang.Integer)100);
    boolean b13 = set0.remove((java.lang.Integer)0);
    set.Set set14 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set15 = set0.union(set14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    set7.clear();
    set.Set set22 = new set.Set();
    set22.clear();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    boolean b28 = set24.remove((java.lang.Integer)0);
    int i29 = set24.size();
    boolean b31 = set24.remove((java.lang.Integer)0);
    set.Set set32 = set22.union(set24);
    boolean b34 = set32.add((java.lang.Integer)0);
    set.Set set35 = set7.union(set32);
    boolean b37 = set7.belongs((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array17 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i18 = new java.util.ArrayList<java.lang.Integer>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i18, i_array17);
    set.Set set20 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i18);
    set.Set set21 = set0.union(set20);
    set.Set set22 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set23 = set20.intersect(set22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    set17.clear();
    int i27 = set17.size();
    boolean b28 = set0.equals((java.lang.Object)set17);
    boolean b30 = set0.add((java.lang.Integer)10);
    boolean b32 = set0.remove((java.lang.Integer)100);
    java.lang.Object obj33 = null;
    boolean b34 = set0.equals(obj33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set28.belongs((java.lang.Integer)10);
    set28.clear();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    set.Set set47 = set28.union(set44);
    set.Set set48 = new set.Set();
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    java.lang.Object obj52 = null;
    boolean b53 = set49.equals(obj52);
    set.Set set54 = set48.intersect(set49);
    set48.clear();
    set.Set set56 = set44.intersect(set48);
    boolean b58 = set56.belongs((java.lang.Integer)(-1));
    boolean b60 = set56.add((java.lang.Integer)1);
    set.Set set61 = set22.intersect(set56);
    set22.clear();
    java.lang.Object obj63 = null;
    boolean b64 = set22.equals(obj63);
    boolean b65 = set22.isEmpty();
    boolean b67 = set22.remove((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    int i11 = set10.size();
    boolean b13 = set10.belongs((java.lang.Integer)3);
    boolean b15 = set10.belongs((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    java.lang.Object obj23 = null;
    boolean b24 = set17.equals(obj23);
    boolean b26 = set17.add((java.lang.Integer)0);
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    java.lang.Object obj34 = null;
    boolean b35 = set28.equals(obj34);
    boolean b37 = set28.add((java.lang.Integer)0);
    set.Set set38 = set17.union(set28);
    set.Set set39 = new set.Set();
    set.Set set40 = new set.Set();
    boolean b42 = set40.remove((java.lang.Integer)0);
    java.lang.Object obj43 = null;
    boolean b44 = set40.equals(obj43);
    set.Set set45 = set39.intersect(set40);
    boolean b47 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    set.Set set49 = set28.intersect(set40);
    set.Set set50 = set10.intersect(set28);
    set.Set set51 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set52 = set10.union(set51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b27 = set0.add((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    set.Set set14 = new set.Set();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    java.lang.Object obj18 = null;
    boolean b19 = set15.equals(obj18);
    set.Set set20 = set14.intersect(set15);
    boolean b21 = set7.equals((java.lang.Object)set15);
    set.Set set22 = new set.Set();
    set22.clear();
    set.Set set24 = new set.Set();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = set24.intersect(set25);
    boolean b32 = set24.belongs((java.lang.Integer)10);
    int i33 = set24.size();
    set.Set set34 = set22.intersect(set24);
    boolean b36 = set22.remove((java.lang.Integer)0);
    set.Set set37 = set7.union(set22);
    set.Set set38 = set1.intersect(set37);
    set.Set set39 = new set.Set();
    set.Set set40 = new set.Set();
    boolean b42 = set40.remove((java.lang.Integer)0);
    java.lang.Object obj43 = null;
    boolean b44 = set40.equals(obj43);
    set.Set set45 = set39.intersect(set40);
    boolean b47 = set39.belongs((java.lang.Integer)10);
    set39.clear();
    int i49 = set39.size();
    boolean b51 = set39.add((java.lang.Integer)0);
    boolean b52 = set39.isEmpty();
    set.Set set53 = set37.union(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b11 = set2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.add((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    set.Set set16 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set17 = set0.union(set16);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    set.Set set15 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set16 = set0.intersect(set15);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    boolean b35 = set33.add((java.lang.Integer)(-1));
    boolean b37 = set33.belongs((java.lang.Integer)0);
    boolean b39 = set33.add((java.lang.Integer)0);
    boolean b40 = set15.equals((java.lang.Object)0);
    boolean b42 = set15.remove((java.lang.Integer)0);
    boolean b43 = set15.isEmpty();
    int i44 = set15.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    boolean b13 = set2.isEmpty();
    set.Set set14 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set15 = set2.intersect(set14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    boolean b16 = set0.isEmpty();
    boolean b18 = set0.remove((java.lang.Integer)0);
    boolean b20 = set0.add((java.lang.Integer)0);
    boolean b22 = set0.belongs((java.lang.Integer)0);
    boolean b24 = set0.add((java.lang.Integer)0);
    int i25 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 1);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    set0.clear();
    int i11 = set0.size();
    java.lang.Integer[] i_array15 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i16 = new java.util.ArrayList<java.lang.Integer>();
    boolean b17 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i16, i_array15);
    set.Set set18 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i16);
    boolean b20 = set18.remove((java.lang.Integer)0);
    set.Set set21 = new set.Set();
    set.Set set22 = new set.Set();
    boolean b24 = set22.remove((java.lang.Integer)0);
    java.lang.Object obj25 = null;
    boolean b26 = set22.equals(obj25);
    set.Set set27 = set21.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set21.equals((java.lang.Object)set29);
    set.Set set36 = set18.intersect(set29);
    boolean b37 = set0.equals((java.lang.Object)set18);
    java.lang.Integer[] i_array41 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i42 = new java.util.ArrayList<java.lang.Integer>();
    boolean b43 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i42, i_array41);
    set.Set set44 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i42);
    set.Set set45 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i42);
    set.Set set46 = new set.Set();
    set.Set set47 = new set.Set();
    boolean b49 = set47.remove((java.lang.Integer)0);
    java.lang.Object obj50 = null;
    boolean b51 = set47.equals(obj50);
    set.Set set52 = set46.intersect(set47);
    boolean b53 = set46.isEmpty();
    java.lang.Object obj54 = null;
    boolean b55 = set46.equals(obj54);
    set.Set set56 = set45.union(set46);
    boolean b58 = set45.remove((java.lang.Integer)0);
    set45.clear();
    int i60 = set45.size();
    set45.clear();
    set.Set set62 = set18.intersect(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    int i12 = set0.size();
    boolean b14 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    java.lang.Object obj15 = null;
    boolean b16 = set9.equals(obj15);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set23.add((java.lang.Integer)(-1));
    boolean b27 = set23.belongs((java.lang.Integer)0);
    boolean b29 = set23.add((java.lang.Integer)(-1));
    set.Set set30 = set9.intersect(set23);
    boolean b31 = set30.isEmpty();
    boolean b32 = set0.equals((java.lang.Object)b31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b52 = set43.equals((java.lang.Object)set46);
    boolean b54 = set46.belongs((java.lang.Integer)0);
    set46.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    set.Set set45 = new set.Set();
    set.Set set46 = new set.Set();
    boolean b48 = set46.remove((java.lang.Integer)0);
    java.lang.Object obj49 = null;
    boolean b50 = set46.equals(obj49);
    set.Set set51 = set45.intersect(set46);
    boolean b52 = set43.equals((java.lang.Object)set46);
    set46.clear();
    int i54 = set46.size();
    boolean b56 = set46.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    set0.clear();
    boolean b10 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    set1.clear();
    java.lang.Object obj10 = null;
    boolean b11 = set1.equals(obj10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    boolean b25 = set23.remove((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set28.belongs((java.lang.Integer)(-1));
    boolean b32 = set28.add((java.lang.Integer)0);
    set.Set set33 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set34 = set28.intersect(set33);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    boolean b25 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    boolean b54 = set7.belongs((java.lang.Integer)0);
    java.lang.Object obj55 = null;
    boolean b56 = set7.equals(obj55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    java.lang.Object obj11 = null;
    boolean b12 = set0.equals(obj11);
    boolean b14 = set0.belongs((java.lang.Integer)1);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set15.clear();
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    int i33 = set32.size();
    boolean b35 = set32.add((java.lang.Integer)0);
    set32.clear();
    boolean b37 = set32.isEmpty();
    java.lang.Object obj38 = null;
    boolean b39 = set32.equals(obj38);
    set.Set set40 = set15.union(set32);
    set.Set set41 = set0.union(set15);
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    set.Set set49 = new set.Set();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)0);
    java.lang.Object obj53 = null;
    boolean b54 = set50.equals(obj53);
    set.Set set55 = set49.intersect(set50);
    boolean b56 = set42.equals((java.lang.Object)set50);
    set.Set set57 = new set.Set();
    set57.clear();
    set.Set set59 = new set.Set();
    set.Set set60 = new set.Set();
    boolean b62 = set60.remove((java.lang.Integer)0);
    java.lang.Object obj63 = null;
    boolean b64 = set60.equals(obj63);
    set.Set set65 = set59.intersect(set60);
    boolean b67 = set59.belongs((java.lang.Integer)10);
    int i68 = set59.size();
    set.Set set69 = set57.intersect(set59);
    boolean b71 = set57.remove((java.lang.Integer)0);
    set.Set set72 = set42.union(set57);
    set57.clear();
    set.Set set74 = set41.intersect(set57);
    int i75 = set74.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i75 == 0);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b10 = set0.isEmpty();
    boolean b11 = set0.isEmpty();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    boolean b16 = set12.remove((java.lang.Integer)0);
    int i17 = set12.size();
    boolean b19 = set12.remove((java.lang.Integer)0);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set.Set set27 = set12.intersect(set26);
    set27.clear();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    int i36 = set35.size();
    boolean b38 = set35.belongs((java.lang.Integer)(-1));
    set.Set set39 = new set.Set();
    set.Set set40 = new set.Set();
    boolean b42 = set40.remove((java.lang.Integer)0);
    java.lang.Object obj43 = null;
    boolean b44 = set40.equals(obj43);
    set.Set set45 = set39.intersect(set40);
    set45.clear();
    set.Set set47 = set35.union(set45);
    boolean b48 = set27.equals((java.lang.Object)set45);
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    boolean b53 = set49.remove((java.lang.Integer)0);
    int i54 = set49.size();
    set.Set set55 = new set.Set();
    boolean b57 = set55.remove((java.lang.Integer)0);
    boolean b59 = set55.remove((java.lang.Integer)0);
    int i60 = set55.size();
    boolean b62 = set55.remove((java.lang.Integer)0);
    set.Set set63 = set49.intersect(set55);
    boolean b65 = set63.remove((java.lang.Integer)3);
    boolean b66 = set27.equals((java.lang.Object)set63);
    boolean b68 = set27.add((java.lang.Integer)1);
    boolean b69 = set0.equals((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    int i24 = set23.size();
    boolean b26 = set23.belongs((java.lang.Integer)(-1));
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set33.clear();
    set.Set set35 = set23.union(set33);
    boolean b36 = set15.equals((java.lang.Object)set33);
    boolean b38 = set15.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    boolean b57 = set56.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set8.isEmpty();
    boolean b11 = set8.remove((java.lang.Integer)0);
    int i12 = set8.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 2);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    set15.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set31.add((java.lang.Integer)(-1));
    set.Set set34 = set15.union(set31);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    set35.clear();
    set.Set set43 = set31.intersect(set35);
    boolean b44 = set43.isEmpty();
    boolean b46 = set43.belongs((java.lang.Integer)100);
    set.Set set47 = set2.union(set43);
    java.lang.Object obj48 = null;
    boolean b49 = set43.equals(obj48);
    boolean b51 = set43.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    set6.clear();
    boolean b15 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    boolean b32 = set15.belongs((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    set7.clear();
    set.Set set22 = new set.Set();
    set22.clear();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    boolean b28 = set24.remove((java.lang.Integer)0);
    int i29 = set24.size();
    boolean b31 = set24.remove((java.lang.Integer)0);
    set.Set set32 = set22.union(set24);
    boolean b34 = set32.add((java.lang.Integer)0);
    set.Set set35 = set7.union(set32);
    set.Set set36 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set37 = set7.union(set36);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    java.lang.Object obj3 = null;
    boolean b4 = set0.equals(obj3);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    set6.clear();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    boolean b12 = set8.remove((java.lang.Integer)0);
    int i13 = set8.size();
    boolean b15 = set8.remove((java.lang.Integer)0);
    set.Set set16 = set6.union(set8);
    boolean b18 = set16.add((java.lang.Integer)0);
    boolean b20 = set16.belongs((java.lang.Integer)100);
    boolean b22 = set16.remove((java.lang.Integer)10);
    set.Set set23 = set0.union(set16);
    boolean b25 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b45 = set43.isEmpty();
    boolean b47 = set43.belongs((java.lang.Integer)1);
    set.Set set48 = new set.Set();
    set48.clear();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)0);
    boolean b54 = set50.remove((java.lang.Integer)0);
    int i55 = set50.size();
    boolean b57 = set50.remove((java.lang.Integer)0);
    set.Set set58 = set48.union(set50);
    int i59 = set58.size();
    set.Set set60 = set43.intersect(set58);
    int i61 = set43.size();
    boolean b63 = set43.belongs((java.lang.Integer)(-1));
    boolean b65 = set43.belongs((java.lang.Integer)0);
    boolean b67 = set43.remove((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.remove((java.lang.Integer)0);
    set.Set set17 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set18 = set0.union(set17);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    java.lang.Object obj18 = null;
    boolean b19 = set12.equals(obj18);
    boolean b21 = set12.add((java.lang.Integer)0);
    set.Set set22 = set1.union(set12);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b31 = set24.belongs((java.lang.Integer)10);
    set24.clear();
    set.Set set33 = set12.intersect(set24);
    java.lang.Integer[] i_array37 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i38 = new java.util.ArrayList<java.lang.Integer>();
    boolean b39 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i38, i_array37);
    set.Set set40 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i38);
    set.Set set41 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i38);
    boolean b43 = set41.add((java.lang.Integer)100);
    set.Set set44 = set12.intersect(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b11 = set10.isEmpty();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    set12.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set28.add((java.lang.Integer)(-1));
    set.Set set31 = set12.union(set28);
    set.Set set32 = set10.intersect(set28);
    boolean b34 = set10.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set27.clear();
    boolean b30 = set27.add((java.lang.Integer)(-1));
    set27.clear();
    boolean b32 = set27.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    int i11 = set10.size();
    boolean b13 = set10.belongs((java.lang.Integer)3);
    boolean b15 = set10.add((java.lang.Integer)0);
    set10.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b45 = set43.isEmpty();
    boolean b46 = set43.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b45 = set27.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    boolean b12 = set1.remove((java.lang.Integer)0);
    set1.clear();
    boolean b14 = set1.isEmpty();
    boolean b15 = set1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    set7.clear();
    set7.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set1.clear();
    boolean b9 = set1.belongs((java.lang.Integer)100);
    boolean b11 = set1.belongs((java.lang.Integer)0);
    boolean b12 = set1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    boolean b22 = set1.remove((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    boolean b29 = set25.remove((java.lang.Integer)0);
    int i30 = set25.size();
    boolean b32 = set25.remove((java.lang.Integer)0);
    set.Set set33 = set23.union(set25);
    boolean b35 = set25.belongs((java.lang.Integer)1);
    int i36 = set25.size();
    int i37 = set25.size();
    set.Set set38 = new set.Set();
    set38.clear();
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    int i49 = set40.size();
    set.Set set50 = set38.intersect(set40);
    boolean b52 = set38.remove((java.lang.Integer)0);
    boolean b53 = set38.isEmpty();
    boolean b54 = set38.isEmpty();
    boolean b56 = set38.remove((java.lang.Integer)0);
    boolean b58 = set38.add((java.lang.Integer)0);
    set.Set set59 = set25.intersect(set38);
    int i60 = set59.size();
    set.Set set61 = set1.intersect(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    java.lang.Object obj11 = null;
    boolean b12 = set0.equals(obj11);
    boolean b14 = set0.belongs((java.lang.Integer)1);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set15.clear();
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    int i33 = set32.size();
    boolean b35 = set32.add((java.lang.Integer)0);
    set32.clear();
    boolean b37 = set32.isEmpty();
    java.lang.Object obj38 = null;
    boolean b39 = set32.equals(obj38);
    set.Set set40 = set15.union(set32);
    set.Set set41 = set0.union(set15);
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    set.Set set49 = new set.Set();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)0);
    java.lang.Object obj53 = null;
    boolean b54 = set50.equals(obj53);
    set.Set set55 = set49.intersect(set50);
    boolean b56 = set42.equals((java.lang.Object)set50);
    set.Set set57 = new set.Set();
    set57.clear();
    set.Set set59 = new set.Set();
    set.Set set60 = new set.Set();
    boolean b62 = set60.remove((java.lang.Integer)0);
    java.lang.Object obj63 = null;
    boolean b64 = set60.equals(obj63);
    set.Set set65 = set59.intersect(set60);
    boolean b67 = set59.belongs((java.lang.Integer)10);
    int i68 = set59.size();
    set.Set set69 = set57.intersect(set59);
    boolean b71 = set57.remove((java.lang.Integer)0);
    set.Set set72 = set42.union(set57);
    set57.clear();
    set.Set set74 = set41.intersect(set57);
    set.Set set75 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set76 = set74.union(set75);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    boolean b12 = set6.add((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set8.isEmpty();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    int i17 = set11.size();
    set.Set set18 = set8.union(set11);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    boolean b27 = set19.belongs((java.lang.Integer)10);
    set19.clear();
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b37 = set35.add((java.lang.Integer)(-1));
    set.Set set38 = set19.union(set35);
    set35.clear();
    boolean b41 = set35.add((java.lang.Integer)10);
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    boolean b46 = set42.remove((java.lang.Integer)0);
    int i47 = set42.size();
    boolean b49 = set42.remove((java.lang.Integer)0);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    set.Set set57 = set42.intersect(set56);
    boolean b59 = set56.belongs((java.lang.Integer)0);
    set.Set set60 = set35.union(set56);
    boolean b62 = set56.remove((java.lang.Integer)0);
    int i63 = set56.size();
    set.Set set64 = set8.union(set56);
    java.lang.Object obj65 = null;
    boolean b66 = set64.equals(obj65);
    boolean b68 = set64.remove((java.lang.Integer)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    boolean b29 = set22.remove((java.lang.Integer)0);
    boolean b31 = set22.add((java.lang.Integer)0);
    int i32 = set22.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i32 == 1);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.add((java.lang.Integer)0);
    set6.clear();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)1);
    boolean b15 = set11.add((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b24 = set16.belongs((java.lang.Integer)10);
    set16.clear();
    int i26 = set16.size();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = new set.Set();
    set.Set set35 = new set.Set();
    boolean b37 = set35.remove((java.lang.Integer)0);
    java.lang.Object obj38 = null;
    boolean b39 = set35.equals(obj38);
    set.Set set40 = set34.intersect(set35);
    boolean b41 = set27.equals((java.lang.Object)set35);
    set.Set set42 = set16.union(set35);
    set.Set set43 = set11.union(set42);
    set.Set set44 = set6.intersect(set11);
    set44.clear();
    boolean b47 = set44.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b40 = set37.belongs((java.lang.Integer)0);
    set.Set set41 = set16.union(set37);
    set.Set set42 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set43 = set37.intersect(set42);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b9 = set1.isEmpty();
    boolean b11 = set1.belongs((java.lang.Integer)0);
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    boolean b16 = set12.remove((java.lang.Integer)0);
    int i17 = set12.size();
    int i18 = set12.size();
    set.Set set19 = set1.intersect(set12);
    set19.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 10, 10, 0 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set9 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set10 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    set0.clear();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    int i18 = set17.size();
    boolean b20 = set17.add((java.lang.Integer)0);
    set17.clear();
    boolean b22 = set17.isEmpty();
    java.lang.Object obj23 = null;
    boolean b24 = set17.equals(obj23);
    set.Set set25 = set0.union(set17);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    boolean b34 = set26.add((java.lang.Integer)100);
    boolean b36 = set26.remove((java.lang.Integer)10);
    set26.clear();
    boolean b38 = set26.isEmpty();
    set26.clear();
    boolean b40 = set25.equals((java.lang.Object)set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set28.belongs((java.lang.Integer)(-1));
    boolean b32 = set28.add((java.lang.Integer)1);
    boolean b33 = set28.isEmpty();
    set28.clear();
    boolean b36 = set28.belongs((java.lang.Integer)3);
    boolean b38 = set28.add((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set28.equals(obj39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set8.isEmpty();
    boolean b11 = set8.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    boolean b12 = set8.remove((java.lang.Integer)0);
    int i13 = set8.size();
    boolean b15 = set8.remove((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = set8.intersect(set22);
    set.Set set24 = new set.Set();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = set24.intersect(set25);
    boolean b31 = set24.isEmpty();
    boolean b33 = set24.remove((java.lang.Integer)0);
    set24.clear();
    set.Set set35 = set8.union(set24);
    set.Set set36 = set7.intersect(set24);
    boolean b38 = set36.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    boolean b18 = set0.add((java.lang.Integer)(-1));
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    java.lang.Object obj23 = null;
    boolean b24 = set20.equals(obj23);
    set.Set set25 = set19.intersect(set20);
    int i26 = set25.size();
    boolean b28 = set25.add((java.lang.Integer)0);
    set25.clear();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)1);
    boolean b34 = set30.add((java.lang.Integer)0);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    boolean b43 = set35.belongs((java.lang.Integer)10);
    set35.clear();
    int i45 = set35.size();
    set.Set set46 = new set.Set();
    set.Set set47 = new set.Set();
    boolean b49 = set47.remove((java.lang.Integer)0);
    java.lang.Object obj50 = null;
    boolean b51 = set47.equals(obj50);
    set.Set set52 = set46.intersect(set47);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b60 = set46.equals((java.lang.Object)set54);
    set.Set set61 = set35.union(set54);
    set.Set set62 = set30.union(set61);
    set.Set set63 = set25.intersect(set30);
    boolean b64 = set0.equals((java.lang.Object)set25);
    boolean b66 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b11 = set10.isEmpty();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    int i19 = set18.size();
    boolean b21 = set18.belongs((java.lang.Integer)(-1));
    set18.clear();
    java.lang.Integer[] i_array26 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i27 = new java.util.ArrayList<java.lang.Integer>();
    boolean b28 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i27, i_array26);
    set.Set set29 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i27);
    set.Set set30 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i27);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    boolean b38 = set31.isEmpty();
    java.lang.Object obj39 = null;
    boolean b40 = set31.equals(obj39);
    set.Set set41 = set30.union(set31);
    set.Set set42 = set18.intersect(set30);
    int i43 = set30.size();
    java.lang.Integer[] i_array47 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i48 = new java.util.ArrayList<java.lang.Integer>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i48, i_array47);
    set.Set set50 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i48);
    set50.clear();
    set.Set set52 = new set.Set();
    set52.clear();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    boolean b58 = set54.remove((java.lang.Integer)0);
    int i59 = set54.size();
    boolean b61 = set54.remove((java.lang.Integer)0);
    set.Set set62 = set52.union(set54);
    set54.clear();
    set.Set set64 = set50.union(set54);
    boolean b66 = set64.remove((java.lang.Integer)3);
    boolean b67 = set30.equals((java.lang.Object)b66);
    int i68 = set30.size();
    boolean b69 = set10.equals((java.lang.Object)i68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    boolean b16 = set0.isEmpty();
    boolean b18 = set0.remove((java.lang.Integer)0);
    boolean b20 = set0.add((java.lang.Integer)0);
    boolean b22 = set0.belongs((java.lang.Integer)0);
    boolean b24 = set0.remove((java.lang.Integer)0);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    java.lang.Object obj18 = null;
    boolean b19 = set12.equals(obj18);
    boolean b21 = set12.add((java.lang.Integer)0);
    set.Set set22 = set1.union(set12);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b31 = set24.belongs((java.lang.Integer)10);
    set24.clear();
    set.Set set33 = set12.intersect(set24);
    boolean b35 = set33.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b11 = set10.isEmpty();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    set12.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set28.add((java.lang.Integer)(-1));
    set.Set set31 = set12.union(set28);
    set.Set set32 = set10.intersect(set28);
    boolean b34 = set32.belongs((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    int i24 = set23.size();
    boolean b26 = set23.belongs((java.lang.Integer)(-1));
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set33.clear();
    set.Set set35 = set23.union(set33);
    boolean b36 = set15.equals((java.lang.Object)set33);
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    boolean b41 = set37.remove((java.lang.Integer)0);
    int i42 = set37.size();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    boolean b47 = set43.remove((java.lang.Integer)0);
    int i48 = set43.size();
    boolean b50 = set43.remove((java.lang.Integer)0);
    set.Set set51 = set37.intersect(set43);
    boolean b53 = set51.remove((java.lang.Integer)3);
    boolean b54 = set15.equals((java.lang.Object)set51);
    boolean b55 = set51.isEmpty();
    boolean b57 = set51.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    boolean b18 = set0.add((java.lang.Integer)(-1));
    boolean b20 = set0.belongs((java.lang.Integer)10);
    boolean b22 = set0.belongs((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    int i11 = set10.size();
    boolean b13 = set10.belongs((java.lang.Integer)3);
    boolean b15 = set10.belongs((java.lang.Integer)0);
    int i16 = set10.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 0);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    boolean b16 = set2.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    set7.clear();
    set.Set set22 = new set.Set();
    set22.clear();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    boolean b28 = set24.remove((java.lang.Integer)0);
    int i29 = set24.size();
    boolean b31 = set24.remove((java.lang.Integer)0);
    set.Set set32 = set22.union(set24);
    boolean b34 = set32.add((java.lang.Integer)0);
    set.Set set35 = set7.union(set32);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = new set.Set();
    set.Set set44 = new set.Set();
    boolean b46 = set44.remove((java.lang.Integer)0);
    java.lang.Object obj47 = null;
    boolean b48 = set44.equals(obj47);
    set.Set set49 = set43.intersect(set44);
    boolean b50 = set36.equals((java.lang.Object)set44);
    set.Set set51 = new set.Set();
    set.Set set52 = new set.Set();
    boolean b54 = set52.remove((java.lang.Integer)0);
    java.lang.Object obj55 = null;
    boolean b56 = set52.equals(obj55);
    set.Set set57 = set51.intersect(set52);
    boolean b58 = set51.isEmpty();
    boolean b60 = set51.remove((java.lang.Integer)0);
    set.Set set61 = set36.intersect(set51);
    boolean b62 = set51.isEmpty();
    boolean b64 = set51.add((java.lang.Integer)0);
    java.lang.Object obj65 = null;
    boolean b66 = set51.equals(obj65);
    boolean b67 = set7.equals((java.lang.Object)b66);
    boolean b69 = set7.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.add((java.lang.Integer)0);
    boolean b22 = set7.add((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set23.clear();
    set.Set set25 = new set.Set();
    set.Set set26 = new set.Set();
    boolean b28 = set26.remove((java.lang.Integer)0);
    java.lang.Object obj29 = null;
    boolean b30 = set26.equals(obj29);
    set.Set set31 = set25.intersect(set26);
    boolean b33 = set25.belongs((java.lang.Integer)10);
    int i34 = set25.size();
    set.Set set35 = set23.intersect(set25);
    boolean b37 = set23.remove((java.lang.Integer)0);
    boolean b39 = set23.remove((java.lang.Integer)0);
    set.Set set40 = new set.Set();
    set.Set set41 = new set.Set();
    boolean b43 = set41.remove((java.lang.Integer)0);
    java.lang.Object obj44 = null;
    boolean b45 = set41.equals(obj44);
    set.Set set46 = set40.intersect(set41);
    boolean b48 = set40.belongs((java.lang.Integer)10);
    set40.clear();
    int i50 = set40.size();
    boolean b51 = set23.equals((java.lang.Object)set40);
    set.Set set52 = set7.union(set23);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    boolean b61 = set53.belongs((java.lang.Integer)10);
    set53.clear();
    int i63 = set53.size();
    set.Set set64 = new set.Set();
    set.Set set65 = new set.Set();
    boolean b67 = set65.remove((java.lang.Integer)0);
    java.lang.Object obj68 = null;
    boolean b69 = set65.equals(obj68);
    set.Set set70 = set64.intersect(set65);
    set.Set set71 = new set.Set();
    set.Set set72 = new set.Set();
    boolean b74 = set72.remove((java.lang.Integer)0);
    java.lang.Object obj75 = null;
    boolean b76 = set72.equals(obj75);
    set.Set set77 = set71.intersect(set72);
    boolean b78 = set64.equals((java.lang.Object)set72);
    set.Set set79 = set53.union(set72);
    boolean b81 = set79.add((java.lang.Integer)1);
    set.Set set82 = new set.Set();
    set.Set set83 = new set.Set();
    boolean b85 = set83.remove((java.lang.Integer)0);
    java.lang.Object obj86 = null;
    boolean b87 = set83.equals(obj86);
    set.Set set88 = set82.intersect(set83);
    boolean b89 = set82.isEmpty();
    boolean b91 = set82.add((java.lang.Integer)0);
    boolean b92 = set82.isEmpty();
    int i93 = set82.size();
    boolean b95 = set82.belongs((java.lang.Integer)1);
    boolean b96 = set79.equals((java.lang.Object)b95);
    set.Set set97 = set23.intersect(set79);
    boolean b99 = set23.remove((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    boolean b11 = set0.belongs((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    int i10 = set0.size();
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set11.equals((java.lang.Object)set19);
    set.Set set26 = set0.union(set19);
    boolean b28 = set19.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    java.lang.Object obj27 = null;
    boolean b28 = set15.equals(obj27);
    set15.clear();
    boolean b31 = set15.remove((java.lang.Integer)0);
    boolean b33 = set15.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.add((java.lang.Integer)0);
    java.lang.Object obj10 = null;
    boolean b11 = set7.equals(obj10);
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    boolean b16 = set12.remove((java.lang.Integer)0);
    int i17 = set12.size();
    boolean b19 = set12.remove((java.lang.Integer)0);
    boolean b21 = set12.belongs((java.lang.Integer)100);
    set.Set set22 = set7.intersect(set12);
    set.Set set23 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set24 = set12.union(set23);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    boolean b13 = set0.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array17 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i18 = new java.util.ArrayList<java.lang.Integer>();
    boolean b19 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i18, i_array17);
    set.Set set20 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i18);
    set.Set set21 = set0.union(set20);
    boolean b23 = set21.belongs((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set1.belongs((java.lang.Integer)10);
    set1.clear();
    boolean b11 = set1.remove((java.lang.Integer)0);
    boolean b12 = set1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    set.Set set13 = new set.Set();
    set13.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    int i24 = set15.size();
    set.Set set25 = set13.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b48 = set41.isEmpty();
    boolean b50 = set41.remove((java.lang.Integer)0);
    set.Set set51 = set26.intersect(set41);
    int i52 = set26.size();
    set.Set set53 = set15.union(set26);
    boolean b54 = set26.isEmpty();
    boolean b55 = set26.isEmpty();
    set.Set set56 = set6.union(set26);
    set.Set set57 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set58 = set26.intersect(set57);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    boolean b24 = set23.isEmpty();
    boolean b26 = set23.remove((java.lang.Integer)0);
    set23.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    java.lang.Object obj19 = null;
    boolean b20 = set18.equals(obj19);
    boolean b21 = set18.isEmpty();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    set.Set set29 = new set.Set();
    set.Set set30 = new set.Set();
    boolean b32 = set30.remove((java.lang.Integer)0);
    java.lang.Object obj33 = null;
    boolean b34 = set30.equals(obj33);
    set.Set set35 = set29.intersect(set30);
    boolean b36 = set22.equals((java.lang.Object)set30);
    set.Set set37 = new set.Set();
    set37.clear();
    set.Set set39 = new set.Set();
    set.Set set40 = new set.Set();
    boolean b42 = set40.remove((java.lang.Integer)0);
    java.lang.Object obj43 = null;
    boolean b44 = set40.equals(obj43);
    set.Set set45 = set39.intersect(set40);
    boolean b47 = set39.belongs((java.lang.Integer)10);
    int i48 = set39.size();
    set.Set set49 = set37.intersect(set39);
    boolean b51 = set37.remove((java.lang.Integer)0);
    set.Set set52 = set22.union(set37);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    set54.clear();
    set.Set set61 = set52.union(set54);
    boolean b63 = set52.belongs((java.lang.Integer)(-1));
    boolean b64 = set18.equals((java.lang.Object)b63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    boolean b22 = set20.belongs((java.lang.Integer)0);
    boolean b24 = set20.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set0.equals(obj13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set28.belongs((java.lang.Integer)(-1));
    boolean b32 = set28.add((java.lang.Integer)0);
    boolean b34 = set28.add((java.lang.Integer)1);
    set28.clear();
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    java.lang.Object obj43 = null;
    boolean b44 = set37.equals(obj43);
    boolean b46 = set37.add((java.lang.Integer)0);
    java.lang.Integer[] i_array50 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i51 = new java.util.ArrayList<java.lang.Integer>();
    boolean b52 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i51, i_array50);
    set.Set set53 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i51);
    set53.clear();
    set.Set set55 = set37.intersect(set53);
    set55.clear();
    set.Set set57 = set28.intersect(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.add((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    int i16 = set0.size();
    boolean b18 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    boolean b45 = set43.isEmpty();
    boolean b47 = set43.belongs((java.lang.Integer)1);
    set.Set set48 = new set.Set();
    set48.clear();
    set.Set set50 = new set.Set();
    boolean b52 = set50.remove((java.lang.Integer)0);
    boolean b54 = set50.remove((java.lang.Integer)0);
    int i55 = set50.size();
    boolean b57 = set50.remove((java.lang.Integer)0);
    set.Set set58 = set48.union(set50);
    int i59 = set58.size();
    set.Set set60 = set43.intersect(set58);
    int i61 = set43.size();
    set43.clear();
    boolean b64 = set43.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    int i21 = set7.size();
    set.Set set22 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set23 = set7.intersect(set22);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set7.clear();
    set.Set set9 = new set.Set();
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    java.lang.Object obj13 = null;
    boolean b14 = set10.equals(obj13);
    set.Set set15 = set9.intersect(set10);
    boolean b17 = set9.belongs((java.lang.Integer)10);
    int i18 = set9.size();
    set.Set set19 = set7.intersect(set9);
    set.Set set20 = set1.union(set7);
    set7.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set22.belongs((java.lang.Integer)10);
    set22.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    boolean b40 = set38.add((java.lang.Integer)(-1));
    set.Set set41 = set22.union(set38);
    int i42 = set41.size();
    set.Set set43 = set7.union(set41);
    java.lang.Integer[] i_array47 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i48 = new java.util.ArrayList<java.lang.Integer>();
    boolean b49 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i48, i_array47);
    set.Set set50 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i48);
    boolean b52 = set50.remove((java.lang.Integer)0);
    set.Set set53 = new set.Set();
    set.Set set54 = new set.Set();
    boolean b56 = set54.remove((java.lang.Integer)0);
    java.lang.Object obj57 = null;
    boolean b58 = set54.equals(obj57);
    set.Set set59 = set53.intersect(set54);
    set.Set set60 = new set.Set();
    set.Set set61 = new set.Set();
    boolean b63 = set61.remove((java.lang.Integer)0);
    java.lang.Object obj64 = null;
    boolean b65 = set61.equals(obj64);
    set.Set set66 = set60.intersect(set61);
    boolean b67 = set53.equals((java.lang.Object)set61);
    set.Set set68 = set50.intersect(set61);
    set.Set set69 = set41.intersect(set50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b26 = set15.isEmpty();
    boolean b28 = set15.add((java.lang.Integer)0);
    boolean b30 = set15.belongs((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    boolean b10 = set0.remove((java.lang.Integer)10);
    boolean b12 = set0.remove((java.lang.Integer)0);
    boolean b14 = set0.add((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    int i16 = set0.size();
    java.lang.Object obj17 = null;
    boolean b18 = set0.equals(obj17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b40 = set37.belongs((java.lang.Integer)0);
    set.Set set41 = set16.union(set37);
    boolean b43 = set37.remove((java.lang.Integer)0);
    set.Set set44 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set45 = set37.union(set44);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set2.belongs((java.lang.Integer)1);
    int i13 = set2.size();
    set2.clear();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    boolean b19 = set15.remove((java.lang.Integer)0);
    int i20 = set15.size();
    boolean b22 = set15.remove((java.lang.Integer)0);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    set.Set set30 = set15.intersect(set29);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    boolean b38 = set31.isEmpty();
    boolean b40 = set31.remove((java.lang.Integer)0);
    set31.clear();
    set.Set set42 = set15.union(set31);
    boolean b44 = set31.belongs((java.lang.Integer)0);
    boolean b45 = set2.equals((java.lang.Object)b44);
    int i46 = set2.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i46 == 0);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    int i11 = set10.size();
    boolean b13 = set10.belongs((java.lang.Integer)3);
    boolean b15 = set10.belongs((java.lang.Integer)0);
    boolean b17 = set10.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    boolean b12 = set8.remove((java.lang.Integer)0);
    int i13 = set8.size();
    boolean b15 = set8.remove((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = set8.intersect(set22);
    set.Set set24 = new set.Set();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = set24.intersect(set25);
    boolean b31 = set24.isEmpty();
    boolean b33 = set24.remove((java.lang.Integer)0);
    set24.clear();
    set.Set set35 = set8.union(set24);
    set.Set set36 = set7.intersect(set24);
    set.Set set37 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set38 = set36.intersect(set37);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    int i17 = set0.size();
    boolean b19 = set0.remove((java.lang.Integer)2);
    boolean b21 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)1);
    int i3 = set0.size();
    set.Set set4 = new set.Set();
    set.Set set5 = new set.Set();
    boolean b7 = set5.remove((java.lang.Integer)0);
    java.lang.Object obj8 = null;
    boolean b9 = set5.equals(obj8);
    set.Set set10 = set4.intersect(set5);
    java.lang.Object obj11 = null;
    boolean b12 = set5.equals(obj11);
    boolean b14 = set5.add((java.lang.Integer)0);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    java.lang.Object obj22 = null;
    boolean b23 = set16.equals(obj22);
    boolean b25 = set16.add((java.lang.Integer)0);
    set.Set set26 = set5.union(set16);
    set.Set set27 = set0.intersect(set5);
    int i28 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set28.belongs((java.lang.Integer)10);
    set28.clear();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    set.Set set47 = set28.union(set44);
    set.Set set48 = new set.Set();
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    java.lang.Object obj52 = null;
    boolean b53 = set49.equals(obj52);
    set.Set set54 = set48.intersect(set49);
    set48.clear();
    set.Set set56 = set44.intersect(set48);
    boolean b58 = set56.belongs((java.lang.Integer)(-1));
    boolean b60 = set56.add((java.lang.Integer)1);
    set.Set set61 = set22.intersect(set56);
    boolean b62 = set61.isEmpty();
    set.Set set63 = new set.Set();
    set.Set set64 = new set.Set();
    boolean b66 = set64.remove((java.lang.Integer)0);
    java.lang.Object obj67 = null;
    boolean b68 = set64.equals(obj67);
    set.Set set69 = set63.intersect(set64);
    boolean b70 = set61.equals((java.lang.Object)set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    boolean b9 = set7.remove((java.lang.Integer)0);
    boolean b11 = set7.remove((java.lang.Integer)0);
    boolean b12 = set7.isEmpty();
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    int i20 = set14.size();
    java.lang.Object obj21 = null;
    boolean b22 = set14.equals(obj21);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b39 = set14.equals((java.lang.Object)set23);
    set14.clear();
    int i41 = set14.size();
    set.Set set42 = new set.Set();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    java.lang.Object obj46 = null;
    boolean b47 = set43.equals(obj46);
    set.Set set48 = set42.intersect(set43);
    boolean b49 = set42.isEmpty();
    boolean b51 = set42.remove((java.lang.Integer)0);
    boolean b53 = set42.belongs((java.lang.Integer)0);
    boolean b55 = set42.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array59 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i60 = new java.util.ArrayList<java.lang.Integer>();
    boolean b61 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i60, i_array59);
    set.Set set62 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i60);
    set.Set set63 = set42.union(set62);
    boolean b64 = set62.isEmpty();
    boolean b66 = set62.remove((java.lang.Integer)0);
    set.Set set67 = set14.intersect(set62);
    java.lang.Object obj68 = null;
    boolean b69 = set62.equals(obj68);
    boolean b70 = set7.equals((java.lang.Object)b69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b27 = set25.add((java.lang.Integer)0);
    boolean b28 = set25.isEmpty();
    boolean b30 = set25.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    boolean b10 = set6.remove((java.lang.Integer)0);
    int i11 = set6.size();
    boolean b13 = set6.remove((java.lang.Integer)0);
    set.Set set14 = set0.intersect(set6);
    boolean b16 = set14.belongs((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    java.lang.Object obj15 = null;
    boolean b16 = set14.equals(obj15);
    boolean b18 = set14.remove((java.lang.Integer)1);
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    boolean b23 = set19.remove((java.lang.Integer)0);
    int i24 = set19.size();
    boolean b26 = set19.remove((java.lang.Integer)0);
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set.Set set34 = set19.intersect(set33);
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    boolean b42 = set35.isEmpty();
    boolean b44 = set35.remove((java.lang.Integer)0);
    set35.clear();
    set.Set set46 = set19.union(set35);
    set.Set set47 = new set.Set();
    boolean b49 = set47.remove((java.lang.Integer)0);
    boolean b51 = set47.remove((java.lang.Integer)0);
    int i52 = set47.size();
    boolean b54 = set47.remove((java.lang.Integer)0);
    set.Set set55 = new set.Set();
    set.Set set56 = new set.Set();
    boolean b58 = set56.remove((java.lang.Integer)0);
    java.lang.Object obj59 = null;
    boolean b60 = set56.equals(obj59);
    set.Set set61 = set55.intersect(set56);
    set.Set set62 = set47.intersect(set61);
    set.Set set63 = set46.intersect(set62);
    set.Set set64 = set14.union(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set64);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    int i15 = set8.size();
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set22.clear();
    boolean b24 = set22.isEmpty();
    boolean b26 = set22.belongs((java.lang.Integer)0);
    set.Set set27 = set8.intersect(set22);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b36 = set28.belongs((java.lang.Integer)10);
    set28.clear();
    set.Set set38 = new set.Set();
    set.Set set39 = new set.Set();
    boolean b41 = set39.remove((java.lang.Integer)0);
    java.lang.Object obj42 = null;
    boolean b43 = set39.equals(obj42);
    set.Set set44 = set38.intersect(set39);
    boolean b46 = set44.add((java.lang.Integer)(-1));
    set.Set set47 = set28.union(set44);
    set.Set set48 = new set.Set();
    set.Set set49 = new set.Set();
    boolean b51 = set49.remove((java.lang.Integer)0);
    java.lang.Object obj52 = null;
    boolean b53 = set49.equals(obj52);
    set.Set set54 = set48.intersect(set49);
    set48.clear();
    set.Set set56 = set44.intersect(set48);
    boolean b58 = set56.belongs((java.lang.Integer)(-1));
    boolean b60 = set56.add((java.lang.Integer)1);
    set.Set set61 = set22.intersect(set56);
    set.Set set62 = new set.Set();
    set.Set set63 = new set.Set();
    boolean b65 = set63.remove((java.lang.Integer)0);
    java.lang.Object obj66 = null;
    boolean b67 = set63.equals(obj66);
    set.Set set68 = set62.intersect(set63);
    boolean b69 = set62.isEmpty();
    boolean b71 = set62.add((java.lang.Integer)0);
    boolean b72 = set62.isEmpty();
    boolean b74 = set62.belongs((java.lang.Integer)100);
    boolean b75 = set61.equals((java.lang.Object)set62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set6.size();
    boolean b9 = set6.belongs((java.lang.Integer)(-1));
    boolean b11 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b25 = set17.belongs((java.lang.Integer)10);
    int i26 = set17.size();
    set.Set set27 = set15.intersect(set17);
    boolean b29 = set15.remove((java.lang.Integer)0);
    set.Set set30 = set0.union(set15);
    boolean b32 = set0.add((java.lang.Integer)0);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set33.isEmpty();
    java.lang.Object obj41 = null;
    boolean b42 = set33.equals(obj41);
    set.Set set43 = new set.Set();
    set43.clear();
    boolean b46 = set43.remove((java.lang.Integer)(-1));
    set.Set set47 = set33.intersect(set43);
    boolean b49 = set43.remove((java.lang.Integer)(-1));
    boolean b51 = set43.add((java.lang.Integer)0);
    set.Set set52 = set0.intersect(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    set.Set set10 = new set.Set();
    set10.clear();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    int i21 = set12.size();
    set.Set set22 = set10.intersect(set12);
    boolean b23 = set12.isEmpty();
    set.Set set24 = set0.union(set12);
    boolean b26 = set24.add((java.lang.Integer)0);
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    boolean b34 = set27.isEmpty();
    boolean b36 = set27.remove((java.lang.Integer)0);
    set.Set set37 = set24.union(set27);
    set37.clear();
    int i39 = set37.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    set.Set set13 = new set.Set();
    set13.clear();
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b23 = set15.belongs((java.lang.Integer)10);
    int i24 = set15.size();
    set.Set set25 = set13.intersect(set15);
    set.Set set26 = new set.Set();
    set.Set set27 = new set.Set();
    boolean b29 = set27.remove((java.lang.Integer)0);
    java.lang.Object obj30 = null;
    boolean b31 = set27.equals(obj30);
    set.Set set32 = set26.intersect(set27);
    set.Set set33 = new set.Set();
    set.Set set34 = new set.Set();
    boolean b36 = set34.remove((java.lang.Integer)0);
    java.lang.Object obj37 = null;
    boolean b38 = set34.equals(obj37);
    set.Set set39 = set33.intersect(set34);
    boolean b40 = set26.equals((java.lang.Object)set34);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b48 = set41.isEmpty();
    boolean b50 = set41.remove((java.lang.Integer)0);
    set.Set set51 = set26.intersect(set41);
    int i52 = set26.size();
    set.Set set53 = set15.union(set26);
    boolean b54 = set26.isEmpty();
    boolean b55 = set26.isEmpty();
    set.Set set56 = set6.union(set26);
    boolean b58 = set6.add((java.lang.Integer)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    boolean b9 = set0.remove((java.lang.Integer)0);
    boolean b11 = set0.belongs((java.lang.Integer)0);
    int i12 = set0.size();
    int i13 = set0.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    java.lang.Integer[] i_array10 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i11 = new java.util.ArrayList<java.lang.Integer>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i11, i_array10);
    set.Set set13 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i11);
    set.Set set14 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i11);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    java.lang.Object obj23 = null;
    boolean b24 = set15.equals(obj23);
    set.Set set25 = set14.union(set15);
    java.lang.Object obj26 = null;
    boolean b27 = set25.equals(obj26);
    set.Set set28 = new set.Set();
    set28.clear();
    set.Set set30 = new set.Set();
    set.Set set31 = new set.Set();
    boolean b33 = set31.remove((java.lang.Integer)0);
    java.lang.Object obj34 = null;
    boolean b35 = set31.equals(obj34);
    set.Set set36 = set30.intersect(set31);
    boolean b38 = set30.belongs((java.lang.Integer)10);
    int i39 = set30.size();
    set.Set set40 = set28.intersect(set30);
    boolean b42 = set28.remove((java.lang.Integer)0);
    boolean b44 = set28.remove((java.lang.Integer)0);
    boolean b45 = set25.equals((java.lang.Object)0);
    set25.clear();
    boolean b47 = set6.equals((java.lang.Object)set25);
    boolean b49 = set6.add((java.lang.Integer)(-1));
    boolean b51 = set6.belongs((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    java.lang.Object obj7 = null;
    boolean b8 = set1.equals(obj7);
    boolean b10 = set1.add((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    java.lang.Object obj18 = null;
    boolean b19 = set12.equals(obj18);
    boolean b21 = set12.add((java.lang.Integer)0);
    set.Set set22 = set1.union(set12);
    set.Set set23 = new set.Set();
    set.Set set24 = new set.Set();
    boolean b26 = set24.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set24.equals(obj27);
    set.Set set29 = set23.intersect(set24);
    boolean b31 = set24.belongs((java.lang.Integer)10);
    set24.clear();
    set.Set set33 = set12.intersect(set24);
    set33.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    set.Set set14 = new set.Set();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    java.lang.Object obj18 = null;
    boolean b19 = set15.equals(obj18);
    set.Set set20 = set14.intersect(set15);
    boolean b21 = set7.equals((java.lang.Object)set15);
    set.Set set22 = new set.Set();
    set22.clear();
    set.Set set24 = new set.Set();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = set24.intersect(set25);
    boolean b32 = set24.belongs((java.lang.Integer)10);
    int i33 = set24.size();
    set.Set set34 = set22.intersect(set24);
    boolean b36 = set22.remove((java.lang.Integer)0);
    set.Set set37 = set7.union(set22);
    set.Set set38 = set1.intersect(set37);
    boolean b40 = set38.add((java.lang.Integer)10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b12 = set10.add((java.lang.Integer)0);
    boolean b14 = set10.belongs((java.lang.Integer)100);
    boolean b16 = set10.remove((java.lang.Integer)0);
    boolean b18 = set10.remove((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    int i28 = set27.size();
    boolean b30 = set27.belongs((java.lang.Integer)0);
    int i31 = set27.size();
    set27.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set16.clear();
    boolean b22 = set16.add((java.lang.Integer)10);
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    boolean b27 = set23.remove((java.lang.Integer)0);
    int i28 = set23.size();
    boolean b30 = set23.remove((java.lang.Integer)0);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    set.Set set38 = set23.intersect(set37);
    boolean b40 = set37.belongs((java.lang.Integer)0);
    set.Set set41 = set16.union(set37);
    boolean b43 = set37.remove((java.lang.Integer)0);
    int i44 = set37.size();
    boolean b46 = set37.equals((java.lang.Object)1.0f);
    set.Set set47 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set48 = set37.intersect(set47);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    boolean b27 = set25.add((java.lang.Integer)0);
    boolean b29 = set25.remove((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    boolean b12 = set8.remove((java.lang.Integer)0);
    int i13 = set8.size();
    boolean b15 = set8.remove((java.lang.Integer)0);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    set.Set set23 = set8.intersect(set22);
    set.Set set24 = new set.Set();
    set.Set set25 = new set.Set();
    boolean b27 = set25.remove((java.lang.Integer)0);
    java.lang.Object obj28 = null;
    boolean b29 = set25.equals(obj28);
    set.Set set30 = set24.intersect(set25);
    boolean b31 = set24.isEmpty();
    boolean b33 = set24.remove((java.lang.Integer)0);
    set24.clear();
    set.Set set35 = set8.union(set24);
    set.Set set36 = set7.intersect(set24);
    boolean b38 = set36.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    boolean b16 = set0.isEmpty();
    boolean b18 = set0.remove((java.lang.Integer)0);
    set.Set set19 = new set.Set();
    set.Set set20 = new set.Set();
    boolean b22 = set20.remove((java.lang.Integer)0);
    boolean b24 = set20.remove((java.lang.Integer)0);
    int i25 = set20.size();
    set.Set set26 = set19.intersect(set20);
    set.Set set27 = set0.union(set20);
    boolean b29 = set20.belongs((java.lang.Integer)3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    set.Set set10 = new set.Set();
    boolean b12 = set10.remove((java.lang.Integer)0);
    boolean b14 = set10.remove((java.lang.Integer)0);
    int i15 = set10.size();
    boolean b17 = set10.remove((java.lang.Integer)0);
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    set.Set set25 = set10.intersect(set24);
    boolean b26 = set1.equals((java.lang.Object)set10);
    boolean b27 = set10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b16 = set0.add((java.lang.Integer)100);
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    boolean b24 = set17.isEmpty();
    boolean b26 = set17.remove((java.lang.Integer)0);
    boolean b28 = set17.add((java.lang.Integer)0);
    set.Set set29 = set0.union(set17);
    boolean b31 = set29.add((java.lang.Integer)0);
    boolean b32 = set29.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set.Set set16 = new set.Set();
    set.Set set17 = new set.Set();
    boolean b19 = set17.remove((java.lang.Integer)0);
    java.lang.Object obj20 = null;
    boolean b21 = set17.equals(obj20);
    set.Set set22 = set16.intersect(set17);
    boolean b23 = set16.isEmpty();
    boolean b25 = set16.remove((java.lang.Integer)0);
    set16.clear();
    set.Set set27 = set0.union(set16);
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    boolean b32 = set28.remove((java.lang.Integer)0);
    int i33 = set28.size();
    boolean b35 = set28.remove((java.lang.Integer)0);
    set.Set set36 = new set.Set();
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    java.lang.Object obj40 = null;
    boolean b41 = set37.equals(obj40);
    set.Set set42 = set36.intersect(set37);
    set.Set set43 = set28.intersect(set42);
    set.Set set44 = set27.intersect(set43);
    int i45 = set43.size();
    set43.clear();
    int i47 = set43.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i47 == 0);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)0);
    boolean b10 = set6.remove((java.lang.Integer)0);
    int i11 = set6.size();
    boolean b13 = set6.remove((java.lang.Integer)0);
    set.Set set14 = set0.intersect(set6);
    boolean b16 = set0.equals((java.lang.Object)1);
    set0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }

    set.Set set0 = new set.Set();
    set0.clear();
    boolean b3 = set0.remove((java.lang.Integer)(-1));
    java.lang.Object obj4 = null;
    boolean b5 = set0.equals(obj4);
    boolean b7 = set0.remove((java.lang.Integer)1);
    boolean b9 = set0.add((java.lang.Integer)0);
    boolean b11 = set0.remove((java.lang.Integer)0);
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    set12.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set28.add((java.lang.Integer)(-1));
    set.Set set31 = set12.union(set28);
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    set32.clear();
    set.Set set40 = set28.intersect(set32);
    boolean b42 = set40.belongs((java.lang.Integer)(-1));
    boolean b44 = set40.add((java.lang.Integer)0);
    boolean b46 = set40.add((java.lang.Integer)1);
    set.Set set47 = set0.union(set40);
    int i48 = set40.size();
    set40.clear();
    set.Set set50 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set51 = set40.union(set50);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 2);

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    set20.clear();
    set.Set set28 = set16.intersect(set20);
    boolean b30 = set20.add((java.lang.Integer)0);
    set20.clear();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    set.Set set39 = new set.Set();
    set39.clear();
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.belongs((java.lang.Integer)10);
    int i50 = set41.size();
    set.Set set51 = set39.intersect(set41);
    boolean b53 = set39.remove((java.lang.Integer)0);
    boolean b55 = set39.remove((java.lang.Integer)0);
    boolean b56 = set38.equals((java.lang.Object)set39);
    boolean b58 = set38.equals((java.lang.Object)(short)100);
    set.Set set59 = set20.union(set38);
    set20.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    boolean b9 = set0.belongs((java.lang.Integer)100);
    boolean b11 = set0.remove((java.lang.Integer)100);
    java.lang.Object obj12 = null;
    boolean b13 = set0.equals(obj12);
    set.Set set14 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set15 = set0.intersect(set14);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    boolean b17 = set0.add((java.lang.Integer)(-1));
    set.Set set18 = new set.Set();
    set.Set set19 = new set.Set();
    boolean b21 = set19.remove((java.lang.Integer)0);
    java.lang.Object obj22 = null;
    boolean b23 = set19.equals(obj22);
    set.Set set24 = set18.intersect(set19);
    boolean b25 = set18.isEmpty();
    boolean b27 = set18.remove((java.lang.Integer)0);
    boolean b29 = set18.belongs((java.lang.Integer)0);
    set.Set set30 = set0.union(set18);
    set.Set set31 = new set.Set();
    boolean b33 = set31.remove((java.lang.Integer)1);
    int i34 = set31.size();
    set.Set set35 = new set.Set();
    set.Set set36 = new set.Set();
    boolean b38 = set36.remove((java.lang.Integer)0);
    java.lang.Object obj39 = null;
    boolean b40 = set36.equals(obj39);
    set.Set set41 = set35.intersect(set36);
    java.lang.Object obj42 = null;
    boolean b43 = set36.equals(obj42);
    boolean b45 = set36.add((java.lang.Integer)0);
    set.Set set46 = new set.Set();
    set.Set set47 = new set.Set();
    boolean b49 = set47.remove((java.lang.Integer)0);
    java.lang.Object obj50 = null;
    boolean b51 = set47.equals(obj50);
    set.Set set52 = set46.intersect(set47);
    java.lang.Object obj53 = null;
    boolean b54 = set47.equals(obj53);
    boolean b56 = set47.add((java.lang.Integer)0);
    set.Set set57 = set36.union(set47);
    set.Set set58 = set31.intersect(set36);
    set.Set set59 = set30.union(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set59);

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    set.Set set7 = new set.Set();
    set.Set set8 = new set.Set();
    boolean b10 = set8.remove((java.lang.Integer)0);
    java.lang.Object obj11 = null;
    boolean b12 = set8.equals(obj11);
    set.Set set13 = set7.intersect(set8);
    boolean b14 = set0.equals((java.lang.Object)set8);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    boolean b24 = set15.remove((java.lang.Integer)0);
    set.Set set25 = set0.intersect(set15);
    set15.clear();
    int i27 = set15.size();
    boolean b28 = set15.isEmpty();
    set15.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }

    java.lang.Integer[] i_array5 = new java.lang.Integer[] { 0, 1, (-1), 0, (-1) };
    java.util.ArrayList<java.lang.Integer> arraylist_i6 = new java.util.ArrayList<java.lang.Integer>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i6, i_array5);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set9 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set10 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set11 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    boolean b12 = set11.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    boolean b7 = set0.remove((java.lang.Integer)0);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    set.Set set15 = set0.intersect(set14);
    set15.clear();
    set.Set set17 = new set.Set();
    set.Set set18 = new set.Set();
    boolean b20 = set18.remove((java.lang.Integer)0);
    java.lang.Object obj21 = null;
    boolean b22 = set18.equals(obj21);
    set.Set set23 = set17.intersect(set18);
    int i24 = set23.size();
    boolean b26 = set23.belongs((java.lang.Integer)(-1));
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    set33.clear();
    set.Set set35 = set23.union(set33);
    boolean b36 = set15.equals((java.lang.Object)set33);
    set.Set set37 = new set.Set();
    boolean b39 = set37.remove((java.lang.Integer)0);
    boolean b41 = set37.remove((java.lang.Integer)0);
    int i42 = set37.size();
    set.Set set43 = new set.Set();
    boolean b45 = set43.remove((java.lang.Integer)0);
    boolean b47 = set43.remove((java.lang.Integer)0);
    int i48 = set43.size();
    boolean b50 = set43.remove((java.lang.Integer)0);
    set.Set set51 = set37.intersect(set43);
    boolean b53 = set51.remove((java.lang.Integer)3);
    boolean b54 = set15.equals((java.lang.Object)set51);
    boolean b56 = set15.add((java.lang.Integer)1);
    boolean b58 = set15.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    boolean b41 = set13.isEmpty();
    int i42 = set13.size();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i42 == 0);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set7 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    set.Set set8 = new set.Set();
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    java.lang.Object obj12 = null;
    boolean b13 = set9.equals(obj12);
    set.Set set14 = set8.intersect(set9);
    boolean b15 = set8.isEmpty();
    java.lang.Object obj16 = null;
    boolean b17 = set8.equals(obj16);
    set.Set set18 = set7.union(set8);
    boolean b20 = set7.remove((java.lang.Integer)0);
    java.lang.Integer[] i_array24 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i25 = new java.util.ArrayList<java.lang.Integer>();
    boolean b26 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i25, i_array24);
    set.Set set27 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i25);
    set.Set set28 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i25);
    set.Set set29 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i25);
    boolean b30 = set7.equals((java.lang.Object)set29);
    set.Set set31 = new set.Set();
    set.Set set32 = new set.Set();
    boolean b34 = set32.remove((java.lang.Integer)0);
    java.lang.Object obj35 = null;
    boolean b36 = set32.equals(obj35);
    set.Set set37 = set31.intersect(set32);
    boolean b39 = set32.belongs((java.lang.Integer)10);
    set32.clear();
    set.Set set41 = set29.intersect(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set41);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.belongs((java.lang.Integer)0);
    set0.clear();
    boolean b5 = set0.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }

    java.lang.Integer[] i_array5 = new java.lang.Integer[] { 0, 1, (-1), 0, (-1) };
    java.util.ArrayList<java.lang.Integer> arraylist_i6 = new java.util.ArrayList<java.lang.Integer>();
    boolean b7 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i6, i_array5);
    set.Set set8 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set9 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set10 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set11 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    set.Set set12 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    set.Set set13 = new set.Set();
    set.Set set14 = new set.Set();
    boolean b16 = set14.remove((java.lang.Integer)0);
    java.lang.Object obj17 = null;
    boolean b18 = set14.equals(obj17);
    set.Set set19 = set13.intersect(set14);
    set.Set set20 = new set.Set();
    set.Set set21 = new set.Set();
    boolean b23 = set21.remove((java.lang.Integer)0);
    java.lang.Object obj24 = null;
    boolean b25 = set21.equals(obj24);
    set.Set set26 = set20.intersect(set21);
    boolean b27 = set13.equals((java.lang.Object)set21);
    set.Set set28 = new set.Set();
    set.Set set29 = new set.Set();
    boolean b31 = set29.remove((java.lang.Integer)0);
    java.lang.Object obj32 = null;
    boolean b33 = set29.equals(obj32);
    set.Set set34 = set28.intersect(set29);
    boolean b35 = set28.isEmpty();
    boolean b37 = set28.remove((java.lang.Integer)0);
    set.Set set38 = set13.intersect(set28);
    int i39 = set13.size();
    set.Set set40 = set2.union(set13);
    set.Set set41 = new set.Set();
    set.Set set42 = new set.Set();
    boolean b44 = set42.remove((java.lang.Integer)0);
    java.lang.Object obj45 = null;
    boolean b46 = set42.equals(obj45);
    set.Set set47 = set41.intersect(set42);
    boolean b49 = set41.add((java.lang.Integer)100);
    boolean b51 = set41.remove((java.lang.Integer)10);
    java.lang.Object obj52 = null;
    boolean b53 = set41.equals(obj52);
    boolean b55 = set41.belongs((java.lang.Integer)1);
    set.Set set56 = set40.union(set41);
    set.Set set57 = new set.Set();
    set57.clear();
    set.Set set59 = new set.Set();
    set.Set set60 = new set.Set();
    boolean b62 = set60.remove((java.lang.Integer)0);
    java.lang.Object obj63 = null;
    boolean b64 = set60.equals(obj63);
    set.Set set65 = set59.intersect(set60);
    boolean b67 = set59.belongs((java.lang.Integer)10);
    int i68 = set59.size();
    set.Set set69 = set57.intersect(set59);
    boolean b71 = set57.remove((java.lang.Integer)0);
    boolean b72 = set57.isEmpty();
    boolean b73 = set57.isEmpty();
    set.Set set74 = set56.union(set57);
    boolean b76 = set57.remove((java.lang.Integer)0);
    boolean b78 = set57.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b7 = set0.isEmpty();
    java.lang.Object obj8 = null;
    boolean b9 = set0.equals(obj8);
    set.Set set10 = new set.Set();
    set10.clear();
    boolean b13 = set10.remove((java.lang.Integer)(-1));
    set.Set set14 = set0.intersect(set10);
    java.lang.Object obj15 = null;
    boolean b16 = set14.equals(obj15);
    java.lang.Integer[] i_array20 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i21 = new java.util.ArrayList<java.lang.Integer>();
    boolean b22 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i21, i_array20);
    set.Set set23 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i21);
    set.Set set24 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i21);
    set.Set set25 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i21);
    boolean b26 = set25.isEmpty();
    set.Set set27 = new set.Set();
    set.Set set28 = new set.Set();
    boolean b30 = set28.remove((java.lang.Integer)0);
    java.lang.Object obj31 = null;
    boolean b32 = set28.equals(obj31);
    set.Set set33 = set27.intersect(set28);
    int i34 = set28.size();
    set.Set set35 = set25.union(set28);
    set.Set set36 = set14.union(set25);
    boolean b38 = set14.add((java.lang.Integer)0);
    set14.clear();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    boolean b10 = set6.belongs((java.lang.Integer)0);
    boolean b12 = set6.add((java.lang.Integer)(-1));
    boolean b14 = set6.belongs((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }

    java.lang.Integer[] i_array3 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i4 = new java.util.ArrayList<java.lang.Integer>();
    boolean b5 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i4, i_array3);
    set.Set set6 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i4);
    java.lang.Integer[] i_array10 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i11 = new java.util.ArrayList<java.lang.Integer>();
    boolean b12 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i11, i_array10);
    set.Set set13 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i11);
    set.Set set14 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i11);
    set.Set set15 = new set.Set();
    set.Set set16 = new set.Set();
    boolean b18 = set16.remove((java.lang.Integer)0);
    java.lang.Object obj19 = null;
    boolean b20 = set16.equals(obj19);
    set.Set set21 = set15.intersect(set16);
    boolean b22 = set15.isEmpty();
    java.lang.Object obj23 = null;
    boolean b24 = set15.equals(obj23);
    set.Set set25 = set14.union(set15);
    java.lang.Object obj26 = null;
    boolean b27 = set25.equals(obj26);
    set.Set set28 = new set.Set();
    set28.clear();
    set.Set set30 = new set.Set();
    set.Set set31 = new set.Set();
    boolean b33 = set31.remove((java.lang.Integer)0);
    java.lang.Object obj34 = null;
    boolean b35 = set31.equals(obj34);
    set.Set set36 = set30.intersect(set31);
    boolean b38 = set30.belongs((java.lang.Integer)10);
    int i39 = set30.size();
    set.Set set40 = set28.intersect(set30);
    boolean b42 = set28.remove((java.lang.Integer)0);
    boolean b44 = set28.remove((java.lang.Integer)0);
    boolean b45 = set25.equals((java.lang.Object)0);
    set25.clear();
    boolean b47 = set6.equals((java.lang.Object)set25);
    set.Set set48 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set49 = set6.intersect(set48);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set6.add((java.lang.Integer)(-1));
    int i9 = set6.size();
    boolean b11 = set6.remove((java.lang.Integer)0);
    boolean b13 = set6.add((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set6.equals(obj14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.add((java.lang.Integer)100);
    set.Set set9 = new set.Set();
    boolean b11 = set9.remove((java.lang.Integer)0);
    boolean b13 = set9.remove((java.lang.Integer)0);
    int i14 = set9.size();
    set.Set set15 = new set.Set();
    boolean b17 = set15.remove((java.lang.Integer)0);
    boolean b19 = set15.remove((java.lang.Integer)0);
    int i20 = set15.size();
    boolean b22 = set15.remove((java.lang.Integer)0);
    set.Set set23 = set9.intersect(set15);
    boolean b24 = set0.equals((java.lang.Object)set15);
    boolean b26 = set15.add((java.lang.Integer)10);
    boolean b27 = set15.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }

    set.Set set0 = new set.Set();
    boolean b2 = set0.remove((java.lang.Integer)0);
    boolean b4 = set0.remove((java.lang.Integer)0);
    int i5 = set0.size();
    set.Set set6 = new set.Set();
    boolean b8 = set6.remove((java.lang.Integer)1);
    int i9 = set6.size();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b17 = set10.isEmpty();
    java.lang.Object obj18 = null;
    boolean b19 = set10.equals(obj18);
    set.Set set20 = new set.Set();
    set20.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set22.belongs((java.lang.Integer)10);
    int i31 = set22.size();
    set.Set set32 = set20.intersect(set22);
    boolean b34 = set20.remove((java.lang.Integer)0);
    boolean b35 = set20.isEmpty();
    java.lang.Integer[] i_array39 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i40 = new java.util.ArrayList<java.lang.Integer>();
    boolean b41 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i40, i_array39);
    set.Set set42 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i40);
    set.Set set43 = set20.union(set42);
    set.Set set44 = set10.intersect(set20);
    set.Set set45 = set6.union(set44);
    boolean b46 = set0.equals((java.lang.Object)set44);
    boolean b48 = set0.remove((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    int i7 = set1.size();
    java.lang.Object obj8 = null;
    boolean b9 = set1.equals(obj8);
    boolean b10 = set1.isEmpty();
    boolean b11 = set1.isEmpty();
    boolean b13 = set1.add((java.lang.Integer)0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    boolean b4 = set2.remove((java.lang.Integer)0);
    boolean b6 = set2.remove((java.lang.Integer)0);
    int i7 = set2.size();
    boolean b9 = set2.remove((java.lang.Integer)0);
    set.Set set10 = set0.union(set2);
    boolean b11 = set10.isEmpty();
    set.Set set12 = new set.Set();
    set.Set set13 = new set.Set();
    boolean b15 = set13.remove((java.lang.Integer)0);
    java.lang.Object obj16 = null;
    boolean b17 = set13.equals(obj16);
    set.Set set18 = set12.intersect(set13);
    boolean b20 = set12.belongs((java.lang.Integer)10);
    set12.clear();
    set.Set set22 = new set.Set();
    set.Set set23 = new set.Set();
    boolean b25 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj26 = null;
    boolean b27 = set23.equals(obj26);
    set.Set set28 = set22.intersect(set23);
    boolean b30 = set28.add((java.lang.Integer)(-1));
    set.Set set31 = set12.union(set28);
    set.Set set32 = set10.intersect(set28);
    boolean b34 = set28.remove((java.lang.Integer)2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    set0.clear();
    set.Set set10 = new set.Set();
    set.Set set11 = new set.Set();
    boolean b13 = set11.remove((java.lang.Integer)0);
    java.lang.Object obj14 = null;
    boolean b15 = set11.equals(obj14);
    set.Set set16 = set10.intersect(set11);
    boolean b18 = set16.add((java.lang.Integer)(-1));
    set.Set set19 = set0.union(set16);
    int i20 = set19.size();
    set.Set set21 = new set.Set();
    set.Set set22 = new set.Set();
    boolean b24 = set22.remove((java.lang.Integer)0);
    java.lang.Object obj25 = null;
    boolean b26 = set22.equals(obj25);
    set.Set set27 = set21.intersect(set22);
    boolean b29 = set21.belongs((java.lang.Integer)10);
    set21.clear();
    int i31 = set21.size();
    set.Set set32 = new set.Set();
    set.Set set33 = new set.Set();
    boolean b35 = set33.remove((java.lang.Integer)0);
    java.lang.Object obj36 = null;
    boolean b37 = set33.equals(obj36);
    set.Set set38 = set32.intersect(set33);
    set.Set set39 = new set.Set();
    set.Set set40 = new set.Set();
    boolean b42 = set40.remove((java.lang.Integer)0);
    java.lang.Object obj43 = null;
    boolean b44 = set40.equals(obj43);
    set.Set set45 = set39.intersect(set40);
    boolean b46 = set32.equals((java.lang.Object)set40);
    set.Set set47 = set21.union(set40);
    boolean b49 = set47.add((java.lang.Integer)1);
    set.Set set50 = new set.Set();
    set.Set set51 = new set.Set();
    boolean b53 = set51.remove((java.lang.Integer)0);
    java.lang.Object obj54 = null;
    boolean b55 = set51.equals(obj54);
    set.Set set56 = set50.intersect(set51);
    boolean b57 = set50.isEmpty();
    boolean b59 = set50.add((java.lang.Integer)0);
    boolean b60 = set50.isEmpty();
    int i61 = set50.size();
    boolean b63 = set50.belongs((java.lang.Integer)1);
    boolean b64 = set47.equals((java.lang.Object)b63);
    boolean b65 = set47.isEmpty();
    set47.clear();
    boolean b67 = set19.equals((java.lang.Object)set47);
    boolean b68 = set47.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    java.lang.Integer[] i_array19 = new java.lang.Integer[] { 1, 10, 1 };
    java.util.ArrayList<java.lang.Integer> arraylist_i20 = new java.util.ArrayList<java.lang.Integer>();
    boolean b21 = java.util.Collections.addAll((java.util.Collection<java.lang.Integer>)arraylist_i20, i_array19);
    set.Set set22 = new set.Set((java.util.Collection<java.lang.Integer>)arraylist_i20);
    set.Set set23 = set0.union(set22);
    boolean b24 = set23.isEmpty();
    boolean b26 = set23.remove((java.lang.Integer)0);
    java.lang.Object obj27 = null;
    boolean b28 = set23.equals(obj27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(i_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }

    set.Set set0 = new set.Set();
    set0.clear();
    set.Set set2 = new set.Set();
    set.Set set3 = new set.Set();
    boolean b5 = set3.remove((java.lang.Integer)0);
    java.lang.Object obj6 = null;
    boolean b7 = set3.equals(obj6);
    set.Set set8 = set2.intersect(set3);
    boolean b10 = set2.belongs((java.lang.Integer)10);
    int i11 = set2.size();
    set.Set set12 = set0.intersect(set2);
    boolean b14 = set0.remove((java.lang.Integer)0);
    boolean b15 = set0.isEmpty();
    boolean b16 = set0.isEmpty();
    boolean b18 = set0.remove((java.lang.Integer)0);
    set.Set set19 = null;
    // The following exception was thrown during execution in test generation
    try {
    set.Set set20 = set0.intersect(set19);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }

    set.Set set0 = new set.Set();
    set.Set set1 = new set.Set();
    boolean b3 = set1.remove((java.lang.Integer)0);
    java.lang.Object obj4 = null;
    boolean b5 = set1.equals(obj4);
    set.Set set6 = set0.intersect(set1);
    boolean b8 = set0.belongs((java.lang.Integer)10);
    boolean b10 = set0.remove((java.lang.Integer)0);
    set.Set set11 = new set.Set();
    set.Set set12 = new set.Set();
    boolean b14 = set12.remove((java.lang.Integer)0);
    java.lang.Object obj15 = null;
    boolean b16 = set12.equals(obj15);
    set.Set set17 = set11.intersect(set12);
    boolean b19 = set17.add((java.lang.Integer)(-1));
    int i20 = set17.size();
    boolean b22 = set17.belongs((java.lang.Integer)1);
    int i23 = set17.size();
    boolean b25 = set17.remove((java.lang.Integer)0);
    set.Set set26 = set0.intersect(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(set26);

  }

}
