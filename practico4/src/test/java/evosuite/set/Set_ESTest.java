/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 15 03:35:02 GMT 2023
 */

package evosuite.set;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import evosuite.set.Set;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class Set_ESTest extends Set_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger((String) null, 0);
      linkedList0.add(integer0);
      Set set0 = new Set(linkedList0);
      set0.hashCode();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer(0);
      set0.add(integer0);
      Integer integer1 = new Integer((-1975));
      set0.add(integer0);
      set0.add(integer1);
      boolean boolean0 = set0.repOk();
      assertFalse(set0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger((String) null, 0);
      linkedList0.add(integer0);
      Set set0 = new Set(linkedList0);
      set0.add(integer0);
      assertFalse(set0.repOk());
      
      set0.clear();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      Set set1 = new Set(linkedList0);
      Set set2 = set0.union(set1);
      assertNotSame(set2, set1);
      assertNotSame(set2, set0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      Set set0 = new Set(linkedList0);
      Set set1 = new Set(linkedList0);
      Set set2 = set0.intersect(set1);
      assertTrue(set2.isEmpty());
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      int int0 = set0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.offer(integer0);
      Set set0 = new Set(linkedList0);
      int int0 = set0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      boolean boolean0 = set0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger((String) null, 0);
      linkedList0.add(integer0);
      Set set0 = new Set(linkedList0);
      set0.add(integer0);
      Integer integer1 = Integer.getInteger("", 1);
      boolean boolean0 = set0.belongs(integer1);
      assertFalse(set0.repOk());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer((-605));
      set0.add(integer0);
      set0.add(integer0);
      boolean boolean0 = set0.belongs(integer0);
      assertFalse(set0.repOk());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer(0);
      set0.add(integer0);
      set0.add(integer0);
      boolean boolean0 = set0.add(integer0);
      assertFalse(set0.repOk());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Set set0 = new Set();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set1 = new Set(linkedList0);
      boolean boolean0 = set1.equals(set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Set set0 = new Set();
      boolean boolean0 = set0.equals("evosuite.set.Set");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Set set0 = new Set();
      boolean boolean0 = set0.equals(set0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer((-311));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set1 = new Set(linkedList0);
      set1.add(integer0);
      boolean boolean0 = set1.equals(set0);
      assertFalse(set1.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer((-311));
      Integer integer1 = new Integer(0);
      set0.add(integer1);
      set0.add(integer0);
      boolean boolean0 = set0.repOk();
      assertEquals(2, set0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      boolean boolean0 = set0.repOk();
      assertTrue(boolean0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      Integer integer0 = new Integer((-672));
      set0.add(integer0);
      Integer integer1 = new Integer((-1));
      set0.add(integer1);
      boolean boolean0 = set0.remove(integer1);
      assertFalse(set0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Set set0 = new Set();
      try { 
        set0.remove((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("evosuite.set.Set", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer((-311));
      boolean boolean0 = set0.remove(integer0);
      assertFalse(boolean0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      try { 
        set0.belongs((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("evosuite.set.Set", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Set set0 = new Set();
      try { 
        set0.union((Set) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("evosuite.set.Set", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer((-311));
      Integer integer1 = new Integer(0);
      set0.add(integer1);
      set0.add(integer0);
      set0.union(set0);
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      try { 
        set0.add((Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("evosuite.set.Set", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Set set0 = new Set();
      Integer integer0 = new Integer((-311));
      set0.add(integer0);
      set0.add(integer0);
      set0.intersect(set0);
      assertFalse(set0.repOk());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Set set0 = new Set(linkedList0);
      try { 
        set0.intersect((Set) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("evosuite.set.Set", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Set set0 = null;
      try {
        set0 = new Set((Collection<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("evosuite.set.Set", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.offer(integer0);
      Set set0 = new Set(linkedList0);
      boolean boolean0 = set0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, set0.size());
  }
}
