/*
 * This file was automatically generated by EvoSuite
 * Fri Sep 15 01:44:00 GMT 2023
 */

package evosuite.listas;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import evosuite.listas.ListaSobreArreglos;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
public class ListaSobreArreglos_Failed_ESTest extends ListaSobreArreglos_Failed_ESTest_scaffolding {

  // Contract violation: toString returns normally check

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      ListaSobreArreglos listaSobreArreglos1 = new ListaSobreArreglos();
      listaSobreArreglos0.insertar((Object) listaSobreArreglos1);
      // Throws exception: null
      // Undeclared exception!
      listaSobreArreglos0.toString();
  }

  // Contract violation: NullPointerException

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      Object object0 = new Object();
      listaSobreArreglos0.insertar(object0);
      // Throws NullPointerException: null
      // Undeclared exception!
      listaSobreArreglos0.toString();
  }

  // Contract violation: hashCode returns normally check

  //@Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      ListaSobreArreglos listaSobreArreglos1 = new ListaSobreArreglos();
      listaSobreArreglos0.insertar((Object) listaSobreArreglos1);
      listaSobreArreglos1.insertar((Object) listaSobreArreglos0);
      // Throws exception: null
      listaSobreArreglos0.hashCode();
  }

  // Contract violation: Undeclared exception check

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      Object object0 = new Object();
      listaSobreArreglos0.insertar(object0);
      listaSobreArreglos0.eliminar(0);
      // Throws undeclared exception: ListaSobreArreglos.insertar: índice inválido
      // Undeclared exception!
      listaSobreArreglos0.insertar(object0);
  }

  // Contract violation: toString returns normally check

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      Object object0 = new Object();
      listaSobreArreglos0.insertar(0, object0);
      // Throws exception: null
      // Undeclared exception!
      listaSobreArreglos0.toString();
  }

  // Contract violation: hashCode returns normally check

  //@Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      ListaSobreArreglos listaSobreArreglos1 = new ListaSobreArreglos();
      listaSobreArreglos0.insertar((Object) "[]");
      listaSobreArreglos1.insertar((Object) listaSobreArreglos0);
      listaSobreArreglos0.insertar(1, (Object) listaSobreArreglos1);
      // Throws exception: null
      listaSobreArreglos0.hashCode();
  }

  // Contract violation: Equals hashcode check

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      listaSobreArreglos0.insertar((Object) "");
      ListaSobreArreglos listaSobreArreglos1 = new ListaSobreArreglos();
      listaSobreArreglos0.vaciar();
      boolean boolean0 = listaSobreArreglos0.equals(listaSobreArreglos1);
      int int0 = listaSobreArreglos0.hashCode();
      int int1 = listaSobreArreglos1.hashCode();
      // Violates contract equals - hashcode
      boolean boolean1 = int0 == int1;
      assertTrue(boolean0 == boolean1);
  }

  // Contract violation: hashCode returns normally check

  //@Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      listaSobreArreglos0.insertar((Object) listaSobreArreglos0);
      // Throws exception: Loop has been executed more times than the allowed 10000
      listaSobreArreglos0.hashCode();
  }

  // Contract violation: hashCode returns normally check

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ListaSobreArreglos listaSobreArreglos0 = new ListaSobreArreglos();
      ListaSobreArreglos listaSobreArreglos1 = new ListaSobreArreglos();
      listaSobreArreglos1.insertar(0, (Object) listaSobreArreglos1);
      // Throws exception: Loop has been executed more times than the allowed 10000
      listaSobreArreglos0.hashCode();
  }
}
